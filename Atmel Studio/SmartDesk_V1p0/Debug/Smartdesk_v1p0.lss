
Smartdesk_v1p0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00804000  00004c9e  00004d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  00804122  00804122  00004e54  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00004e54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004eb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  00004ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f1c  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000380e  00000000  00000000  0000d65c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fad  00000000  00000000  00010e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ca8  00000000  00000000  00014e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040ad  00000000  00000000  00016ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a2a  00000000  00000000  0001ab6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  0001e597  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
       4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_3>
      10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      44:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__vector_17>
      48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      68:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      6c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_27>
      70:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      7c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      80:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      84:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      88:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      8c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      90:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      94:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__vector_37>
      98:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__vector_38>
      9c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      a0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	df e7       	ldi	r29, 0x7F	; 127
      ae:	de bf       	out	0x3e, r29	; 62

000000b0 <__do_copy_data>:
      b0:	11 e4       	ldi	r17, 0x41	; 65
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b0 e4       	ldi	r27, 0x40	; 64
      b6:	ee e9       	ldi	r30, 0x9E	; 158
      b8:	fc e4       	ldi	r31, 0x4C	; 76
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a2 32       	cpi	r26, 0x22	; 34
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	21 e4       	ldi	r18, 0x41	; 65
      cc:	a2 e2       	ldi	r26, 0x22	; 34
      ce:	b1 e4       	ldi	r27, 0x41	; 65
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ac 3b       	cpi	r26, 0xBC	; 188
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
      de:	0c 94 4d 26 	jmp	0x4c9a	; 0x4c9a <_exit>

000000e2 <__bad_interrupt>:
      e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
	system_init();
      ee:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <system_init>

	touch_init();
      f2:	0e 94 24 07 	call	0xe48	; 0xe48 <touch_init>
}
      f6:	00 00       	nop
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <__vector_3>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_CNT_vect)
{
      fe:	1f 92       	push	r1
     100:	0f 92       	push	r0
     102:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     106:	0f 92       	push	r0
     108:	11 24       	eor	r1, r1
     10a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	4f 93       	push	r20
     116:	5f 93       	push	r21
     118:	6f 93       	push	r22
     11a:	7f 93       	push	r23
     11c:	8f 93       	push	r24
     11e:	9f 93       	push	r25
     120:	af 93       	push	r26
     122:	bf 93       	push	r27
     124:	ef 93       	push	r30
     126:	ff 93       	push	r31
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
     130:	0e 94 86 07 	call	0xf0c	; 0xf0c <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
     134:	80 e4       	ldi	r24, 0x40	; 64
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	22 e0       	ldi	r18, 0x02	; 2
     13a:	fc 01       	movw	r30, r24
     13c:	23 83       	std	Z+3, r18	; 0x03
}
     13e:	00 00       	nop
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	ff 91       	pop	r31
     146:	ef 91       	pop	r30
     148:	bf 91       	pop	r27
     14a:	af 91       	pop	r26
     14c:	9f 91       	pop	r25
     14e:	8f 91       	pop	r24
     150:	7f 91       	pop	r23
     152:	6f 91       	pop	r22
     154:	5f 91       	pop	r21
     156:	4f 91       	pop	r20
     158:	3f 91       	pop	r19
     15a:	2f 91       	pop	r18
     15c:	0f 90       	pop	r0
     15e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
     162:	0f 90       	pop	r0
     164:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	00 d0       	rcall	.+0      	; 0x174 <PORTC_set_pin_level+0x6>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	88 23       	and	r24, r24
     180:	a9 f0       	breq	.+42     	; 0x1ac <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
     182:	88 e0       	ldi	r24, 0x08	; 8
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	28 e0       	ldi	r18, 0x08	; 8
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	f9 01       	movw	r30, r18
     18c:	21 81       	ldd	r18, Z+1	; 0x01
     18e:	62 2f       	mov	r22, r18
     190:	29 81       	ldd	r18, Y+1	; 0x01
     192:	42 2f       	mov	r20, r18
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <PORTC_set_pin_level+0x32>
     19c:	22 0f       	add	r18, r18
     19e:	33 1f       	adc	r19, r19
     1a0:	4a 95       	dec	r20
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <PORTC_set_pin_level+0x2e>
     1a4:	26 2b       	or	r18, r22
     1a6:	fc 01       	movw	r30, r24
     1a8:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
     1aa:	15 c0       	rjmp	.+42     	; 0x1d6 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1ac:	88 e0       	ldi	r24, 0x08	; 8
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	28 e0       	ldi	r18, 0x08	; 8
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	21 81       	ldd	r18, Z+1	; 0x01
     1b8:	62 2f       	mov	r22, r18
     1ba:	29 81       	ldd	r18, Y+1	; 0x01
     1bc:	42 2f       	mov	r20, r18
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <PORTC_set_pin_level+0x5c>
     1c6:	22 0f       	add	r18, r18
     1c8:	33 1f       	adc	r19, r19
     1ca:	4a 95       	dec	r20
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <PORTC_set_pin_level+0x58>
     1ce:	20 95       	com	r18
     1d0:	26 23       	and	r18, r22
     1d2:	fc 01       	movw	r30, r24
     1d4:	21 83       	std	Z+1, r18	; 0x01
	}
}
     1d6:	00 00       	nop
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <SCL_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void SCL_set_level(const bool level)
{
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	1f 92       	push	r1
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(3, level);
     1ee:	69 81       	ldd	r22, Y+1	; 0x01
     1f0:	83 e0       	ldi	r24, 0x03	; 3
     1f2:	0e 94 b7 00 	call	0x16e	; 0x16e <PORTC_set_pin_level>
}
     1f6:	00 00       	nop
     1f8:	0f 90       	pop	r0
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <ISSI31FL3728_ZeroColumns>:
uint8_t buffer[2];


// Reset the column registers to blank the display since this device has no POR function to do it
i2c_error_t ISSI31FL3728_ZeroColumns(void)
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <ISSI31FL3728_ZeroColumns+0x6>
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	i2c_error_t ret;
	int i;
		
	for (i=0;i<9;i++){
     20c:	19 82       	std	Y+1, r1	; 0x01
     20e:	1a 82       	std	Y+2, r1	; 0x02
     210:	0b c0       	rjmp	.+22     	; 0x228 <ISSI31FL3728_ZeroColumns+0x28>
		ret = ISSI31FL3728_WriteRegister(REG_CD1+i,0);
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	8f 5f       	subi	r24, 0xFF	; 255
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     21c:	8b 83       	std	Y+3, r24	; 0x03
i2c_error_t ISSI31FL3728_ZeroColumns(void)
{
	i2c_error_t ret;
	int i;
		
	for (i=0;i<9;i++){
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	9a 81       	ldd	r25, Y+2	; 0x02
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	89 83       	std	Y+1, r24	; 0x01
     226:	9a 83       	std	Y+2, r25	; 0x02
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	09 97       	sbiw	r24, 0x09	; 9
     22e:	8c f3       	brlt	.-30     	; 0x212 <ISSI31FL3728_ZeroColumns+0x12>
		ret = ISSI31FL3728_WriteRegister(REG_CD1+i,0);
	}

	ret = ISSI31FL3728_WriteRegister(REG_CUP, 0);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     238:	8b 83       	std	Y+3, r24	; 0x03
	return(I2C_NOERR);
     23a:	80 e0       	ldi	r24, 0x00	; 0
}
     23c:	23 96       	adiw	r28, 0x03	; 3
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	de bf       	out	0x3e, r29	; 62
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	08 95       	ret

00000248 <ISSI31FL3728_InitDevice>:

i2c_error_t ISSI31FL3728_InitDevice(void)
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	1f 92       	push	r1
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
	i2c_error_t ret;
	// Init to show only blue LEDs in column COL1
	ret = ISSI31FL3728_WriteRegister(REG_CD9,3);
     252:	63 e0       	ldi	r22, 0x03	; 3
     254:	89 e0       	ldi	r24, 0x09	; 9
     256:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     25a:	89 83       	std	Y+1, r24	; 0x01
	ret = ISSI31FL3728_WriteRegister(REG_CUP, 0);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	8c e0       	ldi	r24, 0x0C	; 12
     260:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     264:	89 83       	std	Y+1, r24	; 0x01
	return(I2C_NOERR);
     266:	80 e0       	ldi	r24, 0x00	; 0
}
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <ISSI31FL3728_ConfigDevice>:

i2c_error_t ISSI31FL3728_ConfigDevice(void)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	1f 92       	push	r1
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
	// Desired device config is as follows:
	// CONFIG = SSD:Normal, AUDIOEN:DISABLED, ADM:7x9
	// LIGHTEFFECT = AGS:0DB, CS:10mA (initially for testing)
	
	
	ret = ISSI31FL3728_WriteRegister(REG_CONFIG, (CONFIG_SSD_NORMAL << CONFIG_SSD_BIT) | (CONFIG_AEN_DIS << CONFIG_AEN_BIT) | (CONFIG_ADM_7X9 << CONFIG_ADM_BIT));
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     282:	89 83       	std	Y+1, r24	; 0x01
	ret = ISSI31FL3728_WriteRegister(REG_LIGHT, (LIGHT_AGS_0DB << LIGHT_AGS_BIT) || (LIGHT_CS_5mA << LIGHT_CS_BIT));	
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	8d e0       	ldi	r24, 0x0D	; 13
     288:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     28c:	89 83       	std	Y+1, r24	; 0x01
	
	// Init to show only blue LEDs in column COL1
	//ret = ISSI31FL3728_WriteRegister(REG_CD9,3);
	//ret = ISSI31FL3728_WriteRegister(REG_CUP, 0);
	return(I2C_NOERR);
     28e:	80 e0       	ldi	r24, 0x00	; 0
}
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <ISSI31FL3728_WriteRegister>:


i2c_error_t ISSI31FL3728_WriteRegister(uint8_t reg, uint8_t data)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	25 97       	sbiw	r28, 0x05	; 5
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	8c 83       	std	Y+4, r24	; 0x04
     2a8:	6d 83       	std	Y+5, r22	; 0x05
	/* timeout is used to get out of twim_release, when there is no device connected to the bus*/
	uint16_t timeout = I2C_TIMEOUT;
     2aa:	80 e1       	ldi	r24, 0x10	; 16
     2ac:	97 e2       	ldi	r25, 0x27	; 39
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	9a 83       	std	Y+2, r25	; 0x02
	i2c_error_t ret;

	if(I2C_FAIL == I2C_0_write1ByteRegister(SLAVEADDR, reg, data)){
     2b2:	4d 81       	ldd	r20, Y+5	; 0x05
     2b4:	6c 81       	ldd	r22, Y+4	; 0x04
     2b6:	80 e6       	ldi	r24, 0x60	; 96
     2b8:	0e 94 c6 14 	call	0x298c	; 0x298c <I2C_0_write1ByteRegister>
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	21 f4       	brne	.+8      	; 0x2c8 <ISSI31FL3728_WriteRegister+0x30>
		ISSI31FL3728_ResetBus();
     2c0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ISSI31FL3728_ResetBus>
		ISSI31FL3728_ConfigDevice();
     2c4:	0e 94 38 01 	call	0x270	; 0x270 <ISSI31FL3728_ConfigDevice>
	; // sit here until finished.
	if (!timeout)
	return I2C_FAIL;
#endif

	return(ret);
     2c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2ca:	25 96       	adiw	r28, 0x05	; 5
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <ISSI31FL3728_ResetBus>:

void ISSI31FL3728_ResetBus(void)
{
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	6e 97       	sbiw	r28, 0x1e	; 30
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	de bf       	out	0x3e, r29	; 62
	int i;
	
	// Disconnect I2C 
	PORTMUX.TWIROUTEA &= ~PORTMUX_TWI01_bm;
     2e4:	80 ee       	ldi	r24, 0xE0	; 224
     2e6:	95 e0       	ldi	r25, 0x05	; 5
     2e8:	20 ee       	ldi	r18, 0xE0	; 224
     2ea:	35 e0       	ldi	r19, 0x05	; 5
     2ec:	f9 01       	movw	r30, r18
     2ee:	25 81       	ldd	r18, Z+5	; 0x05
     2f0:	2d 7f       	andi	r18, 0xFD	; 253
     2f2:	fc 01       	movw	r30, r24
     2f4:	25 83       	std	Z+5, r18	; 0x05
	
	TWI0.MCTRLA = 0 << TWI_ENABLE_bp        /* Enable TWI Master: DISABLED */
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	99 e0       	ldi	r25, 0x09	; 9
     2fa:	fc 01       	movw	r30, r24
     2fc:	13 82       	std	Z+3, r1	; 0x03
	| 0 << TWI_RIEN_bp        /* Read Interrupt Enable: DISABLED */
	| 0 << TWI_SMEN_bp        /* Smart Mode Enable: disabled */
	| TWI_TIMEOUT_DISABLED_gc /* Bus Timeout Disabled */
	| 0 << TWI_WIEN_bp;       /* Write Interrupt Enable: DISABLED */		
		
	TWI0.MCTRLB |= TWI_FLUSH_bm;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	99 e0       	ldi	r25, 0x09	; 9
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	39 e0       	ldi	r19, 0x09	; 9
     306:	f9 01       	movw	r30, r18
     308:	24 81       	ldd	r18, Z+4	; 0x04
     30a:	28 60       	ori	r18, 0x08	; 8
     30c:	fc 01       	movw	r30, r24
     30e:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	99 e0       	ldi	r25, 0x09	; 9
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	39 e0       	ldi	r19, 0x09	; 9
     318:	f9 01       	movw	r30, r18
     31a:	25 81       	ldd	r18, Z+5	; 0x05
     31c:	21 60       	ori	r18, 0x01	; 1
     31e:	fc 01       	movw	r30, r24
     320:	25 83       	std	Z+5, r18	; 0x05
	// Reset module
	TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	99 e0       	ldi	r25, 0x09	; 9
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	39 e0       	ldi	r19, 0x09	; 9
     32a:	f9 01       	movw	r30, r18
     32c:	25 81       	ldd	r18, Z+5	; 0x05
     32e:	20 6c       	ori	r18, 0xC0	; 192
     330:	fc 01       	movw	r30, r24
     332:	25 83       	std	Z+5, r18	; 0x05
	
	I2C_0_close();	
     334:	0e 94 c3 10 	call	0x2186	; 0x2186 <I2C_0_close>
		
	// Issue 10-clock reset sequence to force the slave to release SDA
	for (i=0;i<10;i++){
     338:	19 82       	std	Y+1, r1	; 0x01
     33a:	1a 82       	std	Y+2, r1	; 0x02
     33c:	ef c0       	rjmp	.+478    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		SCL_set_level(true);
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SCL_set_level>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	a0 e8       	ldi	r26, 0x80	; 128
     34a:	bf e3       	ldi	r27, 0x3F	; 63
     34c:	8b 83       	std	Y+3, r24	; 0x03
     34e:	9c 83       	std	Y+4, r25	; 0x04
     350:	ad 83       	std	Y+5, r26	; 0x05
     352:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	4a e7       	ldi	r20, 0x7A	; 122
     35a:	53 e4       	ldi	r21, 0x43	; 67
     35c:	6b 81       	ldd	r22, Y+3	; 0x03
     35e:	7c 81       	ldd	r23, Y+4	; 0x04
     360:	8d 81       	ldd	r24, Y+5	; 0x05
     362:	9e 81       	ldd	r25, Y+6	; 0x06
     364:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__mulsf3>
     368:	dc 01       	movw	r26, r24
     36a:	cb 01       	movw	r24, r22
     36c:	8d 8b       	std	Y+21, r24	; 0x15
     36e:	9e 8b       	std	Y+22, r25	; 0x16
     370:	af 8b       	std	Y+23, r26	; 0x17
     372:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	5f e3       	ldi	r21, 0x3F	; 63
     37c:	6d 89       	ldd	r22, Y+21	; 0x15
     37e:	7e 89       	ldd	r23, Y+22	; 0x16
     380:	8f 89       	ldd	r24, Y+23	; 0x17
     382:	98 8d       	ldd	r25, Y+24	; 0x18
     384:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__cmpsf2>
     388:	88 23       	and	r24, r24
     38a:	2c f4       	brge	.+10     	; 0x396 <ISSI31FL3728_ResetBus+0xc0>
		__ticks = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	89 8f       	std	Y+25, r24	; 0x19
     392:	9a 8f       	std	Y+26, r25	; 0x1a
     394:	3f c0       	rjmp	.+126    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	else if (__tmp > 65535)
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	3f ef       	ldi	r19, 0xFF	; 255
     39a:	4f e7       	ldi	r20, 0x7F	; 127
     39c:	57 e4       	ldi	r21, 0x47	; 71
     39e:	6d 89       	ldd	r22, Y+21	; 0x15
     3a0:	7e 89       	ldd	r23, Y+22	; 0x16
     3a2:	8f 89       	ldd	r24, Y+23	; 0x17
     3a4:	98 8d       	ldd	r25, Y+24	; 0x18
     3a6:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <__gesf2>
     3aa:	18 16       	cp	r1, r24
     3ac:	4c f5       	brge	.+82     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e2       	ldi	r20, 0x20	; 32
     3b4:	51 e4       	ldi	r21, 0x41	; 65
     3b6:	6b 81       	ldd	r22, Y+3	; 0x03
     3b8:	7c 81       	ldd	r23, Y+4	; 0x04
     3ba:	8d 81       	ldd	r24, Y+5	; 0x05
     3bc:	9e 81       	ldd	r25, Y+6	; 0x06
     3be:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__mulsf3>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__fixunssfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	89 8f       	std	Y+25, r24	; 0x19
     3d4:	9a 8f       	std	Y+26, r25	; 0x1a
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <ISSI31FL3728_ResetBus+0x120>
     3d8:	89 e1       	ldi	r24, 0x19	; 25
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	8b 8f       	std	Y+27, r24	; 0x1b
     3de:	9c 8f       	std	Y+28, r25	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <ISSI31FL3728_ResetBus+0x10e>
     3e8:	8b 8f       	std	Y+27, r24	; 0x1b
     3ea:	9c 8f       	std	Y+28, r25	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ec:	89 8d       	ldd	r24, Y+25	; 0x19
     3ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	89 8f       	std	Y+25, r24	; 0x19
     3f4:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f6:	89 8d       	ldd	r24, Y+25	; 0x19
     3f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3fa:	89 2b       	or	r24, r25
     3fc:	69 f7       	brne	.-38     	; 0x3d8 <ISSI31FL3728_ResetBus+0x102>
     3fe:	14 c0       	rjmp	.+40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     400:	6d 89       	ldd	r22, Y+21	; 0x15
     402:	7e 89       	ldd	r23, Y+22	; 0x16
     404:	8f 89       	ldd	r24, Y+23	; 0x17
     406:	98 8d       	ldd	r25, Y+24	; 0x18
     408:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	89 8f       	std	Y+25, r24	; 0x19
     412:	9a 8f       	std	Y+26, r25	; 0x1a
     414:	89 8d       	ldd	r24, Y+25	; 0x19
     416:	9a 8d       	ldd	r25, Y+26	; 0x1a
     418:	8d 8f       	std	Y+29, r24	; 0x1d
     41a:	9e 8f       	std	Y+30, r25	; 0x1e
     41c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     41e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     424:	8d 8f       	std	Y+29, r24	; 0x1d
     426:	9e 8f       	std	Y+30, r25	; 0x1e
		_delay_ms(1);
		SCL_set_level(false);
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SCL_set_level>
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	a0 e8       	ldi	r26, 0x80	; 128
     434:	bf e3       	ldi	r27, 0x3F	; 63
     436:	8f 83       	std	Y+7, r24	; 0x07
     438:	98 87       	std	Y+8, r25	; 0x08
     43a:	a9 87       	std	Y+9, r26	; 0x09
     43c:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	4a e7       	ldi	r20, 0x7A	; 122
     444:	53 e4       	ldi	r21, 0x43	; 67
     446:	6f 81       	ldd	r22, Y+7	; 0x07
     448:	78 85       	ldd	r23, Y+8	; 0x08
     44a:	89 85       	ldd	r24, Y+9	; 0x09
     44c:	9a 85       	ldd	r25, Y+10	; 0x0a
     44e:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__mulsf3>
     452:	dc 01       	movw	r26, r24
     454:	cb 01       	movw	r24, r22
     456:	8b 87       	std	Y+11, r24	; 0x0b
     458:	9c 87       	std	Y+12, r25	; 0x0c
     45a:	ad 87       	std	Y+13, r26	; 0x0d
     45c:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 e8       	ldi	r20, 0x80	; 128
     464:	5f e3       	ldi	r21, 0x3F	; 63
     466:	6b 85       	ldd	r22, Y+11	; 0x0b
     468:	7c 85       	ldd	r23, Y+12	; 0x0c
     46a:	8d 85       	ldd	r24, Y+13	; 0x0d
     46c:	9e 85       	ldd	r25, Y+14	; 0x0e
     46e:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__cmpsf2>
     472:	88 23       	and	r24, r24
     474:	2c f4       	brge	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		__ticks = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	8f 87       	std	Y+15, r24	; 0x0f
     47c:	98 8b       	std	Y+16, r25	; 0x10
     47e:	3f c0       	rjmp	.+126    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
	else if (__tmp > 65535)
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	3f ef       	ldi	r19, 0xFF	; 255
     484:	4f e7       	ldi	r20, 0x7F	; 127
     486:	57 e4       	ldi	r21, 0x47	; 71
     488:	6b 85       	ldd	r22, Y+11	; 0x0b
     48a:	7c 85       	ldd	r23, Y+12	; 0x0c
     48c:	8d 85       	ldd	r24, Y+13	; 0x0d
     48e:	9e 85       	ldd	r25, Y+14	; 0x0e
     490:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <__gesf2>
     494:	18 16       	cp	r1, r24
     496:	4c f5       	brge	.+82     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e2       	ldi	r20, 0x20	; 32
     49e:	51 e4       	ldi	r21, 0x41	; 65
     4a0:	6f 81       	ldd	r22, Y+7	; 0x07
     4a2:	78 85       	ldd	r23, Y+8	; 0x08
     4a4:	89 85       	ldd	r24, Y+9	; 0x09
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__mulsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__fixunssfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	8f 87       	std	Y+15, r24	; 0x0f
     4be:	98 8b       	std	Y+16, r25	; 0x10
     4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4c2:	89 e1       	ldi	r24, 0x19	; 25
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	89 8b       	std	Y+17, r24	; 0x11
     4c8:	9a 8b       	std	Y+18, r25	; 0x12
     4ca:	89 89       	ldd	r24, Y+17	; 0x11
     4cc:	9a 89       	ldd	r25, Y+18	; 0x12
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4d2:	89 8b       	std	Y+17, r24	; 0x11
     4d4:	9a 8b       	std	Y+18, r25	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     4d8:	98 89       	ldd	r25, Y+16	; 0x10
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	8f 87       	std	Y+15, r24	; 0x0f
     4de:	98 8b       	std	Y+16, r25	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     4e2:	98 89       	ldd	r25, Y+16	; 0x10
     4e4:	89 2b       	or	r24, r25
     4e6:	69 f7       	brne	.-38     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4e8:	14 c0       	rjmp	.+40     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ea:	6b 85       	ldd	r22, Y+11	; 0x0b
     4ec:	7c 85       	ldd	r23, Y+12	; 0x0c
     4ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     4f0:	9e 85       	ldd	r25, Y+14	; 0x0e
     4f2:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__fixunssfsi>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	8f 87       	std	Y+15, r24	; 0x0f
     4fc:	98 8b       	std	Y+16, r25	; 0x10
     4fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     500:	98 89       	ldd	r25, Y+16	; 0x10
     502:	8b 8b       	std	Y+19, r24	; 0x13
     504:	9c 8b       	std	Y+20, r25	; 0x14
     506:	8b 89       	ldd	r24, Y+19	; 0x13
     508:	9c 89       	ldd	r25, Y+20	; 0x14
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     50e:	8b 8b       	std	Y+19, r24	; 0x13
     510:	9c 8b       	std	Y+20, r25	; 0x14
	TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);
	
	I2C_0_close();	
		
	// Issue 10-clock reset sequence to force the slave to release SDA
	for (i=0;i<10;i++){
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	9a 81       	ldd	r25, Y+2	; 0x02
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	9a 83       	std	Y+2, r25	; 0x02
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	9a 81       	ldd	r25, Y+2	; 0x02
     520:	0a 97       	sbiw	r24, 0x0a	; 10
     522:	0c f4       	brge	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     524:	0c cf       	rjmp	.-488    	; 0x33e <ISSI31FL3728_ResetBus+0x68>
		SCL_set_level(false);
		_delay_ms(1);
	}
	
	// Reset portmux for I2C Clock control of the port
	PORTMUX.TWIROUTEA |= PORTMUX_TWI01_bm;
     526:	80 ee       	ldi	r24, 0xE0	; 224
     528:	95 e0       	ldi	r25, 0x05	; 5
     52a:	20 ee       	ldi	r18, 0xE0	; 224
     52c:	35 e0       	ldi	r19, 0x05	; 5
     52e:	f9 01       	movw	r30, r18
     530:	25 81       	ldd	r18, Z+5	; 0x05
     532:	22 60       	ori	r18, 0x02	; 2
     534:	fc 01       	movw	r30, r24
     536:	25 83       	std	Z+5, r18	; 0x05
	
	TWI0.MCTRLA = 1 << TWI_ENABLE_bp        /* Enable TWI Master: enabled */
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	99 e0       	ldi	r25, 0x09	; 9
     53c:	21 ec       	ldi	r18, 0xC1	; 193
     53e:	fc 01       	movw	r30, r24
     540:	23 83       	std	Z+3, r18	; 0x03
	| 1 << TWI_RIEN_bp        /* Read Interrupt Enable: enabled */
	| 0 << TWI_SMEN_bp        /* Smart Mode Enable: disabled */
	| TWI_TIMEOUT_DISABLED_gc /* Bus Timeout Disabled */
	| 1 << TWI_WIEN_bp;       /* Write Interrupt Enable: enabled */
	
	TWI0.MCTRLB |= TWI_FLUSH_bm;
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	99 e0       	ldi	r25, 0x09	; 9
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	39 e0       	ldi	r19, 0x09	; 9
     54a:	f9 01       	movw	r30, r18
     54c:	24 81       	ldd	r18, Z+4	; 0x04
     54e:	28 60       	ori	r18, 0x08	; 8
     550:	fc 01       	movw	r30, r24
     552:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	99 e0       	ldi	r25, 0x09	; 9
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	39 e0       	ldi	r19, 0x09	; 9
     55c:	f9 01       	movw	r30, r18
     55e:	25 81       	ldd	r18, Z+5	; 0x05
     560:	21 60       	ori	r18, 0x01	; 1
     562:	fc 01       	movw	r30, r24
     564:	25 83       	std	Z+5, r18	; 0x05
	// Reset module
	TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	39 e0       	ldi	r19, 0x09	; 9
     56e:	f9 01       	movw	r30, r18
     570:	25 81       	ldd	r18, Z+5	; 0x05
     572:	20 6c       	ori	r18, 0xC0	; 192
     574:	fc 01       	movw	r30, r24
     576:	25 83       	std	Z+5, r18	; 0x05
			
	//I2C_0_status.busy  = false;
	//I2C_0_status.inUse = 0;
	I2C_0_force_close();
     578:	0e 94 9e 10 	call	0x213c	; 0x213c <I2C_0_force_close>
}
     57c:	00 00       	nop
     57e:	6e 96       	adiw	r28, 0x1e	; 30
     580:	cd bf       	out	0x3d, r28	; 61
     582:	de bf       	out	0x3e, r29	; 62
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <PORTD_set_pin_level>:
			break;
		}
	}
	ret = ISSI31FL3728_WriteRegister(REG_CUP, 0);
#endif
}
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	00 d0       	rcall	.+0      	; 0x590 <PORTD_set_pin_level+0x6>
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	89 83       	std	Y+1, r24	; 0x01
     596:	6a 83       	std	Y+2, r22	; 0x02
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	88 23       	and	r24, r24
     59c:	a9 f0       	breq	.+42     	; 0x5c8 <PORTD_set_pin_level+0x3e>
     59e:	8c e0       	ldi	r24, 0x0C	; 12
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	2c e0       	ldi	r18, 0x0C	; 12
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	f9 01       	movw	r30, r18
     5a8:	21 81       	ldd	r18, Z+1	; 0x01
     5aa:	62 2f       	mov	r22, r18
     5ac:	29 81       	ldd	r18, Y+1	; 0x01
     5ae:	42 2f       	mov	r20, r18
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	21 e0       	ldi	r18, 0x01	; 1
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <PORTD_set_pin_level+0x32>
     5b8:	22 0f       	add	r18, r18
     5ba:	33 1f       	adc	r19, r19
     5bc:	4a 95       	dec	r20
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <PORTD_set_pin_level+0x2e>
     5c0:	26 2b       	or	r18, r22
     5c2:	fc 01       	movw	r30, r24
     5c4:	21 83       	std	Z+1, r18	; 0x01
     5c6:	15 c0       	rjmp	.+42     	; 0x5f2 <PORTD_set_pin_level+0x68>
     5c8:	8c e0       	ldi	r24, 0x0C	; 12
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	2c e0       	ldi	r18, 0x0C	; 12
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	f9 01       	movw	r30, r18
     5d2:	21 81       	ldd	r18, Z+1	; 0x01
     5d4:	62 2f       	mov	r22, r18
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	42 2f       	mov	r20, r18
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <PORTD_set_pin_level+0x5c>
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	4a 95       	dec	r20
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <PORTD_set_pin_level+0x58>
     5ea:	20 95       	com	r18
     5ec:	26 23       	and	r18, r22
     5ee:	fc 01       	movw	r30, r24
     5f0:	21 83       	std	Z+1, r18	; 0x01
     5f2:	00 00       	nop
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <heaterTrigger_set_level>:
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	1f 92       	push	r1
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	69 81       	ldd	r22, Y+1	; 0x01
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 c5 02 	call	0x58a	; 0x58a <PORTD_set_pin_level>
     612:	00 00       	nop
     614:	0f 90       	pop	r0
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <main>:
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	64 97       	sbiw	r28, 0x14	; 20
     626:	cd bf       	out	0x3d, r28	; 61
     628:	de bf       	out	0x3e, r29	; 62
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	1b 82       	std	Y+3, r1	; 0x03
     634:	1c 82       	std	Y+4, r1	; 0x04
     636:	1d 82       	std	Y+5, r1	; 0x05
     638:	1e 82       	std	Y+6, r1	; 0x06
     63a:	0e 94 73 00 	call	0xe6	; 0xe6 <atmel_start_init>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 ff 02 	call	0x5fe	; 0x5fe <heaterTrigger_set_level>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	aa e7       	ldi	r26, 0x7A	; 122
     64a:	b4 e4       	ldi	r27, 0x44	; 68
     64c:	8f 83       	std	Y+7, r24	; 0x07
     64e:	98 87       	std	Y+8, r25	; 0x08
     650:	a9 87       	std	Y+9, r26	; 0x09
     652:	ba 87       	std	Y+10, r27	; 0x0a
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e8       	ldi	r19, 0x80	; 128
     658:	4b eb       	ldi	r20, 0xBB	; 187
     65a:	55 e4       	ldi	r21, 0x45	; 69
     65c:	6f 81       	ldd	r22, Y+7	; 0x07
     65e:	78 85       	ldd	r23, Y+8	; 0x08
     660:	89 85       	ldd	r24, Y+9	; 0x09
     662:	9a 85       	ldd	r25, Y+10	; 0x0a
     664:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__mulsf3>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	8b 87       	std	Y+11, r24	; 0x0b
     66e:	9c 87       	std	Y+12, r25	; 0x0c
     670:	ad 87       	std	Y+13, r26	; 0x0d
     672:	be 87       	std	Y+14, r27	; 0x0e
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e8       	ldi	r20, 0x80	; 128
     67a:	5f e3       	ldi	r21, 0x3F	; 63
     67c:	6b 85       	ldd	r22, Y+11	; 0x0b
     67e:	7c 85       	ldd	r23, Y+12	; 0x0c
     680:	8d 85       	ldd	r24, Y+13	; 0x0d
     682:	9e 85       	ldd	r25, Y+14	; 0x0e
     684:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__cmpsf2>
     688:	88 23       	and	r24, r24
     68a:	2c f4       	brge	.+10     	; 0x696 <main+0x7a>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	8f 87       	std	Y+15, r24	; 0x0f
     692:	98 8b       	std	Y+16, r25	; 0x10
     694:	3f c0       	rjmp	.+126    	; 0x714 <main+0xf8>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	3f ef       	ldi	r19, 0xFF	; 255
     69a:	4f e7       	ldi	r20, 0x7F	; 127
     69c:	57 e4       	ldi	r21, 0x47	; 71
     69e:	6b 85       	ldd	r22, Y+11	; 0x0b
     6a0:	7c 85       	ldd	r23, Y+12	; 0x0c
     6a2:	8d 85       	ldd	r24, Y+13	; 0x0d
     6a4:	9e 85       	ldd	r25, Y+14	; 0x0e
     6a6:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <__gesf2>
     6aa:	18 16       	cp	r1, r24
     6ac:	4c f5       	brge	.+82     	; 0x700 <main+0xe4>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e2       	ldi	r20, 0x20	; 32
     6b4:	51 e4       	ldi	r21, 0x41	; 65
     6b6:	6f 81       	ldd	r22, Y+7	; 0x07
     6b8:	78 85       	ldd	r23, Y+8	; 0x08
     6ba:	89 85       	ldd	r24, Y+9	; 0x09
     6bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6be:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <__mulsf3>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	bc 01       	movw	r22, r24
     6c8:	cd 01       	movw	r24, r26
     6ca:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__fixunssfsi>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	8f 87       	std	Y+15, r24	; 0x0f
     6d4:	98 8b       	std	Y+16, r25	; 0x10
     6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <main+0xda>
     6d8:	88 e5       	ldi	r24, 0x58	; 88
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	89 8b       	std	Y+17, r24	; 0x11
     6de:	9a 8b       	std	Y+18, r25	; 0x12
     6e0:	89 89       	ldd	r24, Y+17	; 0x11
     6e2:	9a 89       	ldd	r25, Y+18	; 0x12
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <main+0xc8>
     6e8:	89 8b       	std	Y+17, r24	; 0x11
     6ea:	9a 8b       	std	Y+18, r25	; 0x12
     6ec:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ee:	98 89       	ldd	r25, Y+16	; 0x10
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	8f 87       	std	Y+15, r24	; 0x0f
     6f4:	98 8b       	std	Y+16, r25	; 0x10
     6f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f8:	98 89       	ldd	r25, Y+16	; 0x10
     6fa:	89 2b       	or	r24, r25
     6fc:	69 f7       	brne	.-38     	; 0x6d8 <main+0xbc>
     6fe:	14 c0       	rjmp	.+40     	; 0x728 <main+0x10c>
     700:	6b 85       	ldd	r22, Y+11	; 0x0b
     702:	7c 85       	ldd	r23, Y+12	; 0x0c
     704:	8d 85       	ldd	r24, Y+13	; 0x0d
     706:	9e 85       	ldd	r25, Y+14	; 0x0e
     708:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__fixunssfsi>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	8f 87       	std	Y+15, r24	; 0x0f
     712:	98 8b       	std	Y+16, r25	; 0x10
     714:	8f 85       	ldd	r24, Y+15	; 0x0f
     716:	98 89       	ldd	r25, Y+16	; 0x10
     718:	8b 8b       	std	Y+19, r24	; 0x13
     71a:	9c 8b       	std	Y+20, r25	; 0x14
     71c:	8b 89       	ldd	r24, Y+19	; 0x13
     71e:	9c 89       	ldd	r25, Y+20	; 0x14
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <main+0x104>
     724:	8b 8b       	std	Y+19, r24	; 0x13
     726:	9c 8b       	std	Y+20, r25	; 0x14
     728:	0e 94 38 01 	call	0x270	; 0x270 <ISSI31FL3728_ConfigDevice>
     72c:	0e 94 00 01 	call	0x200	; 0x200 <ISSI31FL3728_ZeroColumns>
     730:	0e 94 24 01 	call	0x248	; 0x248 <ISSI31FL3728_InitDevice>
     734:	0e 94 35 07 	call	0xe6a	; 0xe6a <touch_process>
     738:	80 91 28 41 	lds	r24, 0x4128	; 0x804128 <measurement_done_touch>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	31 f4       	brne	.+12     	; 0x74c <main+0x130>
     740:	10 92 28 41 	sts	0x4128, r1	; 0x804128 <measurement_done_touch>
     744:	0e 94 54 04 	call	0x8a8	; 0x8a8 <touch_status_display_bar>
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	9a 83       	std	Y+2, r25	; 0x02
     74c:	28 e0       	ldi	r18, 0x08	; 8
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	9a 81       	ldd	r25, Y+2	; 0x02
     754:	a9 01       	movw	r20, r18
     756:	48 1b       	sub	r20, r24
     758:	59 0b       	sbc	r21, r25
     75a:	28 ee       	ldi	r18, 0xE8	; 232
     75c:	33 e0       	ldi	r19, 0x03	; 3
     75e:	42 9f       	mul	r20, r18
     760:	c0 01       	movw	r24, r0
     762:	43 9f       	mul	r20, r19
     764:	90 0d       	add	r25, r0
     766:	52 9f       	mul	r21, r18
     768:	90 0d       	add	r25, r0
     76a:	11 24       	eor	r1, r1
     76c:	8d 83       	std	Y+5, r24	; 0x05
     76e:	9e 83       	std	Y+6, r25	; 0x06
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	9e 81       	ldd	r25, Y+6	; 0x06
     774:	89 2b       	or	r24, r25
     776:	91 f0       	breq	.+36     	; 0x79c <main+0x180>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	9c 01       	movw	r18, r24
     77e:	20 53       	subi	r18, 0x30	; 48
     780:	38 4f       	sbci	r19, 0xF8	; 248
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	82 17       	cp	r24, r18
     788:	93 07       	cpc	r25, r19
     78a:	20 f4       	brcc	.+8      	; 0x794 <main+0x178>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <heaterTrigger_set_level>
     792:	07 c0       	rjmp	.+14     	; 0x7a2 <main+0x186>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 ff 02 	call	0x5fe	; 0x5fe <heaterTrigger_set_level>
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <main+0x186>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <heaterTrigger_set_level>
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	81 31       	cpi	r24, 0x11	; 17
     7a8:	97 42       	sbci	r25, 0x27	; 39
     7aa:	1c f0       	brlt	.+6      	; 0x7b2 <main+0x196>
     7ac:	1b 82       	std	Y+3, r1	; 0x03
     7ae:	1c 82       	std	Y+4, r1	; 0x04
     7b0:	c1 cf       	rjmp	.-126    	; 0x734 <main+0x118>
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	8b 83       	std	Y+3, r24	; 0x03
     7ba:	9c 83       	std	Y+4, r25	; 0x04
     7bc:	bb cf       	rjmp	.-138    	; 0x734 <main+0x118>

000007be <decode_slider_to_LED>:

uint8_t	decode_slider_to_LED(uint16_t pos)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <decode_slider_to_LED+0x6>
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	8a 83       	std	Y+2, r24	; 0x02
     7cc:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t LED = 0;
     7ce:	19 82       	std	Y+1, r1	; 0x01
	
	// decode into nine segments to align with LEDs
	if (pos < 28){
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	9b 81       	ldd	r25, Y+3	; 0x03
     7d4:	4c 97       	sbiw	r24, 0x1c	; 28
     7d6:	10 f4       	brcc	.+4      	; 0x7dc <decode_slider_to_LED+0x1e>
		LED = 0;
     7d8:	19 82       	std	Y+1, r1	; 0x01
     7da:	5f c0       	rjmp	.+190    	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 28 && pos < 56){
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
     7e0:	4c 97       	sbiw	r24, 0x1c	; 28
     7e2:	38 f0       	brcs	.+14     	; 0x7f2 <decode_slider_to_LED+0x34>
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	9b 81       	ldd	r25, Y+3	; 0x03
     7e8:	c8 97       	sbiw	r24, 0x38	; 56
     7ea:	18 f4       	brcc	.+6      	; 0x7f2 <decode_slider_to_LED+0x34>
		LED = 1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	54 c0       	rjmp	.+168    	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 56 && pos < 84){
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	9b 81       	ldd	r25, Y+3	; 0x03
     7f6:	c8 97       	sbiw	r24, 0x38	; 56
     7f8:	40 f0       	brcs	.+16     	; 0x80a <decode_slider_to_LED+0x4c>
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	9b 81       	ldd	r25, Y+3	; 0x03
     7fe:	84 35       	cpi	r24, 0x54	; 84
     800:	91 05       	cpc	r25, r1
     802:	18 f4       	brcc	.+6      	; 0x80a <decode_slider_to_LED+0x4c>
		LED = 2;
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	48 c0       	rjmp	.+144    	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 84 && pos < 112){
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	9b 81       	ldd	r25, Y+3	; 0x03
     80e:	84 35       	cpi	r24, 0x54	; 84
     810:	91 05       	cpc	r25, r1
     812:	40 f0       	brcs	.+16     	; 0x824 <decode_slider_to_LED+0x66>
     814:	8a 81       	ldd	r24, Y+2	; 0x02
     816:	9b 81       	ldd	r25, Y+3	; 0x03
     818:	80 37       	cpi	r24, 0x70	; 112
     81a:	91 05       	cpc	r25, r1
     81c:	18 f4       	brcc	.+6      	; 0x824 <decode_slider_to_LED+0x66>
		LED = 3;
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	3b c0       	rjmp	.+118    	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 112 && pos < 140){
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	9b 81       	ldd	r25, Y+3	; 0x03
     828:	80 37       	cpi	r24, 0x70	; 112
     82a:	91 05       	cpc	r25, r1
     82c:	40 f0       	brcs	.+16     	; 0x83e <decode_slider_to_LED+0x80>
     82e:	8a 81       	ldd	r24, Y+2	; 0x02
     830:	9b 81       	ldd	r25, Y+3	; 0x03
     832:	8c 38       	cpi	r24, 0x8C	; 140
     834:	91 05       	cpc	r25, r1
     836:	18 f4       	brcc	.+6      	; 0x83e <decode_slider_to_LED+0x80>
		LED = 4;
     838:	84 e0       	ldi	r24, 0x04	; 4
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	2e c0       	rjmp	.+92     	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 140 && pos < 168){
     83e:	8a 81       	ldd	r24, Y+2	; 0x02
     840:	9b 81       	ldd	r25, Y+3	; 0x03
     842:	8c 38       	cpi	r24, 0x8C	; 140
     844:	91 05       	cpc	r25, r1
     846:	40 f0       	brcs	.+16     	; 0x858 <decode_slider_to_LED+0x9a>
     848:	8a 81       	ldd	r24, Y+2	; 0x02
     84a:	9b 81       	ldd	r25, Y+3	; 0x03
     84c:	88 3a       	cpi	r24, 0xA8	; 168
     84e:	91 05       	cpc	r25, r1
     850:	18 f4       	brcc	.+6      	; 0x858 <decode_slider_to_LED+0x9a>
		LED = 5;
     852:	85 e0       	ldi	r24, 0x05	; 5
     854:	89 83       	std	Y+1, r24	; 0x01
     856:	21 c0       	rjmp	.+66     	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 168 && pos < 196){
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	9b 81       	ldd	r25, Y+3	; 0x03
     85c:	88 3a       	cpi	r24, 0xA8	; 168
     85e:	91 05       	cpc	r25, r1
     860:	40 f0       	brcs	.+16     	; 0x872 <decode_slider_to_LED+0xb4>
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	9b 81       	ldd	r25, Y+3	; 0x03
     866:	84 3c       	cpi	r24, 0xC4	; 196
     868:	91 05       	cpc	r25, r1
     86a:	18 f4       	brcc	.+6      	; 0x872 <decode_slider_to_LED+0xb4>
		LED = 6;
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	14 c0       	rjmp	.+40     	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 196 && pos < 224){
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	9b 81       	ldd	r25, Y+3	; 0x03
     876:	84 3c       	cpi	r24, 0xC4	; 196
     878:	91 05       	cpc	r25, r1
     87a:	40 f0       	brcs	.+16     	; 0x88c <decode_slider_to_LED+0xce>
     87c:	8a 81       	ldd	r24, Y+2	; 0x02
     87e:	9b 81       	ldd	r25, Y+3	; 0x03
     880:	80 3e       	cpi	r24, 0xE0	; 224
     882:	91 05       	cpc	r25, r1
     884:	18 f4       	brcc	.+6      	; 0x88c <decode_slider_to_LED+0xce>
		LED = 7;
     886:	87 e0       	ldi	r24, 0x07	; 7
     888:	89 83       	std	Y+1, r24	; 0x01
     88a:	07 c0       	rjmp	.+14     	; 0x89a <decode_slider_to_LED+0xdc>
		} else if (pos >= 224){
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	9b 81       	ldd	r25, Y+3	; 0x03
     890:	80 3e       	cpi	r24, 0xE0	; 224
     892:	91 05       	cpc	r25, r1
     894:	10 f0       	brcs	.+4      	; 0x89a <decode_slider_to_LED+0xdc>
		LED = 8;
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	89 83       	std	Y+1, r24	; 0x01
	}
	return(LED);
     89a:	89 81       	ldd	r24, Y+1	; 0x01
}
     89c:	23 96       	adiw	r28, 0x03	; 3
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <touch_status_display_bar>:
Input  : none
Output : touch position, rounded to each LED position
Notes  : none
============================================================================*/
int touch_status_display_bar(void)
{
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <touch_status_display_bar+0x6>
     8ae:	1f 92       	push	r1
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
	int i;
	i2c_error_t ret;

	scroller_status   = get_scroller_state(0);
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 0b 08 	call	0x1016	; 0x1016 <get_scroller_state>
     8bc:	80 93 22 41 	sts	0x4122, r24	; 0x804122 <__data_end>
	
	if (scroller_status != 0){
     8c0:	80 91 22 41 	lds	r24, 0x4122	; 0x804122 <__data_end>
     8c4:	88 23       	and	r24, r24
     8c6:	d1 f1       	breq	.+116    	; 0x93c <touch_status_display_bar+0x94>
		scroller_position = get_scroller_position(0);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 2a 08 	call	0x1054	; 0x1054 <get_scroller_position>
     8d0:	80 93 23 41 	sts	0x4123, r24	; 0x804123 <scroller_position>
     8d4:	90 93 24 41 	sts	0x4124, r25	; 0x804124 <scroller_position+0x1>
		// Example: 8 bit scroller resolution. Modify as per requirement.
		//scroller_position = scroller_position >> 5;
		// LED_OFF
	
		//scroller_position = 7 - scroller_position;
		scroller_LED = 8 - decode_slider_to_LED(scroller_position);
     8d8:	80 91 23 41 	lds	r24, 0x4123	; 0x804123 <scroller_position>
     8dc:	90 91 24 41 	lds	r25, 0x4124	; 0x804124 <scroller_position+0x1>
     8e0:	0e 94 df 03 	call	0x7be	; 0x7be <decode_slider_to_LED>
     8e4:	98 2f       	mov	r25, r24
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	89 1b       	sub	r24, r25
     8ea:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
	
		for (i=0;i<9;i++){
     8ee:	19 82       	std	Y+1, r1	; 0x01
     8f0:	1a 82       	std	Y+2, r1	; 0x02
     8f2:	1b c0       	rjmp	.+54     	; 0x92a <touch_status_display_bar+0x82>
			if (i >= scroller_LED){
     8f4:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     8f8:	28 2f       	mov	r18, r24
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	82 17       	cp	r24, r18
     902:	93 07       	cpc	r25, r19
     904:	3c f0       	brlt	.+14     	; 0x914 <touch_status_display_bar+0x6c>
				ret = ISSI31FL3728_WriteRegister(REG_CD1+i,3);
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	63 e0       	ldi	r22, 0x03	; 3
     90c:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     910:	8b 83       	std	Y+3, r24	; 0x03
     912:	06 c0       	rjmp	.+12     	; 0x920 <touch_status_display_bar+0x78>
			} else {
				ret = ISSI31FL3728_WriteRegister(REG_CD1+i,0);
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     91e:	8b 83       	std	Y+3, r24	; 0x03
		// LED_OFF
	
		//scroller_position = 7 - scroller_position;
		scroller_LED = 8 - decode_slider_to_LED(scroller_position);
	
		for (i=0;i<9;i++){
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	9a 81       	ldd	r25, Y+2	; 0x02
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	9a 83       	std	Y+2, r25	; 0x02
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	09 97       	sbiw	r24, 0x09	; 9
     930:	0c f3       	brlt	.-62     	; 0x8f4 <touch_status_display_bar+0x4c>
			} else {
				ret = ISSI31FL3728_WriteRegister(REG_CD1+i,0);
			}
		}

		ret = ISSI31FL3728_WriteRegister(REG_CUP, 0);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	8c e0       	ldi	r24, 0x0C	; 12
     936:	0e 94 4c 01 	call	0x298	; 0x298 <ISSI31FL3728_WriteRegister>
     93a:	8b 83       	std	Y+3, r24	; 0x03
		
	} 
	return(scroller_LED);
     93c:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
}
     944:	23 96       	adiw	r28, 0x03	; 3
     946:	cd bf       	out	0x3d, r28	; 61
     948:	de bf       	out	0x3e, r29	; 62
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
}
     958:	00 00       	nop
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	1f 92       	push	r1
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	89 83       	std	Y+1, r24	; 0x01
	while (!USART_is_tx_ready())
     96c:	00 00       	nop
     96e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <USART_is_tx_ready>
     972:	98 2f       	mov	r25, r24
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	89 27       	eor	r24, r25
     978:	88 23       	and	r24, r24
     97a:	c9 f7       	brne	.-14     	; 0x96e <datastreamer_transmit+0xe>
		;

	USART_write(data_byte);
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <USART_write>

	while (USART_is_tx_busy())
     982:	00 00       	nop
     984:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <USART_is_tx_busy>
     988:	88 23       	and	r24, r24
     98a:	e1 f7       	brne	.-8      	; 0x984 <datastreamer_transmit+0x24>
		;
}
     98c:	00 00       	nop
     98e:	0f 90       	pop	r0
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	2a 97       	sbiw	r28, 0x0a	; 10
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	de bf       	out	0x3e, r29	; 62
	static uint8_t    sequence = 0u;
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
     9a4:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <sequence.5149>
     9a8:	8f 70       	andi	r24, 0x0F	; 15
     9aa:	8b 83       	std	Y+3, r24	; 0x03
	if (send_header == 0) {
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	88 23       	and	r24, r24
     9b0:	a1 f4       	brne	.+40     	; 0x9da <datastreamer_output+0x44>
		for (i = 0; i < sizeof(data); i++) {
     9b2:	19 82       	std	Y+1, r1	; 0x01
     9b4:	1a 82       	std	Y+2, r1	; 0x02
     9b6:	0d c0       	rjmp	.+26     	; 0x9d2 <datastreamer_output+0x3c>
			datastreamer_transmit(data[i]);
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	9a 81       	ldd	r25, Y+2	; 0x02
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	9f 4b       	sbci	r25, 0xBF	; 191
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	43 97       	sbiw	r24, 0x13	; 19
     9d8:	78 f3       	brcs	.-34     	; 0x9b8 <datastreamer_output+0x22>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     9da:	85 e5       	ldi	r24, 0x55	; 85
     9dc:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     9e0:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <sequence.5149>
     9e4:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     9e8:	19 86       	std	Y+9, r1	; 0x09
     9ea:	1a 86       	std	Y+10, r1	; 0x0a
     9ec:	6c c0       	rjmp	.+216    	; 0xac6 <datastreamer_output+0x130>

		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     9ee:	89 85       	ldd	r24, Y+9	; 0x09
     9f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f2:	0e 94 a0 07 	call	0xf40	; 0xf40 <get_sensor_node_signal>
     9f6:	8c 83       	std	Y+4, r24	; 0x04
     9f8:	9d 83       	std	Y+5, r25	; 0x05
		datastreamer_transmit((uint8_t)u16temp_output);
     9fa:	8c 81       	ldd	r24, Y+4	; 0x04
     9fc:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     a00:	8c 81       	ldd	r24, Y+4	; 0x04
     a02:	9d 81       	ldd	r25, Y+5	; 0x05
     a04:	89 2f       	mov	r24, r25
     a06:	99 27       	eor	r25, r25
     a08:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     a0c:	89 85       	ldd	r24, Y+9	; 0x09
     a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a10:	0e 94 ba 07 	call	0xf74	; 0xf74 <get_sensor_node_reference>
     a14:	8c 83       	std	Y+4, r24	; 0x04
     a16:	9d 83       	std	Y+5, r25	; 0x05
		datastreamer_transmit((uint8_t)u16temp_output);
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     a1e:	8c 81       	ldd	r24, Y+4	; 0x04
     a20:	9d 81       	ldd	r25, Y+5	; 0x05
     a22:	89 2f       	mov	r24, r25
     a24:	99 27       	eor	r25, r25
     a26:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     a2a:	89 85       	ldd	r24, Y+9	; 0x09
     a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2e:	0e 94 a0 07 	call	0xf40	; 0xf40 <get_sensor_node_signal>
     a32:	8e 83       	std	Y+6, r24	; 0x06
     a34:	9f 83       	std	Y+7, r25	; 0x07
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     a36:	89 85       	ldd	r24, Y+9	; 0x09
     a38:	9a 85       	ldd	r25, Y+10	; 0x0a
     a3a:	0e 94 ba 07 	call	0xf74	; 0xf74 <get_sensor_node_reference>
     a3e:	9c 01       	movw	r18, r24
     a40:	8e 81       	ldd	r24, Y+6	; 0x06
     a42:	9f 81       	ldd	r25, Y+7	; 0x07
     a44:	82 1b       	sub	r24, r18
     a46:	93 0b       	sbc	r25, r19
     a48:	8e 83       	std	Y+6, r24	; 0x06
     a4a:	9f 83       	std	Y+7, r25	; 0x07
		u16temp_output = (uint16_t)(temp_int_calc);
     a4c:	8e 81       	ldd	r24, Y+6	; 0x06
     a4e:	9f 81       	ldd	r25, Y+7	; 0x07
     a50:	8c 83       	std	Y+4, r24	; 0x04
     a52:	9d 83       	std	Y+5, r25	; 0x05
		datastreamer_transmit((uint8_t)u16temp_output);
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     a5a:	8c 81       	ldd	r24, Y+4	; 0x04
     a5c:	9d 81       	ldd	r25, Y+5	; 0x05
     a5e:	89 2f       	mov	r24, r25
     a60:	99 27       	eor	r25, r25
     a62:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     a66:	89 85       	ldd	r24, Y+9	; 0x09
     a68:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <get_sensor_cc_val>
     a6e:	8c 83       	std	Y+4, r24	; 0x04
     a70:	9d 83       	std	Y+5, r25	; 0x05
		datastreamer_transmit((uint8_t)u16temp_output);
     a72:	8c 81       	ldd	r24, Y+4	; 0x04
     a74:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     a78:	8c 81       	ldd	r24, Y+4	; 0x04
     a7a:	9d 81       	ldd	r25, Y+5	; 0x05
     a7c:	89 2f       	mov	r24, r25
     a7e:	99 27       	eor	r25, r25
     a80:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit(u8temp_output);
#endif
#endif

		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     a84:	89 85       	ldd	r24, Y+9	; 0x09
     a86:	9a 85       	ldd	r25, Y+10	; 0x0a
     a88:	0e 94 ee 07 	call	0xfdc	; 0xfdc <get_sensor_state>
     a8c:	88 87       	std	Y+8, r24	; 0x08
		if (0u != (u8temp_output & 0x80)) {
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	88 23       	and	r24, r24
     a92:	24 f4       	brge	.+8      	; 0xa9c <datastreamer_output+0x106>
			datastreamer_transmit(0x01);
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <datastreamer_output+0x10c>
		} else {
			datastreamer_transmit(0x00);
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     aa2:	29 85       	ldd	r18, Y+9	; 0x09
     aa4:	3a 85       	ldd	r19, Y+10	; 0x0a
     aa6:	c9 01       	movw	r24, r18
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	82 0f       	add	r24, r18
     aae:	93 1f       	adc	r25, r19
     ab0:	87 58       	subi	r24, 0x87	; 135
     ab2:	9f 4b       	sbci	r25, 0xBF	; 191
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
	// Start token
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     abc:	89 85       	ldd	r24, Y+9	; 0x09
     abe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	89 87       	std	Y+9, r24	; 0x09
     ac4:	9a 87       	std	Y+10, r25	; 0x0a
     ac6:	89 85       	ldd	r24, Y+9	; 0x09
     ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aca:	04 97       	sbiw	r24, 0x04	; 4
     acc:	08 f4       	brcc	.+2      	; 0xad0 <datastreamer_output+0x13a>
     ace:	8f cf       	rjmp	.-226    	; 0x9ee <datastreamer_output+0x58>
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
	}

#if (SCROLLER_MODULE_OUTPUT == 1)

	for (count_bytes_out = 0u; count_bytes_out < qtm_scroller_control1.qtm_scroller_group_config->num_scrollers;
     ad0:	19 86       	std	Y+9, r1	; 0x09
     ad2:	1a 86       	std	Y+10, r1	; 0x0a
     ad4:	81 c0       	rjmp	.+258    	; 0xbd8 <datastreamer_output+0x242>
	     count_bytes_out++) {

		/* Slider State */
		u8temp_output = qtm_scroller_control1.qtm_scroller_data[count_bytes_out].scroller_status;
     ad6:	40 91 9c 40 	lds	r20, 0x409C	; 0x80409c <qtm_scroller_control1+0x4>
     ada:	50 91 9d 40 	lds	r21, 0x409D	; 0x80409d <qtm_scroller_control1+0x5>
     ade:	29 85       	ldd	r18, Y+9	; 0x09
     ae0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae2:	c9 01       	movw	r24, r18
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	84 0f       	add	r24, r20
     af6:	95 1f       	adc	r25, r21
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	88 87       	std	Y+8, r24	; 0x08
		if (0u != (u8temp_output & 0x01)) {
     afe:	88 85       	ldd	r24, Y+8	; 0x08
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	81 70       	andi	r24, 0x01	; 1
     b06:	99 27       	eor	r25, r25
     b08:	89 2b       	or	r24, r25
     b0a:	21 f0       	breq	.+8      	; 0xb14 <datastreamer_output+0x17e>
			datastreamer_transmit(0x01);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <datastreamer_output+0x184>
		} else {
			datastreamer_transmit(0x00);
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		}

		/* Slider Delta */
		u16temp_output = qtm_scroller_control1.qtm_scroller_data[count_bytes_out].contact_size;
     b1a:	40 91 9c 40 	lds	r20, 0x409C	; 0x80409c <qtm_scroller_control1+0x4>
     b1e:	50 91 9d 40 	lds	r21, 0x409D	; 0x80409d <qtm_scroller_control1+0x5>
     b22:	29 85       	ldd	r18, Y+9	; 0x09
     b24:	3a 85       	ldd	r19, Y+10	; 0x0a
     b26:	c9 01       	movw	r24, r18
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	82 0f       	add	r24, r18
     b36:	93 1f       	adc	r25, r19
     b38:	84 0f       	add	r24, r20
     b3a:	95 1f       	adc	r25, r21
     b3c:	fc 01       	movw	r30, r24
     b3e:	87 81       	ldd	r24, Z+7	; 0x07
     b40:	90 85       	ldd	r25, Z+8	; 0x08
     b42:	8c 83       	std	Y+4, r24	; 0x04
     b44:	9d 83       	std	Y+5, r25	; 0x05
		datastreamer_transmit((uint8_t)u16temp_output);
     b46:	8c 81       	ldd	r24, Y+4	; 0x04
     b48:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     b4c:	8c 81       	ldd	r24, Y+4	; 0x04
     b4e:	9d 81       	ldd	r25, Y+5	; 0x05
     b50:	89 2f       	mov	r24, r25
     b52:	99 27       	eor	r25, r25
     b54:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

		/* Slider Threshold */
		u16temp_output = qtm_scroller_control1.qtm_scroller_config[count_bytes_out].contact_min_threshold;
     b58:	20 91 9e 40 	lds	r18, 0x409E	; 0x80409e <qtm_scroller_control1+0x6>
     b5c:	30 91 9f 40 	lds	r19, 0x409F	; 0x80409f <qtm_scroller_control1+0x7>
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	82 0f       	add	r24, r18
     b72:	93 1f       	adc	r25, r19
     b74:	fc 01       	movw	r30, r24
     b76:	86 81       	ldd	r24, Z+6	; 0x06
     b78:	97 81       	ldd	r25, Z+7	; 0x07
     b7a:	8c 83       	std	Y+4, r24	; 0x04
     b7c:	9d 83       	std	Y+5, r25	; 0x05
		datastreamer_transmit((uint8_t)u16temp_output);
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     b84:	8c 81       	ldd	r24, Y+4	; 0x04
     b86:	9d 81       	ldd	r25, Y+5	; 0x05
     b88:	89 2f       	mov	r24, r25
     b8a:	99 27       	eor	r25, r25
     b8c:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

		/* filtered position */
		u16temp_output = qtm_scroller_control1.qtm_scroller_data[count_bytes_out].position;
     b90:	40 91 9c 40 	lds	r20, 0x409C	; 0x80409c <qtm_scroller_control1+0x4>
     b94:	50 91 9d 40 	lds	r21, 0x409D	; 0x80409d <qtm_scroller_control1+0x5>
     b98:	29 85       	ldd	r18, Y+9	; 0x09
     b9a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b9c:	c9 01       	movw	r24, r18
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	84 0f       	add	r24, r20
     bb0:	95 1f       	adc	r25, r21
     bb2:	fc 01       	movw	r30, r24
     bb4:	85 81       	ldd	r24, Z+5	; 0x05
     bb6:	96 81       	ldd	r25, Z+6	; 0x06
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	9d 83       	std	Y+5, r25	; 0x05
		datastreamer_transmit((uint8_t)(u16temp_output & 0x00FFu));
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)((u16temp_output & 0xFF00u) >> 8u));
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	89 2f       	mov	r24, r25
     bc8:	99 27       	eor	r25, r25
     bca:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
	}

#if (SCROLLER_MODULE_OUTPUT == 1)

	for (count_bytes_out = 0u; count_bytes_out < qtm_scroller_control1.qtm_scroller_group_config->num_scrollers;
	     count_bytes_out++) {
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	89 87       	std	Y+9, r24	; 0x09
     bd6:	9a 87       	std	Y+10, r25	; 0x0a
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
	}

#if (SCROLLER_MODULE_OUTPUT == 1)

	for (count_bytes_out = 0u; count_bytes_out < qtm_scroller_control1.qtm_scroller_group_config->num_scrollers;
     bd8:	80 91 9a 40 	lds	r24, 0x409A	; 0x80409a <qtm_scroller_control1+0x2>
     bdc:	90 91 9b 40 	lds	r25, 0x409B	; 0x80409b <qtm_scroller_control1+0x3>
     be0:	fc 01       	movw	r30, r24
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <datastreamer_output+0x25e>
     bf2:	71 cf       	rjmp	.-286    	; 0xad6 <datastreamer_output+0x140>
		datastreamer_transmit(qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->median_filter_freq[count]);
	}
#endif

	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     bf4:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <module_error_code>
     bf8:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

	/* Frame End */
	datastreamer_transmit(sequence++);
     bfc:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <sequence.5149>
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	98 0f       	add	r25, r24
     c04:	90 93 25 41 	sts	0x4125, r25	; 0x804125 <sequence.5149>
     c08:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     c0c:	8a ea       	ldi	r24, 0xAA	; 170
     c0e:	0e 94 b0 04 	call	0x960	; 0x960 <datastreamer_transmit>
}
     c12:	00 00       	nop
     c14:	2a 96       	adiw	r28, 0x0a	; 10
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <PORTA_set_pin_pull_mode>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <PORTA_set_pin_pull_mode+0x6>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <PORTA_set_pin_pull_mode+0x8>
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	8b 83       	std	Y+3, r24	; 0x03
     c2e:	6c 83       	std	Y+4, r22	; 0x04
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	80 5f       	subi	r24, 0xF0	; 240
     c38:	9b 4f       	sbci	r25, 0xFB	; 251
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	8c 81       	ldd	r24, Y+4	; 0x04
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	59 f4       	brne	.+22     	; 0xc5a <PORTA_set_pin_pull_mode+0x3a>
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	fc 01       	movw	r30, r24
     c4a:	80 81       	ld	r24, Z
     c4c:	28 2f       	mov	r18, r24
     c4e:	28 60       	ori	r18, 0x08	; 8
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <PORTA_set_pin_pull_mode+0x54>
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	88 23       	and	r24, r24
     c5e:	51 f4       	brne	.+20     	; 0xc74 <PORTA_set_pin_pull_mode+0x54>
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	28 2f       	mov	r18, r24
     c6a:	27 7f       	andi	r18, 0xF7	; 247
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
     c74:	00 00       	nop
     c76:	24 96       	adiw	r28, 0x04	; 4
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <PORTA_pin_set_isc>:
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <PORTA_pin_set_isc+0x6>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <PORTA_pin_set_isc+0x8>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	8b 83       	std	Y+3, r24	; 0x03
     c90:	6c 83       	std	Y+4, r22	; 0x04
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	88 2f       	mov	r24, r24
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	80 5f       	subi	r24, 0xF0	; 240
     c9a:	9b 4f       	sbci	r25, 0xFB	; 251
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	fc 01       	movw	r30, r24
     ca6:	80 81       	ld	r24, Z
     ca8:	98 2f       	mov	r25, r24
     caa:	98 7f       	andi	r25, 0xF8	; 248
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	89 2b       	or	r24, r25
     cb0:	28 2f       	mov	r18, r24
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
     cba:	00 00       	nop
     cbc:	24 96       	adiw	r28, 0x04	; 4
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <touch_ptc_pin_config>:
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 10 06 	call	0xc20	; 0xc20 <PORTA_set_pin_pull_mode>
     cd8:	64 e0       	ldi	r22, 0x04	; 4
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0e 94 41 06 	call	0xc82	; 0xc82 <PORTA_pin_set_isc>
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 10 06 	call	0xc20	; 0xc20 <PORTA_set_pin_pull_mode>
     ce8:	64 e0       	ldi	r22, 0x04	; 4
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	0e 94 41 06 	call	0xc82	; 0xc82 <PORTA_pin_set_isc>
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	85 e0       	ldi	r24, 0x05	; 5
     cf4:	0e 94 10 06 	call	0xc20	; 0xc20 <PORTA_set_pin_pull_mode>
     cf8:	64 e0       	ldi	r22, 0x04	; 4
     cfa:	85 e0       	ldi	r24, 0x05	; 5
     cfc:	0e 94 41 06 	call	0xc82	; 0xc82 <PORTA_pin_set_isc>
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	87 e0       	ldi	r24, 0x07	; 7
     d04:	0e 94 10 06 	call	0xc20	; 0xc20 <PORTA_set_pin_pull_mode>
     d08:	64 e0       	ldi	r22, 0x04	; 4
     d0a:	87 e0       	ldi	r24, 0x07	; 7
     d0c:	0e 94 41 06 	call	0xc82	; 0xc82 <PORTA_pin_set_isc>
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	0e 94 10 06 	call	0xc20	; 0xc20 <PORTA_set_pin_pull_mode>
     d18:	64 e0       	ldi	r22, 0x04	; 4
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	0e 94 41 06 	call	0xc82	; 0xc82 <PORTA_pin_set_isc>
     d20:	00 00       	nop
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <touch_sensors_config>:
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <touch_sensors_config+0x6>
     d2e:	1f 92       	push	r1
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	1b 82       	std	Y+3, r1	; 0x03
     d36:	89 e6       	ldi	r24, 0x69	; 105
     d38:	90 e4       	ldi	r25, 0x40	; 64
     d3a:	0e 94 da 22 	call	0x45b4	; 0x45b4 <qtm_ptc_init_acquisition_module>
     d3e:	82 e9       	ldi	r24, 0x92	; 146
     d40:	91 e4       	ldi	r25, 0x41	; 65
     d42:	0e 94 91 23 	call	0x4722	; 0x4722 <qtm_ptc_qtlib_assign_signal_memory>
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	1a 82       	std	Y+2, r1	; 0x02
     d4a:	13 c0       	rjmp	.+38     	; 0xd72 <touch_sensors_config+0x4a>
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	bc 01       	movw	r22, r24
     d52:	89 e6       	ldi	r24, 0x69	; 105
     d54:	90 e4       	ldi	r25, 0x40	; 64
     d56:	0e 94 0b 24 	call	0x4816	; 0x4816 <qtm_enable_sensor_node>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	bc 01       	movw	r22, r24
     d60:	89 e6       	ldi	r24, 0x69	; 105
     d62:	90 e4       	ldi	r25, 0x40	; 64
     d64:	0e 94 2a 24 	call	0x4854	; 0x4854 <qtm_calibrate_sensor_node>
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	04 97       	sbiw	r24, 0x04	; 4
     d78:	48 f3       	brcs	.-46     	; 0xd4c <touch_sensors_config+0x24>
     d7a:	19 82       	std	Y+1, r1	; 0x01
     d7c:	1a 82       	std	Y+2, r1	; 0x02
     d7e:	17 c0       	rjmp	.+46     	; 0xdae <touch_sensors_config+0x86>
     d80:	29 81       	ldd	r18, Y+1	; 0x01
     d82:	3a 81       	ldd	r19, Y+2	; 0x02
     d84:	c9 01       	movw	r24, r18
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	8b 58       	subi	r24, 0x8B	; 139
     d94:	9e 4b       	sbci	r25, 0xBE	; 190
     d96:	29 81       	ldd	r18, Y+1	; 0x01
     d98:	ac 01       	movw	r20, r24
     d9a:	62 2f       	mov	r22, r18
     d9c:	85 e8       	ldi	r24, 0x85	; 133
     d9e:	90 e4       	ldi	r25, 0x40	; 64
     da0:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <qtm_init_sensor_key>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	04 97       	sbiw	r24, 0x04	; 4
     db4:	28 f3       	brcs	.-54     	; 0xd80 <touch_sensors_config+0x58>
     db6:	88 e9       	ldi	r24, 0x98	; 152
     db8:	90 e4       	ldi	r25, 0x40	; 64
     dba:	0e 94 67 1b 	call	0x36ce	; 0x36ce <qtm_init_scroller_module>
     dbe:	98 2f       	mov	r25, r24
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	89 2b       	or	r24, r25
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	23 96       	adiw	r28, 0x03	; 3
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <qtm_measure_complete_callback>:
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <touch_postprocess_request>
     de2:	00 00       	nop
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <qtm_error_callback>:
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	1f 92       	push	r1
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	80 93 29 41 	sts	0x4129, r24	; 0x804129 <module_error_code>
     dfe:	0e 94 cb 04 	call	0x996	; 0x996 <datastreamer_output>
     e02:	00 00       	nop
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <Timer_set_period>:
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	1f 92       	push	r1
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	00 00       	nop
     e1a:	80 e4       	ldi	r24, 0x40	; 64
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	fc 01       	movw	r30, r24
     e20:	81 81       	ldd	r24, Z+1	; 0x01
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	84 70       	andi	r24, 0x04	; 4
     e28:	99 27       	eor	r25, r25
     e2a:	89 2b       	or	r24, r25
     e2c:	b1 f7       	brne	.-20     	; 0xe1a <Timer_set_period+0xe>
     e2e:	80 e4       	ldi	r24, 0x40	; 64
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	29 81       	ldd	r18, Y+1	; 0x01
     e34:	22 2f       	mov	r18, r18
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	22 87       	std	Z+10, r18	; 0x0a
     e3c:	33 87       	std	Z+11, r19	; 0x0b
     e3e:	00 00       	nop
     e40:	0f 90       	pop	r0
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <touch_init>:
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	0e 94 06 07 	call	0xe0c	; 0xe0c <Timer_set_period>
     e56:	0e 94 64 06 	call	0xcc8	; 0xcc8 <touch_ptc_pin_config>
     e5a:	0e 94 94 06 	call	0xd28	; 0xd28 <touch_sensors_config>
     e5e:	0e 94 a8 04 	call	0x950	; 0x950 <datastreamer_init>
     e62:	00 00       	nop
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <touch_process>:
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	1f 92       	push	r1
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	80 91 26 41 	lds	r24, 0x4126	; 0x804126 <time_to_measure_touch_flag>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	61 f4       	brne	.+24     	; 0xe94 <touch_process+0x2a>
     e7c:	6a ee       	ldi	r22, 0xEA	; 234
     e7e:	76 e0       	ldi	r23, 0x06	; 6
     e80:	89 e6       	ldi	r24, 0x69	; 105
     e82:	90 e4       	ldi	r25, 0x40	; 64
     e84:	0e 94 9b 23 	call	0x4736	; 0x4736 <qtm_ptc_start_measurement_seq>
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	88 23       	and	r24, r24
     e8e:	11 f4       	brne	.+4      	; 0xe94 <touch_process+0x2a>
     e90:	10 92 26 41 	sts	0x4126, r1	; 0x804126 <time_to_measure_touch_flag>
     e94:	80 91 27 41 	lds	r24, 0x4127	; 0x804127 <touch_postprocess_request>
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	99 f5       	brne	.+102    	; 0xf02 <touch_process+0x98>
     e9c:	10 92 27 41 	sts	0x4127, r1	; 0x804127 <touch_postprocess_request>
     ea0:	0e 94 58 20 	call	0x40b0	; 0x40b0 <qtm_acquisition_process>
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	88 23       	and	r24, r24
     eaa:	b9 f4       	brne	.+46     	; 0xeda <touch_process+0x70>
     eac:	85 e8       	ldi	r24, 0x85	; 133
     eae:	90 e4       	ldi	r25, 0x40	; 64
     eb0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <qtm_key_sensors_process>
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	88 23       	and	r24, r24
     eba:	19 f0       	breq	.+6      	; 0xec2 <touch_process+0x58>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0e 94 f5 06 	call	0xdea	; 0xdea <qtm_error_callback>
     ec2:	88 e9       	ldi	r24, 0x98	; 152
     ec4:	90 e4       	ldi	r25, 0x40	; 64
     ec6:	0e 94 a7 1b 	call	0x374e	; 0x374e <qtm_scroller_process>
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	88 23       	and	r24, r24
     ed0:	39 f0       	breq	.+14     	; 0xee0 <touch_process+0x76>
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 f5 06 	call	0xdea	; 0xdea <qtm_error_callback>
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <touch_process+0x76>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 f5 06 	call	0xdea	; 0xdea <qtm_error_callback>
     ee0:	80 91 85 40 	lds	r24, 0x4085	; 0x804085 <qtlib_key_set1>
     ee4:	90 91 86 40 	lds	r25, 0x4086	; 0x804086 <qtlib_key_set1+0x1>
     ee8:	fc 01       	movw	r30, r24
     eea:	80 81       	ld	r24, Z
     eec:	88 23       	and	r24, r24
     eee:	24 f4       	brge	.+8      	; 0xef8 <touch_process+0x8e>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 26 41 	sts	0x4126, r24	; 0x804126 <time_to_measure_touch_flag>
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <touch_process+0x94>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 28 41 	sts	0x4128, r24	; 0x804128 <measurement_done_touch>
     efe:	0e 94 cb 04 	call	0x996	; 0x996 <datastreamer_output>
     f02:	00 00       	nop
     f04:	0f 90       	pop	r0
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <touch_timer_handler>:
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	80 91 74 41 	lds	r24, 0x4174	; 0x804174 <interrupt_cnt>
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 74 41 	sts	0x4174, r24	; 0x804174 <interrupt_cnt>
     f1e:	80 91 74 41 	lds	r24, 0x4174	; 0x804174 <interrupt_cnt>
     f22:	84 31       	cpi	r24, 0x14	; 20
     f24:	48 f0       	brcs	.+18     	; 0xf38 <touch_timer_handler+0x2c>
     f26:	10 92 74 41 	sts	0x4174, r1	; 0x804174 <interrupt_cnt>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 26 41 	sts	0x4126, r24	; 0x804126 <time_to_measure_touch_flag>
     f30:	84 e1       	ldi	r24, 0x14	; 20
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 6f 17 	call	0x2ede	; 0x2ede <qtm_update_qtlib_timer>
     f38:	00 00       	nop
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <get_sensor_node_signal>:
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	00 d0       	rcall	.+0      	; 0xf46 <get_sensor_node_signal+0x6>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	29 81       	ldd	r18, Y+1	; 0x01
     f50:	3a 81       	ldd	r19, Y+2	; 0x02
     f52:	c9 01       	movw	r24, r18
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	8a 58       	subi	r24, 0x8A	; 138
     f62:	9e 4b       	sbci	r25, 0xBE	; 190
     f64:	fc 01       	movw	r30, r24
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <get_sensor_node_reference>:
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	00 d0       	rcall	.+0      	; 0xf7a <get_sensor_node_reference+0x6>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	29 81       	ldd	r18, Y+1	; 0x01
     f84:	3a 81       	ldd	r19, Y+2	; 0x02
     f86:	c9 01       	movw	r24, r18
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	82 0f       	add	r24, r18
     f8e:	93 1f       	adc	r25, r19
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	82 56       	subi	r24, 0x62	; 98
     f96:	9e 4b       	sbci	r25, 0xBE	; 190
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <get_sensor_cc_val>:
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <get_sensor_cc_val+0x6>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	29 81       	ldd	r18, Y+1	; 0x01
     fb8:	3a 81       	ldd	r19, Y+2	; 0x02
     fba:	c9 01       	movw	r24, r18
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	82 0f       	add	r24, r18
     fc6:	93 1f       	adc	r25, r19
     fc8:	88 58       	subi	r24, 0x88	; 136
     fca:	9e 4b       	sbci	r25, 0xBE	; 190
     fcc:	fc 01       	movw	r30, r24
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <get_sensor_state>:
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <get_sensor_state+0x6>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	40 91 89 40 	lds	r20, 0x4089	; 0x804089 <qtlib_key_set1+0x4>
     fee:	50 91 8a 40 	lds	r21, 0x408A	; 0x80408a <qtlib_key_set1+0x5>
     ff2:	29 81       	ldd	r18, Y+1	; 0x01
     ff4:	3a 81       	ldd	r19, Y+2	; 0x02
     ff6:	c9 01       	movw	r24, r18
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	84 0f       	add	r24, r20
    1006:	95 1f       	adc	r25, r21
    1008:	fc 01       	movw	r30, r24
    100a:	80 81       	ld	r24, Z
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <get_scroller_state>:

uint8_t get_scroller_state(uint16_t sensor_node)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	00 d0       	rcall	.+0      	; 0x101c <get_scroller_state+0x6>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	9a 83       	std	Y+2, r25	; 0x02
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].scroller_status);
    1024:	40 91 9c 40 	lds	r20, 0x409C	; 0x80409c <qtm_scroller_control1+0x4>
    1028:	50 91 9d 40 	lds	r21, 0x409D	; 0x80409d <qtm_scroller_control1+0x5>
    102c:	29 81       	ldd	r18, Y+1	; 0x01
    102e:	3a 81       	ldd	r19, Y+2	; 0x02
    1030:	c9 01       	movw	r24, r18
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	84 0f       	add	r24, r20
    1044:	95 1f       	adc	r25, r21
    1046:	fc 01       	movw	r30, r24
    1048:	80 81       	ld	r24, Z
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <get_scroller_position>:

uint16_t get_scroller_position(uint16_t sensor_node)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	00 d0       	rcall	.+0      	; 0x105a <get_scroller_position+0x6>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	9a 83       	std	Y+2, r25	; 0x02
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].position);
    1062:	40 91 9c 40 	lds	r20, 0x409C	; 0x80409c <qtm_scroller_control1+0x4>
    1066:	50 91 9d 40 	lds	r21, 0x409D	; 0x80409d <qtm_scroller_control1+0x5>
    106a:	29 81       	ldd	r18, Y+1	; 0x01
    106c:	3a 81       	ldd	r19, Y+2	; 0x02
    106e:	c9 01       	movw	r24, r18
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	82 0f       	add	r24, r18
    107e:	93 1f       	adc	r25, r19
    1080:	84 0f       	add	r24, r20
    1082:	95 1f       	adc	r25, r21
    1084:	fc 01       	movw	r30, r24
    1086:	85 81       	ldd	r24, Z+5	; 0x05
    1088:	96 81       	ldd	r25, Z+6	; 0x06
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <__vector_27>:
#if defined(__ICCAVR__)
ISR(QTML_PTC_vect_iar)
#else
ISR(QTML_PTC_vect)
#endif
{
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    109c:	0f 92       	push	r0
    109e:	11 24       	eor	r1, r1
    10a0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    10a4:	0f 92       	push	r0
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	qtm_avr_da_ptc_handler_eoc();
    10c6:	0e 94 b1 24 	call	0x4962	; 0x4962 <qtm_avr_da_ptc_handler_eoc>
}
    10ca:	00 00       	nop
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	ff 91       	pop	r31
    10d2:	ef 91       	pop	r30
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	0f 90       	pop	r0
    10ea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    10ee:	0f 90       	pop	r0
    10f0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <ADC_0_init>:
 * \return Initialization status.
 * \retval 0 the ADC init was successful
 * \retval 1 the ADC init was not successful
 */
int8_t ADC_0_init()
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp      /* ADC Enable: enabled */
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	96 e0       	ldi	r25, 0x06	; 6
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
	             | ADC_RESSEL_12BIT_gc   /* 12-bit mode */
	             | 0 << ADC_RUNSTBY_bp   /* Run standby mode: disabled */
	             | 0 << ADC_LEFTADJ_bp   /* Left Adjust Result: disabled */
	             | 0 << ADC_CONVMODE_bp; /* Differential Mode Conversion: disabled */

	return 0;
    110c:	80 e0       	ldi	r24, 0x00	; 0
}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    111c:	80 e8       	ldi	r24, 0x80	; 128
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	11 86       	std	Z+9, r1	; 0x09
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
    1124:	80 e0       	ldi	r24, 0x00	; 0
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	00 d0       	rcall	.+0      	; 0x1132 <ccp_write_io+0x6>
    1132:	1f 92       	push	r1
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	4b 81       	ldd	r20, Y+3	; 0x03
    1144:	68 ed       	ldi	r22, 0xD8	; 216
    1146:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <protected_write_io>
}
    114a:	00 00       	nop
    114c:	23 96       	adiw	r28, 0x03	; 3
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(CLKCTRL.PLLCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run Standby: disabled */
	//		 | CLKCTRL_MULFAC_DISABLE_gc /* 1 */
	//		 | 0 << CLKCTRL_SOURCE_bp /* Select Source for PLL: disabled */);

	ccp_write_io((void *)&(CLKCTRL.OSCHFCTRLA),
    1160:	64 e2       	ldi	r22, 0x24	; 36
    1162:	88 e6       	ldi	r24, 0x68	; 104
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 96 08 	call	0x112c	; 0x112c <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
    116a:	80 e0       	ldi	r24, 0x00	; 0
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    117a:	78 94       	sei

	return 0;
    117c:	80 e0       	ldi	r24, 0x00	; 0
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	00 d0       	rcall	.+0      	; 0x118a <PORTA_set_pin_pull_mode+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <PORTA_set_pin_pull_mode+0x8>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	80 5f       	subi	r24, 0xF0	; 240
    119c:	9b 4f       	sbci	r25, 0xFB	; 251
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	59 f4       	brne	.+22     	; 0x11be <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	fc 01       	movw	r30, r24
    11ae:	80 81       	ld	r24, Z
    11b0:	28 2f       	mov	r18, r24
    11b2:	28 60       	ori	r18, 0x08	; 8
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    11bc:	0d c0       	rjmp	.+26     	; 0x11d8 <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	88 23       	and	r24, r24
    11c2:	51 f4       	brne	.+20     	; 0x11d8 <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	fc 01       	movw	r30, r24
    11ca:	80 81       	ld	r24, Z
    11cc:	28 2f       	mov	r18, r24
    11ce:	27 7f       	andi	r18, 0xF7	; 247
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
	}
}
    11d8:	00 00       	nop
    11da:	24 96       	adiw	r28, 0x04	; 4
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <PORTA_set_pin_dir+0x6>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	e1 f0       	breq	.+56     	; 0x1238 <PORTA_set_pin_dir+0x52>
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	91 05       	cpc	r25, r1
    1204:	71 f1       	breq	.+92     	; 0x1262 <PORTA_set_pin_dir+0x7c>
    1206:	89 2b       	or	r24, r25
    1208:	09 f0       	breq	.+2      	; 0x120c <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    120a:	3b c0       	rjmp	.+118    	; 0x1282 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
    1218:	68 2f       	mov	r22, r24
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	48 2f       	mov	r20, r24
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <PORTA_set_pin_dir+0x44>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	4a 95       	dec	r20
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <PORTA_set_pin_dir+0x40>
    122e:	80 95       	com	r24
    1230:	86 23       	and	r24, r22
    1232:	f9 01       	movw	r30, r18
    1234:	80 83       	st	Z, r24
		break;
    1236:	25 c0       	rjmp	.+74     	; 0x1282 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	fc 01       	movw	r30, r24
    1242:	80 81       	ld	r24, Z
    1244:	68 2f       	mov	r22, r24
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	48 2f       	mov	r20, r24
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <PORTA_set_pin_dir+0x70>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	4a 95       	dec	r20
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <PORTA_set_pin_dir+0x6c>
    125a:	86 2b       	or	r24, r22
    125c:	f9 01       	movw	r30, r18
    125e:	80 83       	st	Z, r24
		break;
    1260:	10 c0       	rjmp	.+32     	; 0x1282 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	80 5f       	subi	r24, 0xF0	; 240
    126a:	9b 4f       	sbci	r25, 0xFB	; 251
    126c:	29 81       	ldd	r18, Y+1	; 0x01
    126e:	22 2f       	mov	r18, r18
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	20 5f       	subi	r18, 0xF0	; 240
    1274:	3b 4f       	sbci	r19, 0xFB	; 251
    1276:	f9 01       	movw	r30, r18
    1278:	20 81       	ld	r18, Z
    127a:	28 60       	ori	r18, 0x08	; 8
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18
		break;
    1280:	00 00       	nop
	default:
		break;
	}
}
    1282:	00 00       	nop
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret

0000128e <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	00 d0       	rcall	.+0      	; 0x1294 <PORTA_set_pin_level+0x6>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	88 23       	and	r24, r24
    12a0:	a9 f0       	breq	.+42     	; 0x12cc <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	fc 01       	movw	r30, r24
    12ac:	81 81       	ldd	r24, Z+1	; 0x01
    12ae:	68 2f       	mov	r22, r24
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	48 2f       	mov	r20, r24
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <PORTA_set_pin_level+0x32>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	4a 95       	dec	r20
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <PORTA_set_pin_level+0x2e>
    12c4:	86 2b       	or	r24, r22
    12c6:	f9 01       	movw	r30, r18
    12c8:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    12ca:	15 c0       	rjmp	.+42     	; 0x12f6 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	fc 01       	movw	r30, r24
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
    12d8:	68 2f       	mov	r22, r24
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	48 2f       	mov	r20, r24
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <PORTA_set_pin_level+0x5c>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	4a 95       	dec	r20
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <PORTA_set_pin_level+0x58>
    12ee:	80 95       	com	r24
    12f0:	86 23       	and	r24, r22
    12f2:	f9 01       	movw	r30, r18
    12f4:	81 83       	std	Z+1, r24	; 0x01
	}
}
    12f6:	00 00       	nop
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <PORTC_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	00 d0       	rcall	.+0      	; 0x1308 <PORTC_set_pin_pull_mode+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <PORTC_set_pin_pull_mode+0x8>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	80 5b       	subi	r24, 0xB0	; 176
    131a:	9b 4f       	sbci	r25, 0xFB	; 251
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	59 f4       	brne	.+22     	; 0x133c <PORTC_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	28 60       	ori	r18, 0x08	; 8
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    133a:	0d c0       	rjmp	.+26     	; 0x1356 <PORTC_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	88 23       	and	r24, r24
    1340:	51 f4       	brne	.+20     	; 0x1356 <PORTC_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	27 7f       	andi	r18, 0xF7	; 247
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	fc 01       	movw	r30, r24
    1354:	20 83       	st	Z, r18
	}
}
    1356:	00 00       	nop
    1358:	24 96       	adiw	r28, 0x04	; 4
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <PORTC_pin_set_inverted>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] inverted  Pin inverted mode
 */
static inline void PORTC_pin_set_inverted(const uint8_t pin, const bool inverted)
{
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	00 d0       	rcall	.+0      	; 0x136a <PORTC_pin_set_inverted+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <PORTC_pin_set_inverted+0x8>
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	80 5b       	subi	r24, 0xB0	; 176
    137c:	9b 4f       	sbci	r25, 0xFB	; 251
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	9a 83       	std	Y+2, r25	; 0x02

	if (inverted) {
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	88 23       	and	r24, r24
    1386:	59 f0       	breq	.+22     	; 0x139e <PORTC_pin_set_inverted+0x3a>
		*port_pin_ctrl |= PORT_INVEN_bm;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	fc 01       	movw	r30, r24
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	20 68       	ori	r18, 0x80	; 128
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
	}
}
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <PORTC_pin_set_inverted+0x4e>
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	fc 01       	movw	r30, r24
    13a4:	80 81       	ld	r24, Z
    13a6:	28 2f       	mov	r18, r24
    13a8:	2f 77       	andi	r18, 0x7F	; 127
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 83       	st	Z, r18
	}
}
    13b2:	00 00       	nop
    13b4:	24 96       	adiw	r28, 0x04	; 4
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <PORTC_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <PORTC_pin_set_isc+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <PORTC_pin_set_isc+0x8>
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	80 5b       	subi	r24, 0xB0	; 176
    13d8:	9b 4f       	sbci	r25, 0xFB	; 251
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	fc 01       	movw	r30, r24
    13e4:	80 81       	ld	r24, Z
    13e6:	98 2f       	mov	r25, r24
    13e8:	98 7f       	andi	r25, 0xF8	; 248
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	89 2b       	or	r24, r25
    13ee:	28 2f       	mov	r18, r24
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 83       	st	Z, r18
}
    13f8:	00 00       	nop
    13fa:	24 96       	adiw	r28, 0x04	; 4
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <PORTC_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	00 d0       	rcall	.+0      	; 0x140c <PORTC_set_pin_dir+0x6>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	91 05       	cpc	r25, r1
    141e:	e1 f0       	breq	.+56     	; 0x1458 <PORTC_set_pin_dir+0x52>
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	91 05       	cpc	r25, r1
    1424:	71 f1       	breq	.+92     	; 0x1482 <PORTC_set_pin_dir+0x7c>
    1426:	89 2b       	or	r24, r25
    1428:	09 f0       	breq	.+2      	; 0x142c <PORTC_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    142a:	3b c0       	rjmp	.+118    	; 0x14a2 <PORTC_set_pin_dir+0x9c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    142c:	88 e0       	ldi	r24, 0x08	; 8
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	28 e0       	ldi	r18, 0x08	; 8
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	f9 01       	movw	r30, r18
    1436:	20 81       	ld	r18, Z
    1438:	62 2f       	mov	r22, r18
    143a:	29 81       	ldd	r18, Y+1	; 0x01
    143c:	42 2f       	mov	r20, r18
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <PORTC_set_pin_dir+0x44>
    1446:	22 0f       	add	r18, r18
    1448:	33 1f       	adc	r19, r19
    144a:	4a 95       	dec	r20
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <PORTC_set_pin_dir+0x40>
    144e:	20 95       	com	r18
    1450:	26 23       	and	r18, r22
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
		break;
    1456:	25 c0       	rjmp	.+74     	; 0x14a2 <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1458:	88 e0       	ldi	r24, 0x08	; 8
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	28 e0       	ldi	r18, 0x08	; 8
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	f9 01       	movw	r30, r18
    1462:	20 81       	ld	r18, Z
    1464:	62 2f       	mov	r22, r18
    1466:	29 81       	ldd	r18, Y+1	; 0x01
    1468:	42 2f       	mov	r20, r18
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	21 e0       	ldi	r18, 0x01	; 1
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <PORTC_set_pin_dir+0x70>
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	4a 95       	dec	r20
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <PORTC_set_pin_dir+0x6c>
    147a:	26 2b       	or	r18, r22
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
		break;
    1480:	10 c0       	rjmp	.+32     	; 0x14a2 <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	80 5b       	subi	r24, 0xB0	; 176
    148a:	9b 4f       	sbci	r25, 0xFB	; 251
    148c:	29 81       	ldd	r18, Y+1	; 0x01
    148e:	22 2f       	mov	r18, r18
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	20 5b       	subi	r18, 0xB0	; 176
    1494:	3b 4f       	sbci	r19, 0xFB	; 251
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	28 60       	ori	r18, 0x08	; 8
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
		break;
    14a0:	00 00       	nop
	default:
		break;
	}
}
    14a2:	00 00       	nop
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <PORTC_set_pin_level+0x6>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 23       	and	r24, r24
    14c0:	a9 f0       	breq	.+42     	; 0x14ec <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    14c2:	88 e0       	ldi	r24, 0x08	; 8
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	28 e0       	ldi	r18, 0x08	; 8
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	f9 01       	movw	r30, r18
    14cc:	21 81       	ldd	r18, Z+1	; 0x01
    14ce:	62 2f       	mov	r22, r18
    14d0:	29 81       	ldd	r18, Y+1	; 0x01
    14d2:	42 2f       	mov	r20, r18
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <PORTC_set_pin_level+0x32>
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	4a 95       	dec	r20
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <PORTC_set_pin_level+0x2e>
    14e4:	26 2b       	or	r18, r22
    14e6:	fc 01       	movw	r30, r24
    14e8:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    14ea:	15 c0       	rjmp	.+42     	; 0x1516 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    14ec:	88 e0       	ldi	r24, 0x08	; 8
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	28 e0       	ldi	r18, 0x08	; 8
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	f9 01       	movw	r30, r18
    14f6:	21 81       	ldd	r18, Z+1	; 0x01
    14f8:	62 2f       	mov	r22, r18
    14fa:	29 81       	ldd	r18, Y+1	; 0x01
    14fc:	42 2f       	mov	r20, r18
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	02 c0       	rjmp	.+4      	; 0x150a <PORTC_set_pin_level+0x5c>
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	4a 95       	dec	r20
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <PORTC_set_pin_level+0x58>
    150e:	20 95       	com	r18
    1510:	26 23       	and	r18, r22
    1512:	fc 01       	movw	r30, r24
    1514:	21 83       	std	Z+1, r18	; 0x01
	}
}
    1516:	00 00       	nop
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	08 95       	ret

00001522 <PORTD_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	00 d0       	rcall	.+0      	; 0x1528 <PORTD_set_pin_pull_mode+0x6>
    1528:	00 d0       	rcall	.+0      	; 0x152a <PORTD_set_pin_pull_mode+0x8>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	8b 83       	std	Y+3, r24	; 0x03
    1530:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	80 59       	subi	r24, 0x90	; 144
    153a:	9b 4f       	sbci	r25, 0xFB	; 251
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	59 f4       	brne	.+22     	; 0x155c <PORTD_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	28 2f       	mov	r18, r24
    1550:	28 60       	ori	r18, 0x08	; 8
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    155a:	0d c0       	rjmp	.+26     	; 0x1576 <PORTD_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	88 23       	and	r24, r24
    1560:	51 f4       	brne	.+20     	; 0x1576 <PORTD_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	fc 01       	movw	r30, r24
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	27 7f       	andi	r18, 0xF7	; 247
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	fc 01       	movw	r30, r24
    1574:	20 83       	st	Z, r18
	}
}
    1576:	00 00       	nop
    1578:	24 96       	adiw	r28, 0x04	; 4
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <PORTD_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	00 d0       	rcall	.+0      	; 0x158a <PORTD_pin_set_isc+0x6>
    158a:	00 d0       	rcall	.+0      	; 0x158c <PORTD_pin_set_isc+0x8>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	8b 83       	std	Y+3, r24	; 0x03
    1592:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	80 59       	subi	r24, 0x90	; 144
    159c:	9b 4f       	sbci	r25, 0xFB	; 251
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	fc 01       	movw	r30, r24
    15a8:	80 81       	ld	r24, Z
    15aa:	98 2f       	mov	r25, r24
    15ac:	98 7f       	andi	r25, 0xF8	; 248
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	89 2b       	or	r24, r25
    15b2:	28 2f       	mov	r18, r24
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	fc 01       	movw	r30, r24
    15ba:	20 83       	st	Z, r18
}
    15bc:	00 00       	nop
    15be:	24 96       	adiw	r28, 0x04	; 4
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <PORTD_set_pin_dir+0x6>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	e1 f0       	breq	.+56     	; 0x161c <PORTD_set_pin_dir+0x52>
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	91 05       	cpc	r25, r1
    15e8:	71 f1       	breq	.+92     	; 0x1646 <PORTD_set_pin_dir+0x7c>
    15ea:	89 2b       	or	r24, r25
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    15ee:	3b c0       	rjmp	.+118    	; 0x1666 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    15f0:	8c e0       	ldi	r24, 0x0C	; 12
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	2c e0       	ldi	r18, 0x0C	; 12
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	20 81       	ld	r18, Z
    15fc:	62 2f       	mov	r22, r18
    15fe:	29 81       	ldd	r18, Y+1	; 0x01
    1600:	42 2f       	mov	r20, r18
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	21 e0       	ldi	r18, 0x01	; 1
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <PORTD_set_pin_dir+0x44>
    160a:	22 0f       	add	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	4a 95       	dec	r20
    1610:	e2 f7       	brpl	.-8      	; 0x160a <PORTD_set_pin_dir+0x40>
    1612:	20 95       	com	r18
    1614:	26 23       	and	r18, r22
    1616:	fc 01       	movw	r30, r24
    1618:	20 83       	st	Z, r18
		break;
    161a:	25 c0       	rjmp	.+74     	; 0x1666 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    161c:	8c e0       	ldi	r24, 0x0C	; 12
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	2c e0       	ldi	r18, 0x0C	; 12
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	f9 01       	movw	r30, r18
    1626:	20 81       	ld	r18, Z
    1628:	62 2f       	mov	r22, r18
    162a:	29 81       	ldd	r18, Y+1	; 0x01
    162c:	42 2f       	mov	r20, r18
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <PORTD_set_pin_dir+0x70>
    1636:	22 0f       	add	r18, r18
    1638:	33 1f       	adc	r19, r19
    163a:	4a 95       	dec	r20
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <PORTD_set_pin_dir+0x6c>
    163e:	26 2b       	or	r18, r22
    1640:	fc 01       	movw	r30, r24
    1642:	20 83       	st	Z, r18
		break;
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	80 59       	subi	r24, 0x90	; 144
    164e:	9b 4f       	sbci	r25, 0xFB	; 251
    1650:	29 81       	ldd	r18, Y+1	; 0x01
    1652:	22 2f       	mov	r18, r18
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	20 59       	subi	r18, 0x90	; 144
    1658:	3b 4f       	sbci	r19, 0xFB	; 251
    165a:	f9 01       	movw	r30, r18
    165c:	20 81       	ld	r18, Z
    165e:	28 60       	ori	r18, 0x08	; 8
    1660:	fc 01       	movw	r30, r24
    1662:	20 83       	st	Z, r18
		break;
    1664:	00 00       	nop
	default:
		break;
	}
}
    1666:	00 00       	nop
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	00 d0       	rcall	.+0      	; 0x1678 <PORTD_set_pin_level+0x6>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	88 23       	and	r24, r24
    1684:	a9 f0       	breq	.+42     	; 0x16b0 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
    1686:	8c e0       	ldi	r24, 0x0C	; 12
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	2c e0       	ldi	r18, 0x0C	; 12
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	f9 01       	movw	r30, r18
    1690:	21 81       	ldd	r18, Z+1	; 0x01
    1692:	62 2f       	mov	r22, r18
    1694:	29 81       	ldd	r18, Y+1	; 0x01
    1696:	42 2f       	mov	r20, r18
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <PORTD_set_pin_level+0x32>
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	4a 95       	dec	r20
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <PORTD_set_pin_level+0x2e>
    16a8:	26 2b       	or	r18, r22
    16aa:	fc 01       	movw	r30, r24
    16ac:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
    16ae:	15 c0       	rjmp	.+42     	; 0x16da <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
    16b0:	8c e0       	ldi	r24, 0x0C	; 12
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	2c e0       	ldi	r18, 0x0C	; 12
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	f9 01       	movw	r30, r18
    16ba:	21 81       	ldd	r18, Z+1	; 0x01
    16bc:	62 2f       	mov	r22, r18
    16be:	29 81       	ldd	r18, Y+1	; 0x01
    16c0:	42 2f       	mov	r20, r18
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <PORTD_set_pin_level+0x5c>
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	4a 95       	dec	r20
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <PORTD_set_pin_level+0x58>
    16d2:	20 95       	com	r18
    16d4:	26 23       	and	r18, r22
    16d6:	fc 01       	movw	r30, r24
    16d8:	21 83       	std	Z+1, r18	; 0x01
	}
}
    16da:	00 00       	nop
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <PORTF_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <PORTF_set_pin_pull_mode+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <PORTF_set_pin_pull_mode+0x8>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	8b 83       	std	Y+3, r24	; 0x03
    16f4:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	80 55       	subi	r24, 0x50	; 80
    16fe:	9b 4f       	sbci	r25, 0xFB	; 251
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	59 f4       	brne	.+22     	; 0x1720 <PORTF_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	fc 01       	movw	r30, r24
    1710:	80 81       	ld	r24, Z
    1712:	28 2f       	mov	r18, r24
    1714:	28 60       	ori	r18, 0x08	; 8
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	fc 01       	movw	r30, r24
    171c:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    171e:	0d c0       	rjmp	.+26     	; 0x173a <PORTF_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	88 23       	and	r24, r24
    1724:	51 f4       	brne	.+20     	; 0x173a <PORTF_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	fc 01       	movw	r30, r24
    172c:	80 81       	ld	r24, Z
    172e:	28 2f       	mov	r18, r24
    1730:	27 7f       	andi	r18, 0xF7	; 247
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	fc 01       	movw	r30, r24
    1738:	20 83       	st	Z, r18
	}
}
    173a:	00 00       	nop
    173c:	24 96       	adiw	r28, 0x04	; 4
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <PORTF_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	00 d0       	rcall	.+0      	; 0x174e <PORTF_set_pin_dir+0x6>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	e1 f0       	breq	.+56     	; 0x179a <PORTF_set_pin_dir+0x52>
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	91 05       	cpc	r25, r1
    1766:	71 f1       	breq	.+92     	; 0x17c4 <PORTF_set_pin_dir+0x7c>
    1768:	89 2b       	or	r24, r25
    176a:	09 f0       	breq	.+2      	; 0x176e <PORTF_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    176c:	3b c0       	rjmp	.+118    	; 0x17e4 <PORTF_set_pin_dir+0x9c>
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    176e:	84 e1       	ldi	r24, 0x14	; 20
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	24 e1       	ldi	r18, 0x14	; 20
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	f9 01       	movw	r30, r18
    1778:	20 81       	ld	r18, Z
    177a:	62 2f       	mov	r22, r18
    177c:	29 81       	ldd	r18, Y+1	; 0x01
    177e:	42 2f       	mov	r20, r18
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	21 e0       	ldi	r18, 0x01	; 1
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	02 c0       	rjmp	.+4      	; 0x178c <PORTF_set_pin_dir+0x44>
    1788:	22 0f       	add	r18, r18
    178a:	33 1f       	adc	r19, r19
    178c:	4a 95       	dec	r20
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <PORTF_set_pin_dir+0x40>
    1790:	20 95       	com	r18
    1792:	26 23       	and	r18, r22
    1794:	fc 01       	movw	r30, r24
    1796:	20 83       	st	Z, r18
		break;
    1798:	25 c0       	rjmp	.+74     	; 0x17e4 <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    179a:	84 e1       	ldi	r24, 0x14	; 20
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	24 e1       	ldi	r18, 0x14	; 20
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	f9 01       	movw	r30, r18
    17a4:	20 81       	ld	r18, Z
    17a6:	62 2f       	mov	r22, r18
    17a8:	29 81       	ldd	r18, Y+1	; 0x01
    17aa:	42 2f       	mov	r20, r18
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <PORTF_set_pin_dir+0x70>
    17b4:	22 0f       	add	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	4a 95       	dec	r20
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <PORTF_set_pin_dir+0x6c>
    17bc:	26 2b       	or	r18, r22
    17be:	fc 01       	movw	r30, r24
    17c0:	20 83       	st	Z, r18
		break;
    17c2:	10 c0       	rjmp	.+32     	; 0x17e4 <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	80 55       	subi	r24, 0x50	; 80
    17cc:	9b 4f       	sbci	r25, 0xFB	; 251
    17ce:	29 81       	ldd	r18, Y+1	; 0x01
    17d0:	22 2f       	mov	r18, r18
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	20 55       	subi	r18, 0x50	; 80
    17d6:	3b 4f       	sbci	r19, 0xFB	; 251
    17d8:	f9 01       	movw	r30, r18
    17da:	20 81       	ld	r18, Z
    17dc:	28 60       	ori	r18, 0x08	; 8
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
		break;
    17e2:	00 00       	nop
	default:
		break;
	}
}
    17e4:	00 00       	nop
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <PORTF_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <PORTF_set_pin_level+0x6>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	88 23       	and	r24, r24
    1802:	a9 f0       	breq	.+42     	; 0x182e <PORTF_set_pin_level+0x3e>
		VPORTF.OUT |= (1 << pin);
    1804:	84 e1       	ldi	r24, 0x14	; 20
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	24 e1       	ldi	r18, 0x14	; 20
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	f9 01       	movw	r30, r18
    180e:	21 81       	ldd	r18, Z+1	; 0x01
    1810:	62 2f       	mov	r22, r18
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	42 2f       	mov	r20, r18
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	21 e0       	ldi	r18, 0x01	; 1
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <PORTF_set_pin_level+0x32>
    181e:	22 0f       	add	r18, r18
    1820:	33 1f       	adc	r19, r19
    1822:	4a 95       	dec	r20
    1824:	e2 f7       	brpl	.-8      	; 0x181e <PORTF_set_pin_level+0x2e>
    1826:	26 2b       	or	r18, r22
    1828:	fc 01       	movw	r30, r24
    182a:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTF.OUT &= ~(1 << pin);
	}
}
    182c:	15 c0       	rjmp	.+42     	; 0x1858 <PORTF_set_pin_level+0x68>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    182e:	84 e1       	ldi	r24, 0x14	; 20
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	24 e1       	ldi	r18, 0x14	; 20
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	f9 01       	movw	r30, r18
    1838:	21 81       	ldd	r18, Z+1	; 0x01
    183a:	62 2f       	mov	r22, r18
    183c:	29 81       	ldd	r18, Y+1	; 0x01
    183e:	42 2f       	mov	r20, r18
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <PORTF_set_pin_level+0x5c>
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	4a 95       	dec	r20
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <PORTF_set_pin_level+0x58>
    1850:	20 95       	com	r18
    1852:	26 23       	and	r18, r22
    1854:	fc 01       	movw	r30, r24
    1856:	21 83       	std	Z+1, r18	; 0x01
	}
}
    1858:	00 00       	nop
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <PIR_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PIR_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	1f 92       	push	r1
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(2, pull_mode);
    1870:	69 81       	ldd	r22, Y+1	; 0x01
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	0e 94 c2 08 	call	0x1184	; 0x1184 <PORTA_set_pin_pull_mode>
}
    1878:	00 00       	nop
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <PIR_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PIR_set_dir(const enum port_dir dir)
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	1f 92       	push	r1
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
    188e:	69 81       	ldd	r22, Y+1	; 0x01
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PORTA_set_pin_dir>
}
    1896:	00 00       	nop
    1898:	0f 90       	pop	r0
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <LED1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED1_set_dir(const enum port_dir dir)
{
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	1f 92       	push	r1
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    18ac:	69 81       	ldd	r22, Y+1	; 0x01
    18ae:	84 e0       	ldi	r24, 0x04	; 4
    18b0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PORTA_set_pin_dir>
}
    18b4:	00 00       	nop
    18b6:	0f 90       	pop	r0
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	1f 92       	push	r1
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
    18ca:	69 81       	ldd	r22, Y+1	; 0x01
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	0e 94 47 09 	call	0x128e	; 0x128e <PORTA_set_pin_level>
}
    18d2:	00 00       	nop
    18d4:	0f 90       	pop	r0
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <LED0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED0_set_dir(const enum port_dir dir)
{
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	1f 92       	push	r1
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(6, dir);
    18e8:	69 81       	ldd	r22, Y+1	; 0x01
    18ea:	86 e0       	ldi	r24, 0x06	; 6
    18ec:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PORTA_set_pin_dir>
}
    18f0:	00 00       	nop
    18f2:	0f 90       	pop	r0
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <LED0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED0_set_level(const bool level)
{
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	1f 92       	push	r1
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(6, level);
    1906:	69 81       	ldd	r22, Y+1	; 0x01
    1908:	86 e0       	ldi	r24, 0x06	; 6
    190a:	0e 94 47 09 	call	0x128e	; 0x128e <PORTA_set_pin_level>
}
    190e:	00 00       	nop
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <debug_TxD_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void debug_TxD_set_dir(const enum port_dir dir)
{
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	1f 92       	push	r1
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(0, dir);
    1924:	69 81       	ldd	r22, Y+1	; 0x01
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	0e 94 03 0a 	call	0x1406	; 0x1406 <PORTC_set_pin_dir>
}
    192c:	00 00       	nop
    192e:	0f 90       	pop	r0
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <debug_TxD_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void debug_TxD_set_level(const bool level)
{
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	1f 92       	push	r1
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(0, level);
    1942:	69 81       	ldd	r22, Y+1	; 0x01
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	0e 94 57 0a 	call	0x14ae	; 0x14ae <PORTC_set_pin_level>
}
    194a:	00 00       	nop
    194c:	0f 90       	pop	r0
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <debug_RxD_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void debug_RxD_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	1f 92       	push	r1
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_pull_mode(1, pull_mode);
    1960:	69 81       	ldd	r22, Y+1	; 0x01
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	0e 94 81 09 	call	0x1302	; 0x1302 <PORTC_set_pin_pull_mode>
}
    1968:	00 00       	nop
    196a:	0f 90       	pop	r0
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <debug_RxD_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void debug_RxD_set_dir(const enum port_dir dir)
{
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	1f 92       	push	r1
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(1, dir);
    197e:	69 81       	ldd	r22, Y+1	; 0x01
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	0e 94 03 0a 	call	0x1406	; 0x1406 <PORTC_set_pin_dir>
}
    1986:	00 00       	nop
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <SDA_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void SDA_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	1f 92       	push	r1
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_pull_mode(2, pull_mode);
    199c:	69 81       	ldd	r22, Y+1	; 0x01
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	0e 94 81 09 	call	0x1302	; 0x1302 <PORTC_set_pin_pull_mode>
}
    19a4:	00 00       	nop
    19a6:	0f 90       	pop	r0
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <SDA_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void SDA_set_dir(const enum port_dir dir)
{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	1f 92       	push	r1
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(2, dir);
    19ba:	69 81       	ldd	r22, Y+1	; 0x01
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	0e 94 03 0a 	call	0x1406	; 0x1406 <PORTC_set_pin_dir>
}
    19c2:	00 00       	nop
    19c4:	0f 90       	pop	r0
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	08 95       	ret

000019cc <SDA_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void SDA_set_isc(const PORT_ISC_t isc)
{
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	1f 92       	push	r1
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	89 83       	std	Y+1, r24	; 0x01
	PORTC_pin_set_isc(2, isc);
    19d8:	69 81       	ldd	r22, Y+1	; 0x01
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <PORTC_pin_set_isc>
}
    19e0:	00 00       	nop
    19e2:	0f 90       	pop	r0
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <SDA_set_inverted>:
 *
 * \param[in] inverted true  = I/O on SDA is inverted
 *                     false = I/O on SDA is not inverted
 */
static inline void SDA_set_inverted(const bool inverted)
{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	1f 92       	push	r1
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
	PORTC_pin_set_inverted(2, inverted);
    19f6:	69 81       	ldd	r22, Y+1	; 0x01
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	0e 94 b2 09 	call	0x1364	; 0x1364 <PORTC_pin_set_inverted>
}
    19fe:	00 00       	nop
    1a00:	0f 90       	pop	r0
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <SDA_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void SDA_set_level(const bool level)
{
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	1f 92       	push	r1
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(2, level);
    1a14:	69 81       	ldd	r22, Y+1	; 0x01
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	0e 94 57 0a 	call	0x14ae	; 0x14ae <PORTC_set_pin_level>
}
    1a1c:	00 00       	nop
    1a1e:	0f 90       	pop	r0
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <SCL_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void SCL_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	1f 92       	push	r1
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_pull_mode(3, pull_mode);
    1a32:	69 81       	ldd	r22, Y+1	; 0x01
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	0e 94 81 09 	call	0x1302	; 0x1302 <PORTC_set_pin_pull_mode>
}
    1a3a:	00 00       	nop
    1a3c:	0f 90       	pop	r0
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <SCL_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void SCL_set_dir(const enum port_dir dir)
{
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	1f 92       	push	r1
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(3, dir);
    1a50:	69 81       	ldd	r22, Y+1	; 0x01
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	0e 94 03 0a 	call	0x1406	; 0x1406 <PORTC_set_pin_dir>
}
    1a58:	00 00       	nop
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <SCL_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void SCL_set_isc(const PORT_ISC_t isc)
{
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	1f 92       	push	r1
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	89 83       	std	Y+1, r24	; 0x01
	PORTC_pin_set_isc(3, isc);
    1a6e:	69 81       	ldd	r22, Y+1	; 0x01
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <PORTC_pin_set_isc>
}
    1a76:	00 00       	nop
    1a78:	0f 90       	pop	r0
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <SCL_set_inverted>:
 *
 * \param[in] inverted true  = I/O on SCL is inverted
 *                     false = I/O on SCL is not inverted
 */
static inline void SCL_set_inverted(const bool inverted)
{
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	1f 92       	push	r1
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_pin_set_inverted(3, inverted);
    1a8c:	69 81       	ldd	r22, Y+1	; 0x01
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	0e 94 b2 09 	call	0x1364	; 0x1364 <PORTC_pin_set_inverted>
}
    1a94:	00 00       	nop
    1a96:	0f 90       	pop	r0
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <SCL_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void SCL_set_level(const bool level)
{
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	1f 92       	push	r1
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(3, level);
    1aaa:	69 81       	ldd	r22, Y+1	; 0x01
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	0e 94 57 0a 	call	0x14ae	; 0x14ae <PORTC_set_pin_level>
}
    1ab2:	00 00       	nop
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	08 95       	ret

00001abc <heaterTrigger_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void heaterTrigger_set_dir(const enum port_dir dir)
{
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	1f 92       	push	r1
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
    1ac8:	69 81       	ldd	r22, Y+1	; 0x01
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <PORTD_set_pin_dir>
}
    1ad0:	00 00       	nop
    1ad2:	0f 90       	pop	r0
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	08 95       	ret

00001ada <heaterTrigger_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void heaterTrigger_set_level(const bool level)
{
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	1f 92       	push	r1
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
    1ae6:	69 81       	ldd	r22, Y+1	; 0x01
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	0e 94 39 0b 	call	0x1672	; 0x1672 <PORTD_set_pin_level>
}
    1aee:	00 00       	nop
    1af0:	0f 90       	pop	r0
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <ZCD_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void ZCD_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	1f 92       	push	r1
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(1, pull_mode);
    1b04:	69 81       	ldd	r22, Y+1	; 0x01
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	0e 94 91 0a 	call	0x1522	; 0x1522 <PORTD_set_pin_pull_mode>
}
    1b0c:	00 00       	nop
    1b0e:	0f 90       	pop	r0
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <ZCD_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void ZCD_set_isc(const PORT_ISC_t isc)
{
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	1f 92       	push	r1
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(1, isc);
    1b22:	69 81       	ldd	r22, Y+1	; 0x01
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	0e 94 c2 0a 	call	0x1584	; 0x1584 <PORTD_pin_set_isc>
}
    1b2a:	00 00       	nop
    1b2c:	0f 90       	pop	r0
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <AIN0_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void AIN0_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	1f 92       	push	r1
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(2, pull_mode);
    1b40:	69 81       	ldd	r22, Y+1	; 0x01
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	0e 94 91 0a 	call	0x1522	; 0x1522 <PORTD_set_pin_pull_mode>
}
    1b48:	00 00       	nop
    1b4a:	0f 90       	pop	r0
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <AIN0_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void AIN0_set_isc(const PORT_ISC_t isc)
{
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	1f 92       	push	r1
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(2, isc);
    1b5e:	69 81       	ldd	r22, Y+1	; 0x01
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	0e 94 c2 0a 	call	0x1584	; 0x1584 <PORTD_pin_set_isc>
}
    1b66:	00 00       	nop
    1b68:	0f 90       	pop	r0
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	08 95       	ret

00001b70 <AIN1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void AIN1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	1f 92       	push	r1
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(3, pull_mode);
    1b7c:	69 81       	ldd	r22, Y+1	; 0x01
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	0e 94 91 0a 	call	0x1522	; 0x1522 <PORTD_set_pin_pull_mode>
}
    1b84:	00 00       	nop
    1b86:	0f 90       	pop	r0
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <AIN1_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void AIN1_set_isc(const PORT_ISC_t isc)
{
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	1f 92       	push	r1
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(3, isc);
    1b9a:	69 81       	ldd	r22, Y+1	; 0x01
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <PORTD_pin_set_isc>
}
    1ba2:	00 00       	nop
    1ba4:	0f 90       	pop	r0
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <heaterRelay_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void heaterRelay_set_dir(const enum port_dir dir)
{
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	1f 92       	push	r1
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(4, dir);
    1bb8:	69 81       	ldd	r22, Y+1	; 0x01
    1bba:	84 e0       	ldi	r24, 0x04	; 4
    1bbc:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <PORTD_set_pin_dir>
}
    1bc0:	00 00       	nop
    1bc2:	0f 90       	pop	r0
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <heaterRelay_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void heaterRelay_set_level(const bool level)
{
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	1f 92       	push	r1
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(4, level);
    1bd6:	69 81       	ldd	r22, Y+1	; 0x01
    1bd8:	84 e0       	ldi	r24, 0x04	; 4
    1bda:	0e 94 39 0b 	call	0x1672	; 0x1672 <PORTD_set_pin_level>
}
    1bde:	00 00       	nop
    1be0:	0f 90       	pop	r0
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <zeroCross_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void zeroCross_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	1f 92       	push	r1
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(5, pull_mode);
    1bf4:	69 81       	ldd	r22, Y+1	; 0x01
    1bf6:	85 e0       	ldi	r24, 0x05	; 5
    1bf8:	0e 94 91 0a 	call	0x1522	; 0x1522 <PORTD_set_pin_pull_mode>
}
    1bfc:	00 00       	nop
    1bfe:	0f 90       	pop	r0
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <zeroCross_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void zeroCross_set_dir(const enum port_dir dir)
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	1f 92       	push	r1
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(5, dir);
    1c12:	69 81       	ldd	r22, Y+1	; 0x01
    1c14:	85 e0       	ldi	r24, 0x05	; 5
    1c16:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <PORTD_set_pin_dir>
}
    1c1a:	00 00       	nop
    1c1c:	0f 90       	pop	r0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

00001c24 <auxRelay_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void auxRelay_set_dir(const enum port_dir dir)
{
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	1f 92       	push	r1
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(6, dir);
    1c30:	69 81       	ldd	r22, Y+1	; 0x01
    1c32:	86 e0       	ldi	r24, 0x06	; 6
    1c34:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <PORTD_set_pin_dir>
}
    1c38:	00 00       	nop
    1c3a:	0f 90       	pop	r0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <auxRelay_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void auxRelay_set_level(const bool level)
{
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	1f 92       	push	r1
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(6, level);
    1c4e:	69 81       	ldd	r22, Y+1	; 0x01
    1c50:	86 e0       	ldi	r24, 0x06	; 6
    1c52:	0e 94 39 0b 	call	0x1672	; 0x1672 <PORTD_set_pin_level>
}
    1c56:	00 00       	nop
    1c58:	0f 90       	pop	r0
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	08 95       	ret

00001c60 <auxTrigger_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void auxTrigger_set_dir(const enum port_dir dir)
{
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	1f 92       	push	r1
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(7, dir);
    1c6c:	69 81       	ldd	r22, Y+1	; 0x01
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <PORTD_set_pin_dir>
}
    1c74:	00 00       	nop
    1c76:	0f 90       	pop	r0
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <auxTrigger_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void auxTrigger_set_level(const bool level)
{
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	1f 92       	push	r1
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(7, level);
    1c8a:	69 81       	ldd	r22, Y+1	; 0x01
    1c8c:	87 e0       	ldi	r24, 0x07	; 7
    1c8e:	0e 94 39 0b 	call	0x1672	; 0x1672 <PORTD_set_pin_level>
}
    1c92:	00 00       	nop
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <TxD_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void TxD_set_dir(const enum port_dir dir)
{
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	1f 92       	push	r1
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_dir(0, dir);
    1ca8:	69 81       	ldd	r22, Y+1	; 0x01
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	0e 94 a4 0b 	call	0x1748	; 0x1748 <PORTF_set_pin_dir>
}
    1cb0:	00 00       	nop
    1cb2:	0f 90       	pop	r0
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <TxD_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void TxD_set_level(const bool level)
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	1f 92       	push	r1
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_level(0, level);
    1cc6:	69 81       	ldd	r22, Y+1	; 0x01
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <PORTF_set_pin_level>
}
    1cce:	00 00       	nop
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <RxD_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void RxD_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	1f 92       	push	r1
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_pull_mode(1, pull_mode);
    1ce4:	69 81       	ldd	r22, Y+1	; 0x01
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <PORTF_set_pin_pull_mode>
}
    1cec:	00 00       	nop
    1cee:	0f 90       	pop	r0
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	08 95       	ret

00001cf6 <RxD_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void RxD_set_dir(const enum port_dir dir)
{
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	1f 92       	push	r1
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_dir(1, dir);
    1d02:	69 81       	ldd	r22, Y+1	; 0x01
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e 94 a4 0b 	call	0x1748	; 0x1748 <PORTF_set_pin_dir>
}
    1d0a:	00 00       	nop
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <mcu_init+0x6>
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <mcu_init+0x8>
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1d20:	19 82       	std	Y+1, r1	; 0x01
    1d22:	12 c0       	rjmp	.+36     	; 0x1d48 <mcu_init+0x34>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	80 5f       	subi	r24, 0xF0	; 240
    1d2c:	9b 4f       	sbci	r25, 0xFB	; 251
    1d2e:	29 81       	ldd	r18, Y+1	; 0x01
    1d30:	22 2f       	mov	r18, r18
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	20 5f       	subi	r18, 0xF0	; 240
    1d36:	3b 4f       	sbci	r19, 0xFB	; 251
    1d38:	f9 01       	movw	r30, r18
    1d3a:	20 81       	ld	r18, Z
    1d3c:	28 60       	ori	r18, 0x08	; 8
    1d3e:	fc 01       	movw	r30, r24
    1d40:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	8f 5f       	subi	r24, 0xFF	; 255
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	88 30       	cpi	r24, 0x08	; 8
    1d4c:	58 f3       	brcs	.-42     	; 0x1d24 <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1d4e:	1a 82       	std	Y+2, r1	; 0x02
    1d50:	12 c0       	rjmp	.+36     	; 0x1d76 <mcu_init+0x62>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	80 5b       	subi	r24, 0xB0	; 176
    1d5a:	9b 4f       	sbci	r25, 0xFB	; 251
    1d5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5e:	22 2f       	mov	r18, r18
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	20 5b       	subi	r18, 0xB0	; 176
    1d64:	3b 4f       	sbci	r19, 0xFB	; 251
    1d66:	f9 01       	movw	r30, r18
    1d68:	20 81       	ld	r18, Z
    1d6a:	28 60       	ori	r18, 0x08	; 8
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	8a 83       	std	Y+2, r24	; 0x02
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	88 30       	cpi	r24, 0x08	; 8
    1d7a:	58 f3       	brcs	.-42     	; 0x1d52 <mcu_init+0x3e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1d7c:	1b 82       	std	Y+3, r1	; 0x03
    1d7e:	12 c0       	rjmp	.+36     	; 0x1da4 <mcu_init+0x90>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	80 59       	subi	r24, 0x90	; 144
    1d88:	9b 4f       	sbci	r25, 0xFB	; 251
    1d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8c:	22 2f       	mov	r18, r18
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	20 59       	subi	r18, 0x90	; 144
    1d92:	3b 4f       	sbci	r19, 0xFB	; 251
    1d94:	f9 01       	movw	r30, r18
    1d96:	20 81       	ld	r18, Z
    1d98:	28 60       	ori	r18, 0x08	; 8
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	8b 83       	std	Y+3, r24	; 0x03
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	88 30       	cpi	r24, 0x08	; 8
    1da8:	58 f3       	brcs	.-42     	; 0x1d80 <mcu_init+0x6c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1daa:	1c 82       	std	Y+4, r1	; 0x04
    1dac:	12 c0       	rjmp	.+36     	; 0x1dd2 <mcu_init+0xbe>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1dae:	8c 81       	ldd	r24, Y+4	; 0x04
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	80 55       	subi	r24, 0x50	; 80
    1db6:	9b 4f       	sbci	r25, 0xFB	; 251
    1db8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dba:	22 2f       	mov	r18, r18
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	20 55       	subi	r18, 0x50	; 80
    1dc0:	3b 4f       	sbci	r19, 0xFB	; 251
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	20 81       	ld	r18, Z
    1dc6:	28 60       	ori	r18, 0x08	; 8
    1dc8:	fc 01       	movw	r30, r24
    1dca:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	8f 5f       	subi	r24, 0xFF	; 255
    1dd0:	8c 83       	std	Y+4, r24	; 0x04
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	88 30       	cpi	r24, 0x08	; 8
    1dd6:	58 f3       	brcs	.-42     	; 0x1dae <mcu_init+0x9a>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    1dd8:	00 00       	nop
    1dda:	24 96       	adiw	r28, 0x04	; 4
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <USART_initialization>:
#include "driver_init.h"
#include <system.h>

/* configure the pins and initialize the registers */
void USART_initialization(void)
{
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	debug_RxD_set_dir(PORT_DIR_IN);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	0e 94 b9 0c 	call	0x1972	; 0x1972 <debug_RxD_set_dir>

	debug_RxD_set_pull_mode(
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <debug_RxD_set_pull_mode>
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output

	debug_TxD_set_level(
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	0e 94 9b 0c 	call	0x1936	; 0x1936 <debug_TxD_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	debug_TxD_set_dir(PORT_DIR_OUT);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	0e 94 8c 0c 	call	0x1918	; 0x1918 <debug_TxD_set_dir>

	USART_init();
    1e06:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <USART_init>
}
    1e0a:	00 00       	nop
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <USART_0_initialization>:

/* configure the pins and initialize the registers */
void USART_0_initialization(void)
{
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	RxD_set_dir(PORT_DIR_IN);
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <RxD_set_dir>

	RxD_set_pull_mode(
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <RxD_set_pull_mode>
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output

	TxD_set_level(
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <TxD_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	TxD_set_dir(PORT_DIR_OUT);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <TxD_set_dir>

	USART_0_init();
    1e32:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <USART_0_init>
}
    1e36:	00 00       	nop
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <ZCD_0_initialization>:

/* configure pins and initialize registers */
void ZCD_0_initialization(void)
{
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	ZCD_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ZCD_set_isc>
	// Disable pull-up resistor
	ZCD_set_pull_mode(PORT_PULL_OFF);
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ZCD_set_pull_mode>

	ZCD_0_init();
    1e52:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <ZCD_0_init>
}
    1e56:	00 00       	nop
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <I2C_0_initialization>:

/* configure pins and initialize registers */
void I2C_0_initialization(void)
{
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62

	SCL_set_level(
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <SCL_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false); // 

	SCL_set_dir(
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <SCL_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_OUT);

	SCL_set_pull_mode(
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <SCL_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SCL_set_inverted(
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <SCL_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	SCL_set_isc(
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <SCL_set_isc>
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	/* set the alternate pin mux */

	PORTMUX.TWIROUTEA |= PORTMUX_TWI01_bm;
    1e84:	80 ee       	ldi	r24, 0xE0	; 224
    1e86:	95 e0       	ldi	r25, 0x05	; 5
    1e88:	20 ee       	ldi	r18, 0xE0	; 224
    1e8a:	35 e0       	ldi	r19, 0x05	; 5
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	25 81       	ldd	r18, Z+5	; 0x05
    1e90:	22 60       	ori	r18, 0x02	; 2
    1e92:	fc 01       	movw	r30, r24
    1e94:	25 83       	std	Z+5, r18	; 0x05

	SDA_set_level(
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <SDA_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false); // 

	SDA_set_dir(
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <SDA_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_OUT);

	SDA_set_pull_mode(
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <SDA_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	SDA_set_inverted(
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <SDA_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	SDA_set_isc(
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <SDA_set_isc>
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	/* set the alternate pin mux */

	PORTMUX.TWIROUTEA |= PORTMUX_TWI01_bm;
    1eb4:	80 ee       	ldi	r24, 0xE0	; 224
    1eb6:	95 e0       	ldi	r25, 0x05	; 5
    1eb8:	20 ee       	ldi	r18, 0xE0	; 224
    1eba:	35 e0       	ldi	r19, 0x05	; 5
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	25 81       	ldd	r18, Z+5	; 0x05
    1ec0:	22 60       	ori	r18, 0x02	; 2
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	25 83       	std	Z+5, r18	; 0x05

	I2C_0_init();
    1ec6:	0e 94 01 10 	call	0x2002	; 0x2002 <I2C_0_init>
}
    1eca:	00 00       	nop
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <ADC_0_initialization>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62

	ADC_0_init();
    1eda:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ADC_0_init>
}
    1ede:	00 00       	nop
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1eee:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <mcu_init>

	/* PORT setting on PA2 */

	// Set pin direction to input
	PIR_set_dir(PORT_DIR_IN);
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	0e 94 41 0c 	call	0x1882	; 0x1882 <PIR_set_dir>

	PIR_set_pull_mode(
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	0e 94 32 0c 	call	0x1864	; 0x1864 <PIR_set_pull_mode>

	/* PORT setting on PA4 */

	// Set pin direction to output

	LED1_set_level(
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	0e 94 5f 0c 	call	0x18be	; 0x18be <LED1_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED1_set_dir(PORT_DIR_OUT);
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <LED1_set_dir>

	/* PORT setting on PA6 */

	// Set pin direction to output

	LED0_set_level(
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <LED0_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED0_set_dir(PORT_DIR_OUT);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LED0_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	heaterTrigger_set_level(
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <heaterTrigger_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	heaterTrigger_set_dir(PORT_DIR_OUT);
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <heaterTrigger_set_dir>

	/* PORT setting on PD2 */

	// Disable digital input buffer
	AIN0_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    1f22:	84 e0       	ldi	r24, 0x04	; 4
    1f24:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <AIN0_set_isc>
	// Disable pull-up resistor
	AIN0_set_pull_mode(PORT_PULL_OFF);
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <AIN0_set_pull_mode>

	/* PORT setting on PD3 */

	// Disable digital input buffer
	AIN1_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    1f2e:	84 e0       	ldi	r24, 0x04	; 4
    1f30:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <AIN1_set_isc>
	// Disable pull-up resistor
	AIN1_set_pull_mode(PORT_PULL_OFF);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <AIN1_set_pull_mode>

	/* PORT setting on PD4 */

	// Set pin direction to output

	heaterRelay_set_level(
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <heaterRelay_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	heaterRelay_set_dir(PORT_DIR_OUT);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <heaterRelay_set_dir>

	/* PORT setting on PD5 */

	// Set pin direction to input
	zeroCross_set_dir(PORT_DIR_IN);
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <zeroCross_set_dir>

	zeroCross_set_pull_mode(
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <zeroCross_set_pull_mode>

	/* PORT setting on PD6 */

	// Set pin direction to output

	auxRelay_set_level(
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <auxRelay_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	auxRelay_set_dir(PORT_DIR_OUT);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <auxRelay_set_dir>

	/* PORT setting on PD7 */

	// Set pin direction to output

	auxTrigger_set_level(
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <auxTrigger_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	auxTrigger_set_dir(PORT_DIR_OUT);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <auxTrigger_set_dir>

	CLKCTRL_init();
    1f6a:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLKCTRL_init>

	USART_initialization();
    1f6e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <USART_initialization>

	USART_0_initialization();
    1f72:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <USART_0_initialization>

	SLPCTRL_init();
    1f76:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <SLPCTRL_init>

	CPUINT_init();
    1f7a:	0e 94 b9 08 	call	0x1172	; 0x1172 <CPUINT_init>

	ZCD_0_initialization();
    1f7e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <ZCD_0_initialization>

	I2C_0_initialization();
    1f82:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <I2C_0_initialization>

	ADC_0_initialization();
    1f86:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_0_initialization>

	Timer_init();
    1f8a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <Timer_init>

	BOD_init();
    1f8e:	0e 94 8a 08 	call	0x1114	; 0x1114 <BOD_init>
}
    1f92:	00 00       	nop
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <I2C_0_set_data_complete_callback>:
 * \brief Identical to I2C_0_master_operation(true);
 */
i2c_error_t I2C_0_master_read(void)
{
	return I2C_0_master_operation(true);
}
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <I2C_0_set_data_complete_callback+0x6>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <I2C_0_set_data_complete_callback+0x8>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	6b 83       	std	Y+3, r22	; 0x03
    1fac:	7c 83       	std	Y+4, r23	; 0x04
    1fae:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	a9 01       	movw	r20, r18
    1fb8:	bc 01       	movw	r22, r24
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	0e 94 63 14 	call	0x28c6	; 0x28c6 <I2C_0_set_callback>
    1fc0:	00 00       	nop
    1fc2:	24 96       	adiw	r28, 0x04	; 4
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	08 95       	ret

00001fce <I2C_0_set_address_nack_callback>:
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <I2C_0_set_address_nack_callback+0x6>
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <I2C_0_set_address_nack_callback+0x8>
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	6b 83       	std	Y+3, r22	; 0x03
    1fe0:	7c 83       	std	Y+4, r23	; 0x04
    1fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	a9 01       	movw	r20, r18
    1fec:	bc 01       	movw	r22, r24
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <I2C_0_set_callback>
    1ff4:	00 00       	nop
    1ff6:	24 96       	adiw	r28, 0x04	; 4
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	08 95       	ret

00002002 <I2C_0_init>:
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	99 e0       	ldi	r25, 0x09	; 9
    200e:	29 e1       	ldi	r18, 0x19	; 25
    2010:	fc 01       	movw	r30, r24
    2012:	26 83       	std	Z+6, r18	; 0x06
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	99 e0       	ldi	r25, 0x09	; 9
    2018:	21 ec       	ldi	r18, 0xC1	; 193
    201a:	fc 01       	movw	r30, r24
    201c:	23 83       	std	Z+3, r18	; 0x03
    201e:	00 00       	nop
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	08 95       	ret

00002026 <I2C_0_open>:
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	00 d0       	rcall	.+0      	; 0x202c <I2C_0_open+0x6>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    203a:	82 70       	andi	r24, 0x02	; 2
    203c:	88 23       	and	r24, r24
    203e:	09 f0       	breq	.+2      	; 0x2042 <I2C_0_open+0x1c>
    2040:	77 c0       	rjmp	.+238    	; 0x2130 <I2C_0_open+0x10a>
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	80 93 2c 41 	sts	0x412C, r24	; 0x80412c <I2C_0_status+0x1>
    2048:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    204c:	8e 7f       	andi	r24, 0xFE	; 254
    204e:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    2052:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2056:	82 60       	ori	r24, 0x02	; 2
    2058:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    205c:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2060:	87 7f       	andi	r24, 0xF7	; 247
    2062:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    2066:	8e e0       	ldi	r24, 0x0E	; 14
    2068:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
    206c:	84 ef       	ldi	r24, 0xF4	; 244
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	80 93 33 41 	sts	0x4133, r24	; 0x804133 <I2C_0_status+0x8>
    2074:	90 93 34 41 	sts	0x4134, r25	; 0x804134 <I2C_0_status+0x9>
    2078:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    207c:	84 60       	ori	r24, 0x04	; 4
    207e:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    2082:	89 e4       	ldi	r24, 0x49	; 73
    2084:	94 e1       	ldi	r25, 0x14	; 20
    2086:	80 93 37 41 	sts	0x4137, r24	; 0x804137 <I2C_0_status+0xc>
    208a:	90 93 38 41 	sts	0x4138, r25	; 0x804138 <I2C_0_status+0xd>
    208e:	10 92 43 41 	sts	0x4143, r1	; 0x804143 <I2C_0_status+0x18>
    2092:	10 92 44 41 	sts	0x4144, r1	; 0x804144 <I2C_0_status+0x19>
    2096:	89 e4       	ldi	r24, 0x49	; 73
    2098:	94 e1       	ldi	r25, 0x14	; 20
    209a:	80 93 39 41 	sts	0x4139, r24	; 0x804139 <I2C_0_status+0xe>
    209e:	90 93 3a 41 	sts	0x413A, r25	; 0x80413a <I2C_0_status+0xf>
    20a2:	10 92 45 41 	sts	0x4145, r1	; 0x804145 <I2C_0_status+0x1a>
    20a6:	10 92 46 41 	sts	0x4146, r1	; 0x804146 <I2C_0_status+0x1b>
    20aa:	89 e4       	ldi	r24, 0x49	; 73
    20ac:	94 e1       	ldi	r25, 0x14	; 20
    20ae:	80 93 3b 41 	sts	0x413B, r24	; 0x80413b <I2C_0_status+0x10>
    20b2:	90 93 3c 41 	sts	0x413C, r25	; 0x80413c <I2C_0_status+0x11>
    20b6:	10 92 47 41 	sts	0x4147, r1	; 0x804147 <I2C_0_status+0x1c>
    20ba:	10 92 48 41 	sts	0x4148, r1	; 0x804148 <I2C_0_status+0x1d>
    20be:	89 e4       	ldi	r24, 0x49	; 73
    20c0:	94 e1       	ldi	r25, 0x14	; 20
    20c2:	80 93 3d 41 	sts	0x413D, r24	; 0x80413d <I2C_0_status+0x12>
    20c6:	90 93 3e 41 	sts	0x413E, r25	; 0x80413e <I2C_0_status+0x13>
    20ca:	10 92 49 41 	sts	0x4149, r1	; 0x804149 <I2C_0_status+0x1e>
    20ce:	10 92 4a 41 	sts	0x414A, r1	; 0x80414a <I2C_0_status+0x1f>
    20d2:	86 e5       	ldi	r24, 0x56	; 86
    20d4:	94 e1       	ldi	r25, 0x14	; 20
    20d6:	80 93 3f 41 	sts	0x413F, r24	; 0x80413f <I2C_0_status+0x14>
    20da:	90 93 40 41 	sts	0x4140, r25	; 0x804140 <I2C_0_status+0x15>
    20de:	10 92 4b 41 	sts	0x414B, r1	; 0x80414b <I2C_0_status+0x20>
    20e2:	10 92 4c 41 	sts	0x414C, r1	; 0x80414c <I2C_0_status+0x21>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	99 e0       	ldi	r25, 0x09	; 9
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	39 e0       	ldi	r19, 0x09	; 9
    20ee:	f9 01       	movw	r30, r18
    20f0:	24 81       	ldd	r18, Z+4	; 0x04
    20f2:	28 60       	ori	r18, 0x08	; 8
    20f4:	fc 01       	movw	r30, r24
    20f6:	24 83       	std	Z+4, r18	; 0x04
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	99 e0       	ldi	r25, 0x09	; 9
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	39 e0       	ldi	r19, 0x09	; 9
    2100:	f9 01       	movw	r30, r18
    2102:	25 81       	ldd	r18, Z+5	; 0x05
    2104:	21 60       	ori	r18, 0x01	; 1
    2106:	fc 01       	movw	r30, r24
    2108:	25 83       	std	Z+5, r18	; 0x05
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	99 e0       	ldi	r25, 0x09	; 9
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	39 e0       	ldi	r19, 0x09	; 9
    2112:	f9 01       	movw	r30, r18
    2114:	25 81       	ldd	r18, Z+5	; 0x05
    2116:	20 6c       	ori	r18, 0xC0	; 192
    2118:	fc 01       	movw	r30, r24
    211a:	25 83       	std	Z+5, r18	; 0x05
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	99 e0       	ldi	r25, 0x09	; 9
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	39 e0       	ldi	r19, 0x09	; 9
    2124:	f9 01       	movw	r30, r18
    2126:	23 81       	ldd	r18, Z+3	; 0x03
    2128:	20 6c       	ori	r18, 0xC0	; 192
    212a:	fc 01       	movw	r30, r24
    212c:	23 83       	std	Z+3, r18	; 0x03
    212e:	19 82       	std	Y+1, r1	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <I2C_0_force_close>:
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2148:	8e 7f       	andi	r24, 0xFE	; 254
    214a:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    214e:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2152:	8d 7f       	andi	r24, 0xFD	; 253
    2154:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    2158:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    215c:	87 7f       	andi	r24, 0xF7	; 247
    215e:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    2162:	8e e0       	ldi	r24, 0x0E	; 14
    2164:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
    2168:	84 ef       	ldi	r24, 0xF4	; 244
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	80 93 33 41 	sts	0x4133, r24	; 0x804133 <I2C_0_status+0x8>
    2170:	90 93 34 41 	sts	0x4134, r25	; 0x804134 <I2C_0_status+0x9>
    2174:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2178:	84 60       	ori	r24, 0x04	; 4
    217a:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    217e:	00 00       	nop
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <I2C_0_close>:
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	1f 92       	push	r1
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	99 e0       	ldi	r25, 0x09	; 9
    2198:	fc 01       	movw	r30, r24
    219a:	85 81       	ldd	r24, Z+5	; 0x05
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	84 70       	andi	r24, 0x04	; 4
    21a2:	99 27       	eor	r25, r25
    21a4:	89 2b       	or	r24, r25
    21a6:	41 f0       	breq	.+16     	; 0x21b8 <I2C_0_close+0x32>
    21a8:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    21ac:	8e 7f       	andi	r24, 0xFE	; 254
    21ae:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	80 93 36 41 	sts	0x4136, r24	; 0x804136 <I2C_0_status+0xb>
    21b8:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    21bc:	81 70       	andi	r24, 0x01	; 1
    21be:	88 23       	and	r24, r24
    21c0:	e9 f4       	brne	.+58     	; 0x21fc <I2C_0_close+0x76>
    21c2:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    21c6:	8d 7f       	andi	r24, 0xFD	; 253
    21c8:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
    21ce:	80 93 2c 41 	sts	0x412C, r24	; 0x80412c <I2C_0_status+0x1>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	99 e0       	ldi	r25, 0x09	; 9
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	39 e0       	ldi	r19, 0x09	; 9
    21da:	f9 01       	movw	r30, r18
    21dc:	25 81       	ldd	r18, Z+5	; 0x05
    21de:	20 6c       	ori	r18, 0xC0	; 192
    21e0:	fc 01       	movw	r30, r24
    21e2:	25 83       	std	Z+5, r18	; 0x05
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	99 e0       	ldi	r25, 0x09	; 9
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	39 e0       	ldi	r19, 0x09	; 9
    21ec:	f9 01       	movw	r30, r18
    21ee:	23 81       	ldd	r18, Z+3	; 0x03
    21f0:	2f 73       	andi	r18, 0x3F	; 63
    21f2:	fc 01       	movw	r30, r24
    21f4:	23 83       	std	Z+3, r18	; 0x03
    21f6:	80 91 36 41 	lds	r24, 0x4136	; 0x804136 <I2C_0_status+0xb>
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	0f 90       	pop	r0
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <I2C_0_set_buffer>:
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	00 d0       	rcall	.+0      	; 0x220c <I2C_0_set_buffer+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <I2C_0_set_buffer+0x8>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	6b 83       	std	Y+3, r22	; 0x03
    2218:	7c 83       	std	Y+4, r23	; 0x04
    221a:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    221e:	84 70       	andi	r24, 0x04	; 4
    2220:	88 23       	and	r24, r24
    2222:	89 f0       	breq	.+34     	; 0x2246 <I2C_0_set_buffer+0x40>
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	80 93 2d 41 	sts	0x412D, r24	; 0x80412d <I2C_0_status+0x2>
    222c:	90 93 2e 41 	sts	0x412E, r25	; 0x80412e <I2C_0_status+0x3>
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	80 93 2f 41 	sts	0x412F, r24	; 0x80412f <I2C_0_status+0x4>
    2238:	90 93 30 41 	sts	0x4130, r25	; 0x804130 <I2C_0_status+0x5>
    223c:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2240:	8b 7f       	andi	r24, 0xFB	; 251
    2242:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    2246:	00 00       	nop
    2248:	24 96       	adiw	r28, 0x04	; 4
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <I2C_0_master_operation>:
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	00 d0       	rcall	.+0      	; 0x225a <I2C_0_master_operation+0x6>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2268:	81 70       	andi	r24, 0x01	; 1
    226a:	88 23       	and	r24, r24
    226c:	91 f4       	brne	.+36     	; 0x2292 <I2C_0_master_operation+0x3e>
    226e:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2272:	81 60       	ori	r24, 0x01	; 1
    2274:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
    2278:	19 82       	std	Y+1, r1	; 0x01
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	88 23       	and	r24, r24
    227e:	21 f0       	breq	.+8      	; 0x2288 <I2C_0_master_operation+0x34>
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
    2286:	03 c0       	rjmp	.+6      	; 0x228e <I2C_0_master_operation+0x3a>
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
    228e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <I2C_0_master_isr>
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	08 95       	ret

0000229e <I2C_0_master_write>:

/**
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
	return I2C_0_master_operation(false);
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	0e 94 2a 11 	call	0x2254	; 0x2254 <I2C_0_master_operation>
}
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <I2C_0_do_I2C_RESET>:
/************************************************************************/
/* Helper Functions                                                     */
/************************************************************************/

static i2c_fsm_states_t I2C_0_do_I2C_RESET(void)
{
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_FLUSH_bm;
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	99 e0       	ldi	r25, 0x09	; 9
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	39 e0       	ldi	r19, 0x09	; 9
    22c2:	f9 01       	movw	r30, r18
    22c4:	24 81       	ldd	r18, Z+4	; 0x04
    22c6:	28 60       	ori	r18, 0x08	; 8
    22c8:	fc 01       	movw	r30, r24
    22ca:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	99 e0       	ldi	r25, 0x09	; 9
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	39 e0       	ldi	r19, 0x09	; 9
    22d4:	f9 01       	movw	r30, r18
    22d6:	25 81       	ldd	r18, Z+5	; 0x05
    22d8:	21 60       	ori	r18, 0x01	; 1
    22da:	fc 01       	movw	r30, r24
    22dc:	25 83       	std	Z+5, r18	; 0x05
	I2C_0_status.busy  = false; // Bus Free
    22de:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    22e2:	8e 7f       	andi	r24, 0xFE	; 254
    22e4:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
	I2C_0_status.error = I2C_NOERR;
    22e8:	10 92 36 41 	sts	0x4136, r1	; 0x804136 <I2C_0_status+0xb>
	return I2C_RESET; // park the FSM on reset
    22ec:	8e e0       	ldi	r24, 0x0E	; 14
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <I2C_0_do_I2C_IDLE>:

static i2c_fsm_states_t I2C_0_do_I2C_IDLE(void)
{
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	I2C_0_status.busy  = false; // Bus Free
    22fc:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2300:	8e 7f       	andi	r24, 0xFE	; 254
    2302:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
	I2C_0_status.error = I2C_NOERR;
    2306:	10 92 36 41 	sts	0x4136, r1	; 0x804136 <I2C_0_status+0xb>
	return I2C_IDLE; // park the FSM on IDLE
    230a:	80 e0       	ldi	r24, 0x00	; 0
}
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	08 95       	ret

00002312 <I2C_0_do_I2C_SEND_RESTART_READ>:

static i2c_fsm_states_t I2C_0_do_I2C_SEND_RESTART_READ(void)
{
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	return I2C_0_do_I2C_SEND_ADR_READ();
    231a:	0e 94 df 11 	call	0x23be	; 0x23be <I2C_0_do_I2C_SEND_ADR_READ>
}
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	08 95       	ret

00002324 <I2C_0_do_I2C_SEND_RESTART_WRITE>:

static i2c_fsm_states_t I2C_0_do_I2C_SEND_RESTART_WRITE(void)
{
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
	return I2C_0_do_I2C_SEND_ADR_WRITE();
    232c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <I2C_0_do_I2C_SEND_ADR_WRITE>
}
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <I2C_0_do_I2C_SEND_RESTART>:

static i2c_fsm_states_t I2C_0_do_I2C_SEND_RESTART(void)
{
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
	return I2C_0_do_I2C_SEND_ADR_READ();
    233e:	0e 94 df 11 	call	0x23be	; 0x23be <I2C_0_do_I2C_SEND_ADR_READ>
}
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <I2C_0_do_I2C_SEND_STOP>:

static i2c_fsm_states_t I2C_0_do_I2C_SEND_STOP(void)
{
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	99 e0       	ldi	r25, 0x09	; 9
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	39 e0       	ldi	r19, 0x09	; 9
    2358:	f9 01       	movw	r30, r18
    235a:	24 81       	ldd	r18, Z+4	; 0x04
    235c:	23 60       	ori	r18, 0x03	; 3
    235e:	fc 01       	movw	r30, r24
    2360:	24 83       	std	Z+4, r18	; 0x04
	return I2C_0_do_I2C_IDLE();
    2362:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_0_do_I2C_IDLE>
}
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <I2C_0_do_I2C_DO_ADDRESS_NACK>:

// TODO: probably need 2 addressNACK's one from read and one from write.
//       the do NACK before RESTART or STOP is a special case that a new state simplifies.
static i2c_fsm_states_t I2C_0_do_I2C_DO_ADDRESS_NACK(void)
{
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
	I2C_0_status.addressNACKCheck = 0;
    2374:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2378:	87 7f       	andi	r24, 0xF7	; 247
    237a:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
	I2C_0_status.error            = I2C_FAIL;
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	80 93 36 41 	sts	0x4136, r24	; 0x804136 <I2C_0_status+0xb>
	switch (I2C_0_status.callbackTable[i2c_addressNACK](I2C_0_status.callbackPayload[i2c_addressNACK])) {
    2384:	20 91 3b 41 	lds	r18, 0x413B	; 0x80413b <I2C_0_status+0x10>
    2388:	30 91 3c 41 	lds	r19, 0x413C	; 0x80413c <I2C_0_status+0x11>
    238c:	80 91 47 41 	lds	r24, 0x4147	; 0x804147 <I2C_0_status+0x1c>
    2390:	90 91 48 41 	lds	r25, 0x4148	; 0x804148 <I2C_0_status+0x1d>
    2394:	f9 01       	movw	r30, r18
    2396:	09 95       	icall
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	82 30       	cpi	r24, 0x02	; 2
    239e:	91 05       	cpc	r25, r1
    23a0:	19 f0       	breq	.+6      	; 0x23a8 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3c>
    23a2:	03 97       	sbiw	r24, 0x03	; 3
    23a4:	21 f0       	breq	.+8      	; 0x23ae <I2C_0_do_I2C_DO_ADDRESS_NACK+0x42>
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x48>
	case i2c_restart_read:
		return I2C_0_do_I2C_SEND_RESTART_READ();
    23a8:	0e 94 89 11 	call	0x2312	; 0x2312 <I2C_0_do_I2C_SEND_RESTART_READ>
    23ac:	05 c0       	rjmp	.+10     	; 0x23b8 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x4c>
	case i2c_restart_write:
		return I2C_0_do_I2C_SEND_RESTART_WRITE();
    23ae:	0e 94 92 11 	call	0x2324	; 0x2324 <I2C_0_do_I2C_SEND_RESTART_WRITE>
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x4c>
	default:
		return I2C_0_do_I2C_SEND_STOP();
    23b4:	0e 94 a4 11 	call	0x2348	; 0x2348 <I2C_0_do_I2C_SEND_STOP>
	}
}
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	08 95       	ret

000023be <I2C_0_do_I2C_SEND_ADR_READ>:

static i2c_fsm_states_t I2C_0_do_I2C_SEND_ADR_READ(void)
{
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62

	I2C_0_status.addressNACKCheck = 1;
    23c6:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    23ca:	88 60       	ori	r24, 0x08	; 8
    23cc:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
	TWI0.MADDR                    = I2C_0_status.address << 1 | 1;
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	99 e0       	ldi	r25, 0x09	; 9
    23d4:	20 91 2c 41 	lds	r18, 0x412C	; 0x80412c <I2C_0_status+0x1>
    23d8:	22 2f       	mov	r18, r18
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	22 0f       	add	r18, r18
    23de:	33 1f       	adc	r19, r19
    23e0:	21 60       	ori	r18, 0x01	; 1
    23e2:	fc 01       	movw	r30, r24
    23e4:	27 83       	std	Z+7, r18	; 0x07
	return I2C_RX;
    23e6:	84 e0       	ldi	r24, 0x04	; 4
}
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	08 95       	ret

000023ee <I2C_0_do_I2C_SEND_ADR_WRITE>:

static i2c_fsm_states_t I2C_0_do_I2C_SEND_ADR_WRITE(void)
{
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62

	I2C_0_status.addressNACKCheck = 1;
    23f6:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    23fa:	88 60       	ori	r24, 0x08	; 8
    23fc:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
	TWI0.MADDR                    = I2C_0_status.address << 1;
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	99 e0       	ldi	r25, 0x09	; 9
    2404:	20 91 2c 41 	lds	r18, 0x412C	; 0x80412c <I2C_0_status+0x1>
    2408:	22 0f       	add	r18, r18
    240a:	fc 01       	movw	r30, r24
    240c:	27 83       	std	Z+7, r18	; 0x07
	return I2C_TX;
    240e:	83 e0       	ldi	r24, 0x03	; 3
}
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <I2C_0_do_I2C_RX_DO_ACK>:

static i2c_fsm_states_t I2C_0_do_I2C_RX_DO_ACK(void)
{
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	99 e0       	ldi	r25, 0x09	; 9
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	39 e0       	ldi	r19, 0x09	; 9
    2426:	f9 01       	movw	r30, r18
    2428:	24 81       	ldd	r18, Z+4	; 0x04
    242a:	2b 7f       	andi	r18, 0xFB	; 251
    242c:	fc 01       	movw	r30, r24
    242e:	24 83       	std	Z+4, r18	; 0x04
	return I2C_RX;
    2430:	84 e0       	ldi	r24, 0x04	; 4
}
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <I2C_0_do_I2C_TX_DO_ACK>:

static i2c_fsm_states_t I2C_0_do_I2C_TX_DO_ACK(void)
{
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	99 e0       	ldi	r25, 0x09	; 9
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	39 e0       	ldi	r19, 0x09	; 9
    2448:	f9 01       	movw	r30, r18
    244a:	24 81       	ldd	r18, Z+4	; 0x04
    244c:	2b 7f       	andi	r18, 0xFB	; 251
    244e:	fc 01       	movw	r30, r24
    2450:	24 83       	std	Z+4, r18	; 0x04
	return I2C_TX;
    2452:	83 e0       	ldi	r24, 0x03	; 3
}
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <I2C_0_do_I2C_DO_NACK_STOP>:

static i2c_fsm_states_t I2C_0_do_I2C_DO_NACK_STOP(void)
{
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	99 e0       	ldi	r25, 0x09	; 9
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	39 e0       	ldi	r19, 0x09	; 9
    246a:	f9 01       	movw	r30, r18
    246c:	24 81       	ldd	r18, Z+4	; 0x04
    246e:	24 60       	ori	r18, 0x04	; 4
    2470:	fc 01       	movw	r30, r24
    2472:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	99 e0       	ldi	r25, 0x09	; 9
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	39 e0       	ldi	r19, 0x09	; 9
    247c:	f9 01       	movw	r30, r18
    247e:	24 81       	ldd	r18, Z+4	; 0x04
    2480:	23 60       	ori	r18, 0x03	; 3
    2482:	fc 01       	movw	r30, r24
    2484:	24 83       	std	Z+4, r18	; 0x04
	return I2C_0_do_I2C_IDLE();
    2486:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_0_do_I2C_IDLE>
}
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	08 95       	ret

00002490 <I2C_0_do_I2C_DO_NACK_RESTART>:

static i2c_fsm_states_t I2C_0_do_I2C_DO_NACK_RESTART(void)
{
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	99 e0       	ldi	r25, 0x09	; 9
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	39 e0       	ldi	r19, 0x09	; 9
    24a0:	f9 01       	movw	r30, r18
    24a2:	24 81       	ldd	r18, Z+4	; 0x04
    24a4:	24 60       	ori	r18, 0x04	; 4
    24a6:	fc 01       	movw	r30, r24
    24a8:	24 83       	std	Z+4, r18	; 0x04
	return I2C_SEND_RESTART;
    24aa:	88 e0       	ldi	r24, 0x08	; 8
}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <I2C_0_do_I2C_TX>:

static i2c_fsm_states_t I2C_0_do_I2C_TX(void)
{
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
	if ((TWI0.MSTATUS & TWI_RXACK_bm)) // Slave replied with NACK
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	99 e0       	ldi	r25, 0x09	; 9
    24be:	fc 01       	movw	r30, r24
    24c0:	85 81       	ldd	r24, Z+5	; 0x05
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	80 71       	andi	r24, 0x10	; 16
    24c8:	99 27       	eor	r25, r25
    24ca:	89 2b       	or	r24, r25
    24cc:	d9 f0       	breq	.+54     	; 0x2504 <I2C_0_do_I2C_TX+0x52>
	{
		switch (I2C_0_status.callbackTable[i2c_dataNACK](I2C_0_status.callbackPayload[i2c_dataNACK])) {
    24ce:	20 91 3d 41 	lds	r18, 0x413D	; 0x80413d <I2C_0_status+0x12>
    24d2:	30 91 3e 41 	lds	r19, 0x413E	; 0x80413e <I2C_0_status+0x13>
    24d6:	80 91 49 41 	lds	r24, 0x4149	; 0x804149 <I2C_0_status+0x1e>
    24da:	90 91 4a 41 	lds	r25, 0x414A	; 0x80414a <I2C_0_status+0x1f>
    24de:	f9 01       	movw	r30, r18
    24e0:	09 95       	icall
    24e2:	88 2f       	mov	r24, r24
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	91 05       	cpc	r25, r1
    24ea:	19 f0       	breq	.+6      	; 0x24f2 <I2C_0_do_I2C_TX+0x40>
    24ec:	03 97       	sbiw	r24, 0x03	; 3
    24ee:	21 f0       	breq	.+8      	; 0x24f8 <I2C_0_do_I2C_TX+0x46>
    24f0:	06 c0       	rjmp	.+12     	; 0x24fe <I2C_0_do_I2C_TX+0x4c>
		case i2c_restart_read:
			return I2C_0_do_I2C_SEND_RESTART_READ();
    24f2:	0e 94 89 11 	call	0x2312	; 0x2312 <I2C_0_do_I2C_SEND_RESTART_READ>
    24f6:	2e c0       	rjmp	.+92     	; 0x2554 <I2C_0_do_I2C_TX+0xa2>
		case i2c_restart_write:
			return I2C_0_do_I2C_SEND_RESTART_WRITE();
    24f8:	0e 94 92 11 	call	0x2324	; 0x2324 <I2C_0_do_I2C_SEND_RESTART_WRITE>
    24fc:	2b c0       	rjmp	.+86     	; 0x2554 <I2C_0_do_I2C_TX+0xa2>
		default:
		case i2c_continue:
		case i2c_stop:
			return I2C_0_do_I2C_SEND_STOP();
    24fe:	0e 94 a4 11 	call	0x2348	; 0x2348 <I2C_0_do_I2C_SEND_STOP>
    2502:	28 c0       	rjmp	.+80     	; 0x2554 <I2C_0_do_I2C_TX+0xa2>
		}
	} else {
		I2C_0_status.addressNACKCheck = 0;
    2504:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2508:	87 7f       	andi	r24, 0xF7	; 247
    250a:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
		TWI0.MDATA                    = *I2C_0_status.data_ptr++;
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	39 e0       	ldi	r19, 0x09	; 9
    2512:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <I2C_0_status+0x2>
    2516:	90 91 2e 41 	lds	r25, 0x412E	; 0x80412e <I2C_0_status+0x3>
    251a:	ac 01       	movw	r20, r24
    251c:	4f 5f       	subi	r20, 0xFF	; 255
    251e:	5f 4f       	sbci	r21, 0xFF	; 255
    2520:	40 93 2d 41 	sts	0x412D, r20	; 0x80412d <I2C_0_status+0x2>
    2524:	50 93 2e 41 	sts	0x412E, r21	; 0x80412e <I2C_0_status+0x3>
    2528:	fc 01       	movw	r30, r24
    252a:	80 81       	ld	r24, Z
    252c:	f9 01       	movw	r30, r18
    252e:	80 87       	std	Z+8, r24	; 0x08
		return (--I2C_0_status.data_length) ? I2C_TX : I2C_TX_EMPTY;
    2530:	80 91 2f 41 	lds	r24, 0x412F	; 0x80412f <I2C_0_status+0x4>
    2534:	90 91 30 41 	lds	r25, 0x4130	; 0x804130 <I2C_0_status+0x5>
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	80 93 2f 41 	sts	0x412F, r24	; 0x80412f <I2C_0_status+0x4>
    253e:	90 93 30 41 	sts	0x4130, r25	; 0x804130 <I2C_0_status+0x5>
    2542:	80 91 2f 41 	lds	r24, 0x412F	; 0x80412f <I2C_0_status+0x4>
    2546:	90 91 30 41 	lds	r25, 0x4130	; 0x804130 <I2C_0_status+0x5>
    254a:	89 2b       	or	r24, r25
    254c:	11 f0       	breq	.+4      	; 0x2552 <I2C_0_do_I2C_TX+0xa0>
    254e:	83 e0       	ldi	r24, 0x03	; 3
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <I2C_0_do_I2C_TX+0xa2>
    2552:	85 e0       	ldi	r24, 0x05	; 5
	}
}
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <I2C_0_do_I2C_RX>:

static i2c_fsm_states_t I2C_0_do_I2C_RX(void)
{
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	I2C_0_status.addressNACKCheck = 0;
    2562:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2566:	87 7f       	andi	r24, 0xF7	; 247
    2568:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>

	if (I2C_0_status.data_length == 1)
    256c:	80 91 2f 41 	lds	r24, 0x412F	; 0x80412f <I2C_0_status+0x4>
    2570:	90 91 30 41 	lds	r25, 0x4130	; 0x804130 <I2C_0_status+0x5>
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	51 f4       	brne	.+20     	; 0x258c <I2C_0_do_I2C_RX+0x32>
		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc; // Next byte will be last to be received, setup NACK
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	99 e0       	ldi	r25, 0x09	; 9
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	39 e0       	ldi	r19, 0x09	; 9
    2580:	f9 01       	movw	r30, r18
    2582:	24 81       	ldd	r18, Z+4	; 0x04
    2584:	24 60       	ori	r18, 0x04	; 4
    2586:	fc 01       	movw	r30, r24
    2588:	24 83       	std	Z+4, r18	; 0x04
    258a:	09 c0       	rjmp	.+18     	; 0x259e <I2C_0_do_I2C_RX+0x44>
	else
		TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp); // More bytes to receive, setup ACK
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	99 e0       	ldi	r25, 0x09	; 9
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	39 e0       	ldi	r19, 0x09	; 9
    2594:	f9 01       	movw	r30, r18
    2596:	24 81       	ldd	r18, Z+4	; 0x04
    2598:	2b 7f       	andi	r18, 0xFB	; 251
    259a:	fc 01       	movw	r30, r24
    259c:	24 83       	std	Z+4, r18	; 0x04

	if (--I2C_0_status.data_length) {
    259e:	80 91 2f 41 	lds	r24, 0x412F	; 0x80412f <I2C_0_status+0x4>
    25a2:	90 91 30 41 	lds	r25, 0x4130	; 0x804130 <I2C_0_status+0x5>
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	80 93 2f 41 	sts	0x412F, r24	; 0x80412f <I2C_0_status+0x4>
    25ac:	90 93 30 41 	sts	0x4130, r25	; 0x804130 <I2C_0_status+0x5>
    25b0:	80 91 2f 41 	lds	r24, 0x412F	; 0x80412f <I2C_0_status+0x4>
    25b4:	90 91 30 41 	lds	r25, 0x4130	; 0x804130 <I2C_0_status+0x5>
    25b8:	89 2b       	or	r24, r25
    25ba:	f1 f0       	breq	.+60     	; 0x25f8 <I2C_0_do_I2C_RX+0x9e>
		*I2C_0_status.data_ptr = TWI0.MDATA;
    25bc:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <I2C_0_status+0x2>
    25c0:	90 91 2e 41 	lds	r25, 0x412E	; 0x80412e <I2C_0_status+0x3>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	39 e0       	ldi	r19, 0x09	; 9
    25c8:	f9 01       	movw	r30, r18
    25ca:	20 85       	ldd	r18, Z+8	; 0x08
    25cc:	fc 01       	movw	r30, r24
    25ce:	20 83       	st	Z, r18
		I2C_0_status.data_ptr++;
    25d0:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <I2C_0_status+0x2>
    25d4:	90 91 2e 41 	lds	r25, 0x412E	; 0x80412e <I2C_0_status+0x3>
    25d8:	01 96       	adiw	r24, 0x01	; 1
    25da:	80 93 2d 41 	sts	0x412D, r24	; 0x80412d <I2C_0_status+0x2>
    25de:	90 93 2e 41 	sts	0x412E, r25	; 0x80412e <I2C_0_status+0x3>
		TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	99 e0       	ldi	r25, 0x09	; 9
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	39 e0       	ldi	r19, 0x09	; 9
    25ea:	f9 01       	movw	r30, r18
    25ec:	24 81       	ldd	r18, Z+4	; 0x04
    25ee:	22 60       	ori	r18, 0x02	; 2
    25f0:	fc 01       	movw	r30, r24
    25f2:	24 83       	std	Z+4, r18	; 0x04
		return I2C_RX;
    25f4:	84 e0       	ldi	r24, 0x04	; 4
    25f6:	2c c0       	rjmp	.+88     	; 0x2650 <I2C_0_do_I2C_RX+0xf6>
	} else {
		*I2C_0_status.data_ptr = TWI0.MDATA;
    25f8:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <I2C_0_status+0x2>
    25fc:	90 91 2e 41 	lds	r25, 0x412E	; 0x80412e <I2C_0_status+0x3>
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	39 e0       	ldi	r19, 0x09	; 9
    2604:	f9 01       	movw	r30, r18
    2606:	20 85       	ldd	r18, Z+8	; 0x08
    2608:	fc 01       	movw	r30, r24
    260a:	20 83       	st	Z, r18
		I2C_0_status.data_ptr++;
    260c:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <I2C_0_status+0x2>
    2610:	90 91 2e 41 	lds	r25, 0x412E	; 0x80412e <I2C_0_status+0x3>
    2614:	01 96       	adiw	r24, 0x01	; 1
    2616:	80 93 2d 41 	sts	0x412D, r24	; 0x80412d <I2C_0_status+0x2>
    261a:	90 93 2e 41 	sts	0x412E, r25	; 0x80412e <I2C_0_status+0x3>
		I2C_0_status.bufferFree = true;
    261e:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2622:	84 60       	ori	r24, 0x04	; 4
    2624:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
		switch (I2C_0_status.callbackTable[i2c_dataComplete](I2C_0_status.callbackPayload[i2c_dataComplete])) {
    2628:	20 91 37 41 	lds	r18, 0x4137	; 0x804137 <I2C_0_status+0xc>
    262c:	30 91 38 41 	lds	r19, 0x4138	; 0x804138 <I2C_0_status+0xd>
    2630:	80 91 43 41 	lds	r24, 0x4143	; 0x804143 <I2C_0_status+0x18>
    2634:	90 91 44 41 	lds	r25, 0x4144	; 0x804144 <I2C_0_status+0x19>
    2638:	f9 01       	movw	r30, r18
    263a:	09 95       	icall
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	02 97       	sbiw	r24, 0x02	; 2
    2642:	02 97       	sbiw	r24, 0x02	; 2
    2644:	18 f4       	brcc	.+6      	; 0x264c <I2C_0_do_I2C_RX+0xf2>
		case i2c_restart_write:
		case i2c_restart_read:
			return I2C_0_do_I2C_DO_NACK_RESTART();
    2646:	0e 94 48 12 	call	0x2490	; 0x2490 <I2C_0_do_I2C_DO_NACK_RESTART>
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <I2C_0_do_I2C_RX+0xf6>
		default:
		case i2c_continue:
		case i2c_stop:
			return I2C_0_do_I2C_DO_NACK_STOP();
    264c:	0e 94 2d 12 	call	0x245a	; 0x245a <I2C_0_do_I2C_DO_NACK_STOP>
		}
	}
}
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	08 95       	ret

00002656 <I2C_0_do_I2C_TX_EMPTY>:

static i2c_fsm_states_t I2C_0_do_I2C_TX_EMPTY(void)
{
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
	if ((TWI0.MSTATUS & TWI_RXACK_bm)) // Slave replied with NACK
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	99 e0       	ldi	r25, 0x09	; 9
    2662:	fc 01       	movw	r30, r24
    2664:	85 81       	ldd	r24, Z+5	; 0x05
    2666:	88 2f       	mov	r24, r24
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	80 71       	andi	r24, 0x10	; 16
    266c:	99 27       	eor	r25, r25
    266e:	89 2b       	or	r24, r25
    2670:	d9 f0       	breq	.+54     	; 0x26a8 <I2C_0_do_I2C_TX_EMPTY+0x52>
	{
		switch (I2C_0_status.callbackTable[i2c_dataNACK](I2C_0_status.callbackPayload[i2c_dataNACK])) {
    2672:	20 91 3d 41 	lds	r18, 0x413D	; 0x80413d <I2C_0_status+0x12>
    2676:	30 91 3e 41 	lds	r19, 0x413E	; 0x80413e <I2C_0_status+0x13>
    267a:	80 91 49 41 	lds	r24, 0x4149	; 0x804149 <I2C_0_status+0x1e>
    267e:	90 91 4a 41 	lds	r25, 0x414A	; 0x80414a <I2C_0_status+0x1f>
    2682:	f9 01       	movw	r30, r18
    2684:	09 95       	icall
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	91 05       	cpc	r25, r1
    268e:	19 f0       	breq	.+6      	; 0x2696 <I2C_0_do_I2C_TX_EMPTY+0x40>
    2690:	03 97       	sbiw	r24, 0x03	; 3
    2692:	21 f0       	breq	.+8      	; 0x269c <I2C_0_do_I2C_TX_EMPTY+0x46>
    2694:	06 c0       	rjmp	.+12     	; 0x26a2 <I2C_0_do_I2C_TX_EMPTY+0x4c>
		case i2c_restart_read:
			return I2C_0_do_I2C_SEND_RESTART_READ();
    2696:	0e 94 89 11 	call	0x2312	; 0x2312 <I2C_0_do_I2C_SEND_RESTART_READ>
    269a:	2a c0       	rjmp	.+84     	; 0x26f0 <I2C_0_do_I2C_TX_EMPTY+0x9a>
		case i2c_restart_write:
			return I2C_0_do_I2C_SEND_RESTART_WRITE();
    269c:	0e 94 92 11 	call	0x2324	; 0x2324 <I2C_0_do_I2C_SEND_RESTART_WRITE>
    26a0:	27 c0       	rjmp	.+78     	; 0x26f0 <I2C_0_do_I2C_TX_EMPTY+0x9a>
		default:
		case i2c_continue:
		case i2c_stop:
			return I2C_0_do_I2C_SEND_STOP();
    26a2:	0e 94 a4 11 	call	0x2348	; 0x2348 <I2C_0_do_I2C_SEND_STOP>
    26a6:	24 c0       	rjmp	.+72     	; 0x26f0 <I2C_0_do_I2C_TX_EMPTY+0x9a>
		}
	} else {
		I2C_0_status.bufferFree = true;
    26a8:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    26ac:	84 60       	ori	r24, 0x04	; 4
    26ae:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
		switch (I2C_0_status.callbackTable[i2c_dataComplete](I2C_0_status.callbackPayload[i2c_dataComplete])) {
    26b2:	20 91 37 41 	lds	r18, 0x4137	; 0x804137 <I2C_0_status+0xc>
    26b6:	30 91 38 41 	lds	r19, 0x4138	; 0x804138 <I2C_0_status+0xd>
    26ba:	80 91 43 41 	lds	r24, 0x4143	; 0x804143 <I2C_0_status+0x18>
    26be:	90 91 44 41 	lds	r25, 0x4144	; 0x804144 <I2C_0_status+0x19>
    26c2:	f9 01       	movw	r30, r18
    26c4:	09 95       	icall
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	83 30       	cpi	r24, 0x03	; 3
    26cc:	91 05       	cpc	r25, r1
    26ce:	41 f0       	breq	.+16     	; 0x26e0 <I2C_0_do_I2C_TX_EMPTY+0x8a>
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	91 05       	cpc	r25, r1
    26d4:	41 f0       	breq	.+16     	; 0x26e6 <I2C_0_do_I2C_TX_EMPTY+0x90>
    26d6:	02 97       	sbiw	r24, 0x02	; 2
    26d8:	49 f4       	brne	.+18     	; 0x26ec <I2C_0_do_I2C_TX_EMPTY+0x96>
		case i2c_restart_read:
			return I2C_0_do_I2C_SEND_RESTART_READ();
    26da:	0e 94 89 11 	call	0x2312	; 0x2312 <I2C_0_do_I2C_SEND_RESTART_READ>
    26de:	08 c0       	rjmp	.+16     	; 0x26f0 <I2C_0_do_I2C_TX_EMPTY+0x9a>
		case i2c_restart_write:
			return I2C_0_do_I2C_SEND_RESTART_WRITE();
    26e0:	0e 94 92 11 	call	0x2324	; 0x2324 <I2C_0_do_I2C_SEND_RESTART_WRITE>
    26e4:	05 c0       	rjmp	.+10     	; 0x26f0 <I2C_0_do_I2C_TX_EMPTY+0x9a>
		case i2c_continue:
			return I2C_0_do_I2C_TX();
    26e6:	0e 94 59 12 	call	0x24b2	; 0x24b2 <I2C_0_do_I2C_TX>
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <I2C_0_do_I2C_TX_EMPTY+0x9a>
		default:
		case i2c_stop:
			return I2C_0_do_I2C_SEND_STOP();
    26ec:	0e 94 a4 11 	call	0x2348	; 0x2348 <I2C_0_do_I2C_SEND_STOP>
		}
	}
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <I2C_0_do_I2C_BUS_COLLISION>:

static i2c_fsm_states_t I2C_0_do_I2C_BUS_COLLISION(void)
{
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
	// Clear bus collision status flag
	TWI0.MSTATUS |= TWI_ARBLOST_bm;
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	99 e0       	ldi	r25, 0x09	; 9
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	39 e0       	ldi	r19, 0x09	; 9
    2706:	f9 01       	movw	r30, r18
    2708:	25 81       	ldd	r18, Z+5	; 0x05
    270a:	28 60       	ori	r18, 0x08	; 8
    270c:	fc 01       	movw	r30, r24
    270e:	25 83       	std	Z+5, r18	; 0x05
	;
	I2C_0_status.error = I2C_FAIL;
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	80 93 36 41 	sts	0x4136, r24	; 0x804136 <I2C_0_status+0xb>
	switch (I2C_0_status.callbackTable[i2c_writeCollision](I2C_0_status.callbackPayload[i2c_writeCollision])) {
    2716:	20 91 39 41 	lds	r18, 0x4139	; 0x804139 <I2C_0_status+0xe>
    271a:	30 91 3a 41 	lds	r19, 0x413A	; 0x80413a <I2C_0_status+0xf>
    271e:	80 91 45 41 	lds	r24, 0x4145	; 0x804145 <I2C_0_status+0x1a>
    2722:	90 91 46 41 	lds	r25, 0x4146	; 0x804146 <I2C_0_status+0x1b>
    2726:	f9 01       	movw	r30, r18
    2728:	09 95       	icall
    272a:	88 2f       	mov	r24, r24
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	82 30       	cpi	r24, 0x02	; 2
    2730:	91 05       	cpc	r25, r1
    2732:	19 f0       	breq	.+6      	; 0x273a <I2C_0_do_I2C_BUS_COLLISION+0x44>
    2734:	03 97       	sbiw	r24, 0x03	; 3
    2736:	21 f0       	breq	.+8      	; 0x2740 <I2C_0_do_I2C_BUS_COLLISION+0x4a>
    2738:	06 c0       	rjmp	.+12     	; 0x2746 <I2C_0_do_I2C_BUS_COLLISION+0x50>
	case i2c_restart_read:
		return I2C_0_do_I2C_SEND_RESTART_READ();
    273a:	0e 94 89 11 	call	0x2312	; 0x2312 <I2C_0_do_I2C_SEND_RESTART_READ>
    273e:	05 c0       	rjmp	.+10     	; 0x274a <I2C_0_do_I2C_BUS_COLLISION+0x54>
	case i2c_restart_write:
		return I2C_0_do_I2C_SEND_RESTART_WRITE();
    2740:	0e 94 92 11 	call	0x2324	; 0x2324 <I2C_0_do_I2C_SEND_RESTART_WRITE>
    2744:	02 c0       	rjmp	.+4      	; 0x274a <I2C_0_do_I2C_BUS_COLLISION+0x54>
	default:
		return I2C_0_do_I2C_RESET();
    2746:	0e 94 59 11 	call	0x22b2	; 0x22b2 <I2C_0_do_I2C_RESET>
	}
}
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	08 95       	ret

00002750 <I2C_0_do_I2C_BUS_ERROR>:

static i2c_fsm_states_t I2C_0_do_I2C_BUS_ERROR(void)
{
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_FLUSH_bm;
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	99 e0       	ldi	r25, 0x09	; 9
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	39 e0       	ldi	r19, 0x09	; 9
    2760:	f9 01       	movw	r30, r18
    2762:	24 81       	ldd	r18, Z+4	; 0x04
    2764:	28 60       	ori	r18, 0x08	; 8
    2766:	fc 01       	movw	r30, r24
    2768:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	99 e0       	ldi	r25, 0x09	; 9
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	39 e0       	ldi	r19, 0x09	; 9
    2772:	f9 01       	movw	r30, r18
    2774:	25 81       	ldd	r18, Z+5	; 0x05
    2776:	21 60       	ori	r18, 0x01	; 1
    2778:	fc 01       	movw	r30, r24
    277a:	25 83       	std	Z+5, r18	; 0x05
	I2C_0_status.busy  = false;
    277c:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2780:	8e 7f       	andi	r24, 0xFE	; 254
    2782:	80 93 2b 41 	sts	0x412B, r24	; 0x80412b <I2C_0_status>
	I2C_0_status.error = I2C_FAIL;
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	80 93 36 41 	sts	0x4136, r24	; 0x804136 <I2C_0_status+0xb>
	return I2C_RESET; // park the FSM on reset
    278c:	8e e0       	ldi	r24, 0x0E	; 14
}
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <__vector_17>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    2794:	1f 92       	push	r1
    2796:	0f 92       	push	r0
    2798:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    279c:	0f 92       	push	r0
    279e:	11 24       	eor	r1, r1
    27a0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    27a4:	0f 92       	push	r0
    27a6:	2f 93       	push	r18
    27a8:	3f 93       	push	r19
    27aa:	4f 93       	push	r20
    27ac:	5f 93       	push	r21
    27ae:	6f 93       	push	r22
    27b0:	7f 93       	push	r23
    27b2:	8f 93       	push	r24
    27b4:	9f 93       	push	r25
    27b6:	af 93       	push	r26
    27b8:	bf 93       	push	r27
    27ba:	ef 93       	push	r30
    27bc:	ff 93       	push	r31
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
	I2C_0_master_isr();
    27c6:	0e 94 fd 13 	call	0x27fa	; 0x27fa <I2C_0_master_isr>
}
    27ca:	00 00       	nop
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	ff 91       	pop	r31
    27d2:	ef 91       	pop	r30
    27d4:	bf 91       	pop	r27
    27d6:	af 91       	pop	r26
    27d8:	9f 91       	pop	r25
    27da:	8f 91       	pop	r24
    27dc:	7f 91       	pop	r23
    27de:	6f 91       	pop	r22
    27e0:	5f 91       	pop	r21
    27e2:	4f 91       	pop	r20
    27e4:	3f 91       	pop	r19
    27e6:	2f 91       	pop	r18
    27e8:	0f 90       	pop	r0
    27ea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    27ee:	0f 90       	pop	r0
    27f0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    27f4:	0f 90       	pop	r0
    27f6:	1f 90       	pop	r1
    27f8:	18 95       	reti

000027fa <I2C_0_master_isr>:

void I2C_0_master_isr(void)
{
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
	TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	99 e0       	ldi	r25, 0x09	; 9
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	39 e0       	ldi	r19, 0x09	; 9
    280a:	f9 01       	movw	r30, r18
    280c:	25 81       	ldd	r18, Z+5	; 0x05
    280e:	20 6c       	ori	r18, 0xC0	; 192
    2810:	fc 01       	movw	r30, r24
    2812:	25 83       	std	Z+5, r18	; 0x05

	// NOTE: We are ignoring the Write Collision flag.

	// Address phase received NACK from slave, override next state
	if (I2C_0_status.addressNACKCheck && (TWI0.MSTATUS & TWI_RXACK_bm)) {
    2814:	80 91 2b 41 	lds	r24, 0x412B	; 0x80412b <I2C_0_status>
    2818:	88 70       	andi	r24, 0x08	; 8
    281a:	88 23       	and	r24, r24
    281c:	69 f0       	breq	.+26     	; 0x2838 <I2C_0_master_isr+0x3e>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	99 e0       	ldi	r25, 0x09	; 9
    2822:	fc 01       	movw	r30, r24
    2824:	85 81       	ldd	r24, Z+5	; 0x05
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	80 71       	andi	r24, 0x10	; 16
    282c:	99 27       	eor	r25, r25
    282e:	89 2b       	or	r24, r25
    2830:	19 f0       	breq	.+6      	; 0x2838 <I2C_0_master_isr+0x3e>
		I2C_0_status.state = I2C_ADDRESS_NACK; // State Override
    2832:	8f e0       	ldi	r24, 0x0F	; 15
    2834:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
	}

	// Bus arbitration lost to another master, override next state
	if (TWI0.MSTATUS & TWI_ARBLOST_bm) {
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	99 e0       	ldi	r25, 0x09	; 9
    283c:	fc 01       	movw	r30, r24
    283e:	85 81       	ldd	r24, Z+5	; 0x05
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	88 70       	andi	r24, 0x08	; 8
    2846:	99 27       	eor	r25, r25
    2848:	89 2b       	or	r24, r25
    284a:	19 f0       	breq	.+6      	; 0x2852 <I2C_0_master_isr+0x58>
		I2C_0_status.state = I2C_BUS_COLLISION; // State Override
    284c:	80 e1       	ldi	r24, 0x10	; 16
    284e:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
	}

	// Bus error, override next state
	if (TWI0.MSTATUS & TWI_BUSERR_bm) {
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	99 e0       	ldi	r25, 0x09	; 9
    2856:	fc 01       	movw	r30, r24
    2858:	85 81       	ldd	r24, Z+5	; 0x05
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	84 70       	andi	r24, 0x04	; 4
    2860:	99 27       	eor	r25, r25
    2862:	89 2b       	or	r24, r25
    2864:	19 f0       	breq	.+6      	; 0x286c <I2C_0_master_isr+0x72>
		I2C_0_status.state = I2C_BUS_ERROR; // State Override
    2866:	81 e1       	ldi	r24, 0x11	; 17
    2868:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
	}

	I2C_0_status.state = I2C_0_fsmStateTable[I2C_0_status.state]();
    286c:	80 91 35 41 	lds	r24, 0x4135	; 0x804135 <I2C_0_status+0xa>
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	80 56       	subi	r24, 0x60	; 96
    287a:	9f 4b       	sbci	r25, 0xBF	; 191
    287c:	fc 01       	movw	r30, r24
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	fc 01       	movw	r30, r24
    2884:	09 95       	icall
    2886:	80 93 35 41 	sts	0x4135, r24	; 0x804135 <I2C_0_status+0xa>
}
    288a:	00 00       	nop
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	08 95       	ret

00002892 <I2C_0_return_stop>:

/************************************************************************/
/* Helper Functions                                                     */
/************************************************************************/
static i2c_operations_t I2C_0_return_stop(void *p)
{
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	00 d0       	rcall	.+0      	; 0x2898 <I2C_0_return_stop+0x6>
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	89 83       	std	Y+1, r24	; 0x01
    289e:	9a 83       	std	Y+2, r25	; 0x02
	return i2c_stop;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
}
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <I2C_0_return_reset>:

static i2c_operations_t I2C_0_return_reset(void *p)
{
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <I2C_0_return_reset+0x6>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	9a 83       	std	Y+2, r25	; 0x02
	return i2c_reset_link;
    28ba:	85 e0       	ldi	r24, 0x05	; 5
}
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	08 95       	ret

000028c6 <I2C_0_set_callback>:

static void I2C_0_set_callback(i2c_callback_index idx, i2c_callback cb, void *p)
{
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	25 97       	sbiw	r28, 0x05	; 5
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	6a 83       	std	Y+2, r22	; 0x02
    28d8:	7b 83       	std	Y+3, r23	; 0x03
    28da:	4c 83       	std	Y+4, r20	; 0x04
    28dc:	5d 83       	std	Y+5, r21	; 0x05
	if (cb) {
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	89 2b       	or	r24, r25
    28e4:	d9 f0       	breq	.+54     	; 0x291c <I2C_0_set_callback+0x56>
		I2C_0_status.callbackTable[idx]   = cb;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	88 2f       	mov	r24, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	06 96       	adiw	r24, 0x06	; 6
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	85 5d       	subi	r24, 0xD5	; 213
    28f4:	9e 4b       	sbci	r25, 0xBE	; 190
    28f6:	2a 81       	ldd	r18, Y+2	; 0x02
    28f8:	3b 81       	ldd	r19, Y+3	; 0x03
    28fa:	fc 01       	movw	r30, r24
    28fc:	20 83       	st	Z, r18
    28fe:	31 83       	std	Z+1, r19	; 0x01
		I2C_0_status.callbackPayload[idx] = p;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	88 2f       	mov	r24, r24
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0c 96       	adiw	r24, 0x0c	; 12
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	85 5d       	subi	r24, 0xD5	; 213
    290e:	9e 4b       	sbci	r25, 0xBE	; 190
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	fc 01       	movw	r30, r24
    2916:	20 83       	st	Z, r18
    2918:	31 83       	std	Z+1, r19	; 0x01
	} else {
		I2C_0_status.callbackTable[idx]   = I2C_0_return_stop;
		I2C_0_status.callbackPayload[idx] = NULL;
	}
}
    291a:	18 c0       	rjmp	.+48     	; 0x294c <I2C_0_set_callback+0x86>
{
	if (cb) {
		I2C_0_status.callbackTable[idx]   = cb;
		I2C_0_status.callbackPayload[idx] = p;
	} else {
		I2C_0_status.callbackTable[idx]   = I2C_0_return_stop;
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	06 96       	adiw	r24, 0x06	; 6
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	85 5d       	subi	r24, 0xD5	; 213
    292a:	9e 4b       	sbci	r25, 0xBE	; 190
    292c:	29 e4       	ldi	r18, 0x49	; 73
    292e:	34 e1       	ldi	r19, 0x14	; 20
    2930:	fc 01       	movw	r30, r24
    2932:	20 83       	st	Z, r18
    2934:	31 83       	std	Z+1, r19	; 0x01
		I2C_0_status.callbackPayload[idx] = NULL;
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0c 96       	adiw	r24, 0x0c	; 12
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	85 5d       	subi	r24, 0xD5	; 213
    2944:	9e 4b       	sbci	r25, 0xBE	; 190
    2946:	fc 01       	movw	r30, r24
    2948:	10 82       	st	Z, r1
    294a:	11 82       	std	Z+1, r1	; 0x01
	}
}
    294c:	00 00       	nop
    294e:	25 96       	adiw	r28, 0x05	; 5
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	08 95       	ret

0000295a <I2C_0_wr1RegCompleteHandler>:

#include <i2c_master.h>
#include <i2c_simple_master.h>

static i2c_operations_t I2C_0_wr1RegCompleteHandler(void *p)
{
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	00 d0       	rcall	.+0      	; 0x2960 <I2C_0_wr1RegCompleteHandler+0x6>
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	9a 83       	std	Y+2, r25	; 0x02
	I2C_0_set_buffer(p, 1);
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	0e 94 03 11 	call	0x2206	; 0x2206 <I2C_0_set_buffer>
	I2C_0_set_data_complete_callback(NULL, NULL);
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <I2C_0_set_data_complete_callback>
	return i2c_continue;
    2980:	84 e0       	ldi	r24, 0x04	; 4
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <I2C_0_write1ByteRegister>:

i2c_error_t I2C_0_write1ByteRegister(i2c_address_t address, uint8_t reg, uint8_t data)
{
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	25 97       	sbiw	r28, 0x05	; 5
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	8b 83       	std	Y+3, r24	; 0x03
    299c:	6c 83       	std	Y+4, r22	; 0x04
    299e:	4d 83       	std	Y+5, r20	; 0x05
	/* timeout is used to get out of twim_release, when there is no device connected to the bus*/
	uint16_t timeout = I2C_TIMEOUT;
    29a0:	80 e1       	ldi	r24, 0x10	; 16
    29a2:	97 e2       	ldi	r25, 0x27	; 39
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	9a 83       	std	Y+2, r25	; 0x02

	while (I2C_BUSY == I2C_0_open(address) && --timeout)
    29a8:	00 00       	nop
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	0e 94 13 10 	call	0x2026	; 0x2026 <I2C_0_open>
    29b0:	81 30       	cpi	r24, 0x01	; 1
    29b2:	49 f4       	brne	.+18     	; 0x29c6 <I2C_0_write1ByteRegister+0x3a>
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	89 2b       	or	r24, r25
    29c4:	91 f7       	brne	.-28     	; 0x29aa <I2C_0_write1ByteRegister+0x1e>
		; // sit here until we get the bus..
	if (!timeout)
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	89 2b       	or	r24, r25
    29cc:	11 f4       	brne	.+4      	; 0x29d2 <I2C_0_write1ByteRegister+0x46>
		return I2C_BUSY;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	2e c0       	rjmp	.+92     	; 0x2a2e <I2C_0_write1ByteRegister+0xa2>
	I2C_0_set_data_complete_callback(I2C_0_wr1RegCompleteHandler, &data);
    29d2:	ce 01       	movw	r24, r28
    29d4:	05 96       	adiw	r24, 0x05	; 5
    29d6:	bc 01       	movw	r22, r24
    29d8:	8d ea       	ldi	r24, 0xAD	; 173
    29da:	94 e1       	ldi	r25, 0x14	; 20
    29dc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <I2C_0_set_data_complete_callback>
	I2C_0_set_buffer(&reg, 1);
    29e0:	ce 01       	movw	r24, r28
    29e2:	04 96       	adiw	r24, 0x04	; 4
    29e4:	61 e0       	ldi	r22, 0x01	; 1
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	0e 94 03 11 	call	0x2206	; 0x2206 <I2C_0_set_buffer>
	I2C_0_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	8d e1       	ldi	r24, 0x1D	; 29
    29f2:	95 e1       	ldi	r25, 0x15	; 21
    29f4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <I2C_0_set_address_nack_callback>
	I2C_0_master_write();
    29f8:	0e 94 4f 11 	call	0x229e	; 0x229e <I2C_0_master_write>
	timeout = I2C_TIMEOUT;
    29fc:	80 e1       	ldi	r24, 0x10	; 16
    29fe:	97 e2       	ldi	r25, 0x27	; 39
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	9a 83       	std	Y+2, r25	; 0x02
	while (I2C_BUSY == I2C_0_close() && --timeout)
    2a04:	00 00       	nop
    2a06:	0e 94 c3 10 	call	0x2186	; 0x2186 <I2C_0_close>
    2a0a:	81 30       	cpi	r24, 0x01	; 1
    2a0c:	49 f4       	brne	.+18     	; 0x2a20 <I2C_0_write1ByteRegister+0x94>
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1c:	89 2b       	or	r24, r25
    2a1e:	99 f7       	brne	.-26     	; 0x2a06 <I2C_0_write1ByteRegister+0x7a>
		; // sit here until finished.
	if (!timeout)
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	89 2b       	or	r24, r25
    2a26:	11 f4       	brne	.+4      	; 0x2a2c <I2C_0_write1ByteRegister+0xa0>
		return I2C_FAIL;
    2a28:	82 e0       	ldi	r24, 0x02	; 2
    2a2a:	01 c0       	rjmp	.+2      	; 0x2a2e <I2C_0_write1ByteRegister+0xa2>

	return I2C_NOERR;
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
}
    2a2e:	25 96       	adiw	r28, 0x05	; 5
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <i2c_cb_restart_write>:
{
	return i2c_reset_link;
}

i2c_operations_t i2c_cb_restart_write(void *p)
{
    2a3a:	cf 93       	push	r28
    2a3c:	df 93       	push	r29
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <i2c_cb_restart_write+0x6>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
	return i2c_restart_write;
    2a48:	83 e0       	ldi	r24, 0x03	; 3
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	08 95       	ret

00002a54 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    2a54:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    2a56:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    2a58:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    2a5a:	40 83       	st	Z, r20
	ret                             // Return to caller
    2a5c:	08 95       	ret

00002a5e <Timer_init>:
/**
 * \brief Initialize rtc interface
 * \return Initialization status.
 */
int8_t Timer_init()
{
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    2a66:	00 00       	nop
    2a68:	80 e4       	ldi	r24, 0x40	; 64
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	81 81       	ldd	r24, Z+1	; 0x01
    2a70:	88 23       	and	r24, r24
    2a72:	d1 f7       	brne	.-12     	; 0x2a68 <Timer_init+0xa>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    2a74:	80 e4       	ldi	r24, 0x40	; 64
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	21 e8       	ldi	r18, 0x81	; 129
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	20 83       	st	Z, r18
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    2a7e:	80 e4       	ldi	r24, 0x40	; 64
    2a80:	91 e0       	ldi	r25, 0x01	; 1
    2a82:	fc 01       	movw	r30, r24
    2a84:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
    2a86:	80 e4       	ldi	r24, 0x40	; 64
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	22 e0       	ldi	r18, 0x02	; 2
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	22 83       	std	Z+2, r18	; 0x02

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
    2a90:	80 e0       	ldi	r24, 0x00	; 0
}
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	08 95       	ret

00002a98 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
}
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <USART_init>:
	USART_0_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_0_rxbuf[tmptail];
}
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	80 e2       	ldi	r24, 0x20	; 32
    2ab2:	98 e0       	ldi	r25, 0x08	; 8
    2ab4:	24 ec       	ldi	r18, 0xC4	; 196
    2ab6:	39 e0       	ldi	r19, 0x09	; 9
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 87       	std	Z+8, r18	; 0x08
    2abc:	31 87       	std	Z+9, r19	; 0x09
    2abe:	80 e2       	ldi	r24, 0x20	; 32
    2ac0:	98 e0       	ldi	r25, 0x08	; 8
    2ac2:	20 ec       	ldi	r18, 0xC0	; 192
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	26 83       	std	Z+6, r18	; 0x06
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <USART_is_tx_ready>:
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	80 e2       	ldi	r24, 0x20	; 32
    2ada:	98 e0       	ldi	r25, 0x08	; 8
    2adc:	fc 01       	movw	r30, r24
    2ade:	84 81       	ldd	r24, Z+4	; 0x04
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	80 72       	andi	r24, 0x20	; 32
    2ae6:	99 27       	eor	r25, r25
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	89 2b       	or	r24, r25
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <USART_is_tx_ready+0x20>
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	82 2f       	mov	r24, r18
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <USART_is_tx_busy>:
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	80 e2       	ldi	r24, 0x20	; 32
    2b02:	98 e0       	ldi	r25, 0x08	; 8
    2b04:	fc 01       	movw	r30, r24
    2b06:	84 81       	ldd	r24, Z+4	; 0x04
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	80 74       	andi	r24, 0x40	; 64
    2b0e:	99 27       	eor	r25, r25
    2b10:	21 e0       	ldi	r18, 0x01	; 1
    2b12:	89 2b       	or	r24, r25
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <USART_is_tx_busy+0x20>
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	82 2f       	mov	r24, r18
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	08 95       	ret

00002b20 <USART_write>:
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	1f 92       	push	r1
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	00 00       	nop
    2b2e:	80 e2       	ldi	r24, 0x20	; 32
    2b30:	98 e0       	ldi	r25, 0x08	; 8
    2b32:	fc 01       	movw	r30, r24
    2b34:	84 81       	ldd	r24, Z+4	; 0x04
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	80 72       	andi	r24, 0x20	; 32
    2b3c:	99 27       	eor	r25, r25
    2b3e:	89 2b       	or	r24, r25
    2b40:	b1 f3       	breq	.-20     	; 0x2b2e <USART_write+0xe>
    2b42:	80 e2       	ldi	r24, 0x20	; 32
    2b44:	98 e0       	ldi	r25, 0x08	; 8
    2b46:	29 81       	ldd	r18, Y+1	; 0x01
    2b48:	fc 01       	movw	r30, r24
    2b4a:	22 83       	std	Z+2, r18	; 0x02
    2b4c:	00 00       	nop
    2b4e:	0f 90       	pop	r0
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

00002b56 <USART_0_printCHAR>:
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <USART_0_printCHAR+0x6>
    2b5c:	1f 92       	push	r1
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	6a 83       	std	Y+2, r22	; 0x02
    2b66:	7b 83       	std	Y+3, r23	; 0x03
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <USART_0_write>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	23 96       	adiw	r28, 0x03	; 3
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	08 95       	ret

00002b7e <USART_0_default_rx_isr_cb>:
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <USART_0_default_rx_isr_cb+0x6>
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	80 e4       	ldi	r24, 0x40	; 64
    2b8a:	98 e0       	ldi	r25, 0x08	; 8
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	80 81       	ld	r24, Z
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	80 91 57 41 	lds	r24, 0x4157	; 0x804157 <USART_0_rx_head>
    2b96:	8f 5f       	subi	r24, 0xFF	; 255
    2b98:	87 70       	andi	r24, 0x07	; 7
    2b9a:	8a 83       	std	Y+2, r24	; 0x02
    2b9c:	80 91 58 41 	lds	r24, 0x4158	; 0x804158 <USART_0_rx_tail>
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	98 17       	cp	r25, r24
    2ba4:	81 f0       	breq	.+32     	; 0x2bc6 <USART_0_default_rx_isr_cb+0x48>
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	80 93 57 41 	sts	0x4157, r24	; 0x804157 <USART_0_rx_head>
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	88 2f       	mov	r24, r24
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	81 5b       	subi	r24, 0xB1	; 177
    2bb4:	9e 4b       	sbci	r25, 0xBE	; 190
    2bb6:	29 81       	ldd	r18, Y+1	; 0x01
    2bb8:	fc 01       	movw	r30, r24
    2bba:	20 83       	st	Z, r18
    2bbc:	80 91 59 41 	lds	r24, 0x4159	; 0x804159 <USART_0_rx_elements>
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	80 93 59 41 	sts	0x4159, r24	; 0x804159 <USART_0_rx_elements>
    2bc6:	00 00       	nop
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	08 95       	ret

00002bd2 <USART_0_default_udre_isr_cb>:
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	1f 92       	push	r1
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	80 91 64 41 	lds	r24, 0x4164	; 0x804164 <USART_0_tx_elements>
    2be0:	88 23       	and	r24, r24
    2be2:	c1 f0       	breq	.+48     	; 0x2c14 <USART_0_default_udre_isr_cb+0x42>
    2be4:	80 91 63 41 	lds	r24, 0x4163	; 0x804163 <USART_0_tx_tail>
    2be8:	8f 5f       	subi	r24, 0xFF	; 255
    2bea:	87 70       	andi	r24, 0x07	; 7
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	80 93 63 41 	sts	0x4163, r24	; 0x804163 <USART_0_tx_tail>
    2bf4:	80 e4       	ldi	r24, 0x40	; 64
    2bf6:	98 e0       	ldi	r25, 0x08	; 8
    2bf8:	29 81       	ldd	r18, Y+1	; 0x01
    2bfa:	22 2f       	mov	r18, r18
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	26 5a       	subi	r18, 0xA6	; 166
    2c00:	3e 4b       	sbci	r19, 0xBE	; 190
    2c02:	f9 01       	movw	r30, r18
    2c04:	20 81       	ld	r18, Z
    2c06:	fc 01       	movw	r30, r24
    2c08:	22 83       	std	Z+2, r18	; 0x02
    2c0a:	80 91 64 41 	lds	r24, 0x4164	; 0x804164 <USART_0_tx_elements>
    2c0e:	81 50       	subi	r24, 0x01	; 1
    2c10:	80 93 64 41 	sts	0x4164, r24	; 0x804164 <USART_0_tx_elements>
    2c14:	80 91 64 41 	lds	r24, 0x4164	; 0x804164 <USART_0_tx_elements>
    2c18:	88 23       	and	r24, r24
    2c1a:	49 f4       	brne	.+18     	; 0x2c2e <USART_0_default_udre_isr_cb+0x5c>
    2c1c:	80 e4       	ldi	r24, 0x40	; 64
    2c1e:	98 e0       	ldi	r25, 0x08	; 8
    2c20:	20 e4       	ldi	r18, 0x40	; 64
    2c22:	38 e0       	ldi	r19, 0x08	; 8
    2c24:	f9 01       	movw	r30, r18
    2c26:	25 81       	ldd	r18, Z+5	; 0x05
    2c28:	2f 7d       	andi	r18, 0xDF	; 223
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	25 83       	std	Z+5, r18	; 0x05
    2c2e:	00 00       	nop
    2c30:	0f 90       	pop	r0
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	08 95       	ret

00002c38 <__vector_37>:
    2c38:	1f 92       	push	r1
    2c3a:	0f 92       	push	r0
    2c3c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2c40:	0f 92       	push	r0
    2c42:	11 24       	eor	r1, r1
    2c44:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2c48:	0f 92       	push	r0
    2c4a:	2f 93       	push	r18
    2c4c:	3f 93       	push	r19
    2c4e:	4f 93       	push	r20
    2c50:	5f 93       	push	r21
    2c52:	6f 93       	push	r22
    2c54:	7f 93       	push	r23
    2c56:	8f 93       	push	r24
    2c58:	9f 93       	push	r25
    2c5a:	af 93       	push	r26
    2c5c:	bf 93       	push	r27
    2c5e:	ef 93       	push	r30
    2c60:	ff 93       	push	r31
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	80 91 d2 40 	lds	r24, 0x40D2	; 0x8040d2 <USART_0_rx_isr_cb>
    2c6e:	90 91 d3 40 	lds	r25, 0x40D3	; 0x8040d3 <USART_0_rx_isr_cb+0x1>
    2c72:	89 2b       	or	r24, r25
    2c74:	31 f0       	breq	.+12     	; 0x2c82 <__vector_37+0x4a>
    2c76:	80 91 d2 40 	lds	r24, 0x40D2	; 0x8040d2 <USART_0_rx_isr_cb>
    2c7a:	90 91 d3 40 	lds	r25, 0x40D3	; 0x8040d3 <USART_0_rx_isr_cb+0x1>
    2c7e:	fc 01       	movw	r30, r24
    2c80:	09 95       	icall
    2c82:	00 00       	nop
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	ff 91       	pop	r31
    2c8a:	ef 91       	pop	r30
    2c8c:	bf 91       	pop	r27
    2c8e:	af 91       	pop	r26
    2c90:	9f 91       	pop	r25
    2c92:	8f 91       	pop	r24
    2c94:	7f 91       	pop	r23
    2c96:	6f 91       	pop	r22
    2c98:	5f 91       	pop	r21
    2c9a:	4f 91       	pop	r20
    2c9c:	3f 91       	pop	r19
    2c9e:	2f 91       	pop	r18
    2ca0:	0f 90       	pop	r0
    2ca2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2ca6:	0f 90       	pop	r0
    2ca8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2cac:	0f 90       	pop	r0
    2cae:	1f 90       	pop	r1
    2cb0:	18 95       	reti

00002cb2 <__vector_38>:
    2cb2:	1f 92       	push	r1
    2cb4:	0f 92       	push	r0
    2cb6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2cba:	0f 92       	push	r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2cc2:	0f 92       	push	r0
    2cc4:	2f 93       	push	r18
    2cc6:	3f 93       	push	r19
    2cc8:	4f 93       	push	r20
    2cca:	5f 93       	push	r21
    2ccc:	6f 93       	push	r22
    2cce:	7f 93       	push	r23
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	ef 93       	push	r30
    2cda:	ff 93       	push	r31
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	80 91 d4 40 	lds	r24, 0x40D4	; 0x8040d4 <USART_0_udre_isr_cb>
    2ce8:	90 91 d5 40 	lds	r25, 0x40D5	; 0x8040d5 <USART_0_udre_isr_cb+0x1>
    2cec:	89 2b       	or	r24, r25
    2cee:	31 f0       	breq	.+12     	; 0x2cfc <__vector_38+0x4a>
    2cf0:	80 91 d4 40 	lds	r24, 0x40D4	; 0x8040d4 <USART_0_udre_isr_cb>
    2cf4:	90 91 d5 40 	lds	r25, 0x40D5	; 0x8040d5 <USART_0_udre_isr_cb+0x1>
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	09 95       	icall
    2cfc:	00 00       	nop
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	ff 91       	pop	r31
    2d04:	ef 91       	pop	r30
    2d06:	bf 91       	pop	r27
    2d08:	af 91       	pop	r26
    2d0a:	9f 91       	pop	r25
    2d0c:	8f 91       	pop	r24
    2d0e:	7f 91       	pop	r23
    2d10:	6f 91       	pop	r22
    2d12:	5f 91       	pop	r21
    2d14:	4f 91       	pop	r20
    2d16:	3f 91       	pop	r19
    2d18:	2f 91       	pop	r18
    2d1a:	0f 90       	pop	r0
    2d1c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2d20:	0f 90       	pop	r0
    2d22:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2d26:	0f 90       	pop	r0
    2d28:	1f 90       	pop	r1
    2d2a:	18 95       	reti

00002d2c <USART_0_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <USART_0_write+0x6>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
    2d38:	80 91 62 41 	lds	r24, 0x4162	; 0x804162 <USART_0_tx_head>
    2d3c:	8f 5f       	subi	r24, 0xFF	; 255
    2d3e:	87 70       	andi	r24, 0x07	; 7
    2d40:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
    2d42:	00 00       	nop
    2d44:	80 91 64 41 	lds	r24, 0x4164	; 0x804164 <USART_0_tx_elements>
    2d48:	88 30       	cpi	r24, 0x08	; 8
    2d4a:	e1 f3       	breq	.-8      	; 0x2d44 <USART_0_write+0x18>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	88 2f       	mov	r24, r24
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	86 5a       	subi	r24, 0xA6	; 166
    2d54:	9e 4b       	sbci	r25, 0xBE	; 190
    2d56:	2a 81       	ldd	r18, Y+2	; 0x02
    2d58:	fc 01       	movw	r30, r24
    2d5a:	20 83       	st	Z, r18
	/* Store new index */
	USART_0_tx_head = tmphead;
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	80 93 62 41 	sts	0x4162, r24	; 0x804162 <USART_0_tx_head>
	ENTER_CRITICAL(W);
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	0f 92       	push	r0
	USART_0_tx_elements++;
    2d68:	80 91 64 41 	lds	r24, 0x4164	; 0x804164 <USART_0_tx_elements>
    2d6c:	8f 5f       	subi	r24, 0xFF	; 255
    2d6e:	80 93 64 41 	sts	0x4164, r24	; 0x804164 <USART_0_tx_elements>
	EXIT_CRITICAL(W);
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART2.CTRLA |= (1 << USART_DREIE_bp);
    2d76:	80 e4       	ldi	r24, 0x40	; 64
    2d78:	98 e0       	ldi	r25, 0x08	; 8
    2d7a:	20 e4       	ldi	r18, 0x40	; 64
    2d7c:	38 e0       	ldi	r19, 0x08	; 8
    2d7e:	f9 01       	movw	r30, r18
    2d80:	25 81       	ldd	r18, Z+5	; 0x05
    2d82:	20 62       	ori	r18, 0x20	; 32
    2d84:	fc 01       	movw	r30, r24
    2d86:	25 83       	std	Z+5, r18	; 0x05
}
    2d88:	00 00       	nop
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	08 95       	ret

00002d94 <USART_0_init>:
 * \return Initialization status.
 * \retval 0 the USART init was successful
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	1f 92       	push	r1
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62

	USART2.BAUD = (uint16_t)USART2_BAUD_RATE(9600); /* set baud rate register */
    2d9e:	80 e4       	ldi	r24, 0x40	; 64
    2da0:	98 e0       	ldi	r25, 0x08	; 8
    2da2:	20 e1       	ldi	r18, 0x10	; 16
    2da4:	37 e2       	ldi	r19, 0x27	; 39
    2da6:	fc 01       	movw	r30, r24
    2da8:	20 87       	std	Z+8, r18	; 0x08
    2daa:	31 87       	std	Z+9, r19	; 0x09

	USART2.CTRLA = 0 << USART_ABEIE_bp      /* Auto-baud Error Interrupt Enable: disabled */
    2dac:	80 e4       	ldi	r24, 0x40	; 64
    2dae:	98 e0       	ldi	r25, 0x08	; 8
    2db0:	20 e8       	ldi	r18, 0x80	; 128
    2db2:	fc 01       	movw	r30, r24
    2db4:	25 83       	std	Z+5, r18	; 0x05
	               | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp    /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp    /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp;   /* Transmit Complete Interrupt Enable: disabled */

	USART2.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    2db6:	80 e4       	ldi	r24, 0x40	; 64
    2db8:	98 e0       	ldi	r25, 0x08	; 8
    2dba:	20 ec       	ldi	r18, 0xC0	; 192
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	26 83       	std	Z+6, r18	; 0x06
	// USART2.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;
    2dc0:	19 82       	std	Y+1, r1	; 0x01

	USART_0_rx_tail     = x;
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	80 93 58 41 	sts	0x4158, r24	; 0x804158 <USART_0_rx_tail>
	USART_0_rx_head     = x;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	80 93 57 41 	sts	0x4157, r24	; 0x804157 <USART_0_rx_head>
	USART_0_rx_elements = x;
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	80 93 59 41 	sts	0x4159, r24	; 0x804159 <USART_0_rx_elements>
	USART_0_tx_tail     = x;
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	80 93 63 41 	sts	0x4163, r24	; 0x804163 <USART_0_tx_tail>
	USART_0_tx_head     = x;
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	80 93 62 41 	sts	0x4162, r24	; 0x804162 <USART_0_tx_head>
	USART_0_tx_elements = x;
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	80 93 64 41 	sts	0x4164, r24	; 0x804164 <USART_0_tx_elements>

#if defined(__GNUC__)
	stdout = &USART_0_stream;
    2de6:	84 ec       	ldi	r24, 0xC4	; 196
    2de8:	90 e4       	ldi	r25, 0x40	; 64
    2dea:	80 93 b8 41 	sts	0x41B8, r24	; 0x8041b8 <__iob+0x2>
    2dee:	90 93 b9 41 	sts	0x41B9, r25	; 0x8041b9 <__iob+0x3>
#endif

	return 0;
    2df2:	80 e0       	ldi	r24, 0x00	; 0
}
    2df4:	0f 90       	pop	r0
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
    2dfa:	08 95       	ret

00002dfc <ZCD_0_init>:
 * \brief Initialize zcd interface
 *
 * \return Initialization status.
 */
int8_t ZCD_0_init()
{
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << ZCD_RUNSTDBY_bp /* Setting: disabled */
	//		 | 0 << ZCD_INVERT_bp; /* Setting: disabled */

	// ZCD0.INTCTRL = ZCD_INTMODE_NONE_gc; /* No interrupt */

	return 0;
    2e04:	80 e0       	ldi	r24, 0x00	; 0
}
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	08 95       	ret

00002e0c <check_for_aks_block>:
    2e0c:	cf 92       	push	r12
    2e0e:	df 92       	push	r13
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	ec 01       	movw	r28, r24
    2e1c:	ae 81       	ldd	r26, Y+6	; 0x06
    2e1e:	bf 81       	ldd	r27, Y+7	; 0x07
    2e20:	eb 01       	movw	r28, r22
    2e22:	cc 0f       	add	r28, r28
    2e24:	dd 1f       	adc	r29, r29
    2e26:	c6 0f       	add	r28, r22
    2e28:	d7 1f       	adc	r29, r23
    2e2a:	ca 0f       	add	r28, r26
    2e2c:	db 1f       	adc	r29, r27
    2e2e:	fa 80       	ldd	r15, Y+2	; 0x02
    2e30:	fc 01       	movw	r30, r24
    2e32:	44 81       	ldd	r20, Z+4	; 0x04
    2e34:	55 81       	ldd	r21, Z+5	; 0x05
    2e36:	e6 e0       	ldi	r30, 0x06	; 6
    2e38:	e6 9f       	mul	r30, r22
    2e3a:	90 01       	movw	r18, r0
    2e3c:	e7 9f       	mul	r30, r23
    2e3e:	30 0d       	add	r19, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	8a 01       	movw	r16, r20
    2e44:	02 0f       	add	r16, r18
    2e46:	13 1f       	adc	r17, r19
    2e48:	f8 01       	movw	r30, r16
    2e4a:	22 81       	ldd	r18, Z+2	; 0x02
    2e4c:	33 81       	ldd	r19, Z+3	; 0x03
    2e4e:	f9 01       	movw	r30, r18
    2e50:	21 81       	ldd	r18, Z+1	; 0x01
    2e52:	32 81       	ldd	r19, Z+2	; 0x02
    2e54:	f8 01       	movw	r30, r16
    2e56:	04 81       	ldd	r16, Z+4	; 0x04
    2e58:	15 81       	ldd	r17, Z+5	; 0x05
    2e5a:	20 1b       	sub	r18, r16
    2e5c:	31 0b       	sbc	r19, r17
    2e5e:	e8 81       	ld	r30, Y
    2e60:	2e 1b       	sub	r18, r30
    2e62:	31 09       	sbc	r19, r1
    2e64:	ec 01       	movw	r28, r24
    2e66:	ea 81       	ldd	r30, Y+2	; 0x02
    2e68:	fb 81       	ldd	r31, Y+3	; 0x03
    2e6a:	00 81       	ld	r16, Z
    2e6c:	11 81       	ldd	r17, Z+1	; 0x01
    2e6e:	fa 01       	movw	r30, r20
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	50 e0       	ldi	r21, 0x00	; 0
    2e74:	40 17       	cp	r20, r16
    2e76:	51 07       	cpc	r21, r17
    2e78:	39 f1       	breq	.+78     	; 0x2ec8 <check_for_aks_block+0xbc>
    2e7a:	46 17       	cp	r20, r22
    2e7c:	57 07       	cpc	r21, r23
    2e7e:	f9 f0       	breq	.+62     	; 0x2ebe <check_for_aks_block+0xb2>
    2e80:	12 96       	adiw	r26, 0x02	; 2
    2e82:	8c 91       	ld	r24, X
    2e84:	12 97       	sbiw	r26, 0x02	; 2
    2e86:	f8 12       	cpse	r15, r24
    2e88:	1a c0       	rjmp	.+52     	; 0x2ebe <check_for_aks_block+0xb2>
    2e8a:	80 81       	ld	r24, Z
    2e8c:	85 58       	subi	r24, 0x85	; 133
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	e8 f0       	brcs	.+58     	; 0x2ecc <check_for_aks_block+0xc0>
    2e92:	c4 80       	ldd	r12, Z+4	; 0x04
    2e94:	d5 80       	ldd	r13, Z+5	; 0x05
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	ec 01       	movw	r28, r24
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	c8 16       	cp	r12, r24
    2ea2:	d9 06       	cpc	r13, r25
    2ea4:	60 f4       	brcc	.+24     	; 0x2ebe <check_for_aks_block+0xb2>
    2ea6:	8c 19       	sub	r24, r12
    2ea8:	9d 09       	sbc	r25, r13
    2eaa:	cc 91       	ld	r28, X
    2eac:	d0 e0       	ldi	r29, 0x00	; 0
    2eae:	c8 17       	cp	r28, r24
    2eb0:	d9 07       	cpc	r29, r25
    2eb2:	28 f4       	brcc	.+10     	; 0x2ebe <check_for_aks_block+0xb2>
    2eb4:	8c 1b       	sub	r24, r28
    2eb6:	9d 0b       	sbc	r25, r29
    2eb8:	28 17       	cp	r18, r24
    2eba:	39 07       	cpc	r19, r25
    2ebc:	38 f0       	brcs	.+14     	; 0x2ecc <check_for_aks_block+0xc0>
    2ebe:	4f 5f       	subi	r20, 0xFF	; 255
    2ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec2:	13 96       	adiw	r26, 0x03	; 3
    2ec4:	36 96       	adiw	r30, 0x06	; 6
    2ec6:	d6 cf       	rjmp	.-84     	; 0x2e74 <check_for_aks_block+0x68>
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <check_for_aks_block+0xc2>
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	df 90       	pop	r13
    2eda:	cf 90       	pop	r12
    2edc:	08 95       	ret

00002ede <qtm_update_qtlib_timer>:
    2ede:	20 91 65 41 	lds	r18, 0x4165	; 0x804165 <qtm_local_ms_timecount>
    2ee2:	30 91 66 41 	lds	r19, 0x4166	; 0x804166 <qtm_local_ms_timecount+0x1>
    2ee6:	82 0f       	add	r24, r18
    2ee8:	93 1f       	adc	r25, r19
    2eea:	80 93 65 41 	sts	0x4165, r24	; 0x804165 <qtm_local_ms_timecount>
    2eee:	90 93 66 41 	sts	0x4166, r25	; 0x804166 <qtm_local_ms_timecount+0x1>
    2ef2:	08 95       	ret

00002ef4 <qtm_init_sensor_key>:
    2ef4:	00 97       	sbiw	r24, 0x00	; 0
    2ef6:	d9 f0       	breq	.+54     	; 0x2f2e <qtm_init_sensor_key+0x3a>
    2ef8:	41 15       	cp	r20, r1
    2efa:	51 05       	cpc	r21, r1
    2efc:	c1 f0       	breq	.+48     	; 0x2f2e <qtm_init_sensor_key+0x3a>
    2efe:	26 e0       	ldi	r18, 0x06	; 6
    2f00:	62 9f       	mul	r22, r18
    2f02:	b0 01       	movw	r22, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	dc 01       	movw	r26, r24
    2f08:	14 96       	adiw	r26, 0x04	; 4
    2f0a:	ed 91       	ld	r30, X+
    2f0c:	fc 91       	ld	r31, X
    2f0e:	15 97       	sbiw	r26, 0x05	; 5
    2f10:	e6 0f       	add	r30, r22
    2f12:	f7 1f       	adc	r31, r23
    2f14:	21 e0       	ldi	r18, 0x01	; 1
    2f16:	20 83       	st	Z, r18
    2f18:	14 96       	adiw	r26, 0x04	; 4
    2f1a:	8d 91       	ld	r24, X+
    2f1c:	9c 91       	ld	r25, X
    2f1e:	15 97       	sbiw	r26, 0x05	; 5
    2f20:	fc 01       	movw	r30, r24
    2f22:	e6 0f       	add	r30, r22
    2f24:	f7 1f       	adc	r31, r23
    2f26:	42 83       	std	Z+2, r20	; 0x02
    2f28:	53 83       	std	Z+3, r21	; 0x03
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	08 95       	ret
    2f2e:	8b e0       	ldi	r24, 0x0B	; 11
    2f30:	08 95       	ret

00002f32 <qtm_key_sensors_process>:
    2f32:	2f 92       	push	r2
    2f34:	3f 92       	push	r3
    2f36:	4f 92       	push	r4
    2f38:	5f 92       	push	r5
    2f3a:	6f 92       	push	r6
    2f3c:	7f 92       	push	r7
    2f3e:	8f 92       	push	r8
    2f40:	9f 92       	push	r9
    2f42:	af 92       	push	r10
    2f44:	bf 92       	push	r11
    2f46:	cf 92       	push	r12
    2f48:	df 92       	push	r13
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <qtm_key_sensors_process+0x2a>
    2f5a:	7d c3       	rjmp	.+1786   	; 0x3656 <qtm_key_sensors_process+0x724>
    2f5c:	ec 01       	movw	r28, r24
    2f5e:	a1 2c       	mov	r10, r1
    2f60:	b1 2c       	mov	r11, r1
    2f62:	81 2c       	mov	r8, r1
    2f64:	91 2c       	mov	r9, r1
    2f66:	21 2c       	mov	r2, r1
    2f68:	d1 2c       	mov	r13, r1
    2f6a:	33 e0       	ldi	r19, 0x03	; 3
    2f6c:	c3 2e       	mov	r12, r19
    2f6e:	45 e8       	ldi	r20, 0x85	; 133
    2f70:	64 2e       	mov	r6, r20
    2f72:	56 e8       	ldi	r21, 0x86	; 134
    2f74:	75 2e       	mov	r7, r21
    2f76:	67 e0       	ldi	r22, 0x07	; 7
    2f78:	36 2e       	mov	r3, r22
    2f7a:	72 e0       	ldi	r23, 0x02	; 2
    2f7c:	47 2e       	mov	r4, r23
    2f7e:	e8 e0       	ldi	r30, 0x08	; 8
    2f80:	5e 2e       	mov	r5, r30
    2f82:	ea 81       	ldd	r30, Y+2	; 0x02
    2f84:	fb 81       	ldd	r31, Y+3	; 0x03
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	88 16       	cp	r8, r24
    2f8c:	99 06       	cpc	r9, r25
    2f8e:	08 f0       	brcs	.+2      	; 0x2f92 <qtm_key_sensors_process+0x60>
    2f90:	a5 c1       	rjmp	.+842    	; 0x32dc <qtm_key_sensors_process+0x3aa>
    2f92:	75 01       	movw	r14, r10
    2f94:	ee 0c       	add	r14, r14
    2f96:	ff 1c       	adc	r15, r15
    2f98:	0c 81       	ldd	r16, Y+4	; 0x04
    2f9a:	1d 81       	ldd	r17, Y+5	; 0x05
    2f9c:	0e 0d       	add	r16, r14
    2f9e:	1f 1d       	adc	r17, r15
    2fa0:	d8 01       	movw	r26, r16
    2fa2:	8c 91       	ld	r24, X
    2fa4:	84 30       	cpi	r24, 0x04	; 4
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <qtm_key_sensors_process+0x78>
    2fa8:	a2 c0       	rjmp	.+324    	; 0x30ee <qtm_key_sensors_process+0x1bc>
    2faa:	38 f4       	brcc	.+14     	; 0x2fba <qtm_key_sensors_process+0x88>
    2fac:	82 30       	cpi	r24, 0x02	; 2
    2fae:	01 f1       	breq	.+64     	; 0x2ff0 <qtm_key_sensors_process+0xbe>
    2fb0:	08 f0       	brcs	.+2      	; 0x2fb4 <qtm_key_sensors_process+0x82>
    2fb2:	49 c0       	rjmp	.+146    	; 0x3046 <qtm_key_sensors_process+0x114>
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	59 f0       	breq	.+22     	; 0x2fce <qtm_key_sensors_process+0x9c>
    2fb8:	8a c1       	rjmp	.+788    	; 0x32ce <qtm_key_sensors_process+0x39c>
    2fba:	85 38       	cpi	r24, 0x85	; 133
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <qtm_key_sensors_process+0x8e>
    2fbe:	c2 c0       	rjmp	.+388    	; 0x3144 <qtm_key_sensors_process+0x212>
    2fc0:	86 38       	cpi	r24, 0x86	; 134
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <qtm_key_sensors_process+0x94>
    2fc4:	f6 c0       	rjmp	.+492    	; 0x31b2 <qtm_key_sensors_process+0x280>
    2fc6:	87 30       	cpi	r24, 0x07	; 7
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <qtm_key_sensors_process+0x9a>
    2fca:	81 c1       	rjmp	.+770    	; 0x32ce <qtm_key_sensors_process+0x39c>
    2fcc:	37 c1       	rjmp	.+622    	; 0x323c <qtm_key_sensors_process+0x30a>
    2fce:	d8 01       	movw	r26, r16
    2fd0:	12 96       	adiw	r26, 0x02	; 2
    2fd2:	ed 91       	ld	r30, X+
    2fd4:	fc 91       	ld	r31, X
    2fd6:	13 97       	sbiw	r26, 0x03	; 3
    2fd8:	80 81       	ld	r24, Z
    2fda:	8e 71       	andi	r24, 0x1E	; 30
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <qtm_key_sensors_process+0xae>
    2fde:	69 c1       	rjmp	.+722    	; 0x32b2 <qtm_key_sensors_process+0x380>
    2fe0:	4c 92       	st	X, r4
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	ee 0d       	add	r30, r14
    2fea:	ff 1d       	adc	r31, r15
    2fec:	51 82       	std	Z+1, r5	; 0x01
    2fee:	61 c1       	rjmp	.+706    	; 0x32b2 <qtm_key_sensors_process+0x380>
    2ff0:	f8 01       	movw	r30, r16
    2ff2:	21 81       	ldd	r18, Z+1	; 0x01
    2ff4:	22 23       	and	r18, r18
    2ff6:	29 f1       	breq	.+74     	; 0x3042 <qtm_key_sensors_process+0x110>
    2ff8:	02 80       	ldd	r0, Z+2	; 0x02
    2ffa:	f3 81       	ldd	r31, Z+3	; 0x03
    2ffc:	e0 2d       	mov	r30, r0
    2ffe:	25 30       	cpi	r18, 0x05	; 5
    3000:	20 f0       	brcs	.+8      	; 0x300a <qtm_key_sensors_process+0xd8>
    3002:	81 81       	ldd	r24, Z+1	; 0x01
    3004:	92 81       	ldd	r25, Z+2	; 0x02
    3006:	d8 01       	movw	r26, r16
    3008:	0e c0       	rjmp	.+28     	; 0x3026 <qtm_key_sensors_process+0xf4>
    300a:	d8 01       	movw	r26, r16
    300c:	14 96       	adiw	r26, 0x04	; 4
    300e:	8d 91       	ld	r24, X+
    3010:	9c 91       	ld	r25, X
    3012:	15 97       	sbiw	r26, 0x05	; 5
    3014:	41 81       	ldd	r20, Z+1	; 0x01
    3016:	52 81       	ldd	r21, Z+2	; 0x02
    3018:	84 17       	cp	r24, r20
    301a:	95 07       	cpc	r25, r21
    301c:	69 f0       	breq	.+26     	; 0x3038 <qtm_key_sensors_process+0x106>
    301e:	48 17       	cp	r20, r24
    3020:	59 07       	cpc	r21, r25
    3022:	30 f4       	brcc	.+12     	; 0x3030 <qtm_key_sensors_process+0xfe>
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	14 96       	adiw	r26, 0x04	; 4
    3028:	8d 93       	st	X+, r24
    302a:	9c 93       	st	X, r25
    302c:	15 97       	sbiw	r26, 0x05	; 5
    302e:	04 c0       	rjmp	.+8      	; 0x3038 <qtm_key_sensors_process+0x106>
    3030:	01 96       	adiw	r24, 0x01	; 1
    3032:	f8 01       	movw	r30, r16
    3034:	84 83       	std	Z+4, r24	; 0x04
    3036:	95 83       	std	Z+5, r25	; 0x05
    3038:	21 50       	subi	r18, 0x01	; 1
    303a:	d8 01       	movw	r26, r16
    303c:	11 96       	adiw	r26, 0x01	; 1
    303e:	2c 93       	st	X, r18
    3040:	38 c1       	rjmp	.+624    	; 0x32b2 <qtm_key_sensors_process+0x380>
    3042:	f8 01       	movw	r30, r16
    3044:	31 c1       	rjmp	.+610    	; 0x32a8 <qtm_key_sensors_process+0x376>
    3046:	d8 01       	movw	r26, r16
    3048:	14 96       	adiw	r26, 0x04	; 4
    304a:	2d 91       	ld	r18, X+
    304c:	3c 91       	ld	r19, X
    304e:	15 97       	sbiw	r26, 0x05	; 5
    3050:	12 96       	adiw	r26, 0x02	; 2
    3052:	8d 91       	ld	r24, X+
    3054:	9c 91       	ld	r25, X
    3056:	13 97       	sbiw	r26, 0x03	; 3
    3058:	dc 01       	movw	r26, r24
    305a:	11 96       	adiw	r26, 0x01	; 1
    305c:	4d 91       	ld	r20, X+
    305e:	5c 91       	ld	r21, X
    3060:	12 97       	sbiw	r26, 0x02	; 2
    3062:	24 17       	cp	r18, r20
    3064:	35 07       	cpc	r19, r21
    3066:	09 f4       	brne	.+2      	; 0x306a <qtm_key_sensors_process+0x138>
    3068:	32 c1       	rjmp	.+612    	; 0x32ce <qtm_key_sensors_process+0x39c>
    306a:	8e 81       	ldd	r24, Y+6	; 0x06
    306c:	9f 81       	ldd	r25, Y+7	; 0x07
    306e:	42 17       	cp	r20, r18
    3070:	53 07       	cpc	r21, r19
    3072:	e0 f4       	brcc	.+56     	; 0x30ac <qtm_key_sensors_process+0x17a>
    3074:	24 1b       	sub	r18, r20
    3076:	35 0b       	sbc	r19, r21
    3078:	dc 01       	movw	r26, r24
    307a:	aa 0d       	add	r26, r10
    307c:	bb 1d       	adc	r27, r11
    307e:	8c 91       	ld	r24, X
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	05 80       	ldd	r0, Z+5	; 0x05
    3084:	02 c0       	rjmp	.+4      	; 0x308a <qtm_key_sensors_process+0x158>
    3086:	95 95       	asr	r25
    3088:	87 95       	ror	r24
    308a:	0a 94       	dec	r0
    308c:	e2 f7       	brpl	.-8      	; 0x3086 <qtm_key_sensors_process+0x154>
    308e:	99 27       	eor	r25, r25
    3090:	28 17       	cp	r18, r24
    3092:	39 07       	cpc	r19, r25
    3094:	08 f4       	brcc	.+2      	; 0x3098 <qtm_key_sensors_process+0x166>
    3096:	1b c1       	rjmp	.+566    	; 0x32ce <qtm_key_sensors_process+0x39c>
    3098:	84 81       	ldd	r24, Z+4	; 0x04
    309a:	88 23       	and	r24, r24
    309c:	09 f4       	brne	.+2      	; 0x30a0 <qtm_key_sensors_process+0x16e>
    309e:	17 c1       	rjmp	.+558    	; 0x32ce <qtm_key_sensors_process+0x39c>
    30a0:	f8 01       	movw	r30, r16
    30a2:	30 82       	st	Z, r3
    30a4:	ea 81       	ldd	r30, Y+2	; 0x02
    30a6:	fb 81       	ldd	r31, Y+3	; 0x03
    30a8:	24 81       	ldd	r18, Z+4	; 0x04
    30aa:	1a c0       	rjmp	.+52     	; 0x30e0 <qtm_key_sensors_process+0x1ae>
    30ac:	fc 01       	movw	r30, r24
    30ae:	ea 0d       	add	r30, r10
    30b0:	fb 1d       	adc	r31, r11
    30b2:	42 1b       	sub	r20, r18
    30b4:	53 0b       	sbc	r21, r19
    30b6:	80 81       	ld	r24, Z
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	48 17       	cp	r20, r24
    30bc:	59 07       	cpc	r21, r25
    30be:	08 f4       	brcc	.+2      	; 0x30c2 <qtm_key_sensors_process+0x190>
    30c0:	06 c1       	rjmp	.+524    	; 0x32ce <qtm_key_sensors_process+0x39c>
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	88 23       	and	r24, r24
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <qtm_key_sensors_process+0x1a2>
    30c8:	b4 01       	movw	r22, r8
    30ca:	ce 01       	movw	r24, r28
    30cc:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <check_for_aks_block>
    30d0:	81 11       	cpse	r24, r1
    30d2:	fd c0       	rjmp	.+506    	; 0x32ce <qtm_key_sensors_process+0x39c>
    30d4:	e4 e0       	ldi	r30, 0x04	; 4
    30d6:	d8 01       	movw	r26, r16
    30d8:	ec 93       	st	X, r30
    30da:	ea 81       	ldd	r30, Y+2	; 0x02
    30dc:	fb 81       	ldd	r31, Y+3	; 0x03
    30de:	22 81       	ldd	r18, Z+2	; 0x02
    30e0:	8c 81       	ldd	r24, Y+4	; 0x04
    30e2:	9d 81       	ldd	r25, Y+5	; 0x05
    30e4:	fc 01       	movw	r30, r24
    30e6:	ee 0d       	add	r30, r14
    30e8:	ff 1d       	adc	r31, r15
    30ea:	21 83       	std	Z+1, r18	; 0x01
    30ec:	e2 c0       	rjmp	.+452    	; 0x32b2 <qtm_key_sensors_process+0x380>
    30ee:	d8 01       	movw	r26, r16
    30f0:	14 96       	adiw	r26, 0x04	; 4
    30f2:	2d 91       	ld	r18, X+
    30f4:	3c 91       	ld	r19, X
    30f6:	15 97       	sbiw	r26, 0x05	; 5
    30f8:	12 96       	adiw	r26, 0x02	; 2
    30fa:	ed 91       	ld	r30, X+
    30fc:	fc 91       	ld	r31, X
    30fe:	13 97       	sbiw	r26, 0x03	; 3
    3100:	81 81       	ldd	r24, Z+1	; 0x01
    3102:	92 81       	ldd	r25, Z+2	; 0x02
    3104:	82 17       	cp	r24, r18
    3106:	93 07       	cpc	r25, r19
    3108:	08 f4       	brcc	.+2      	; 0x310c <qtm_key_sensors_process+0x1da>
    310a:	d7 c0       	rjmp	.+430    	; 0x32ba <qtm_key_sensors_process+0x388>
    310c:	ee 81       	ldd	r30, Y+6	; 0x06
    310e:	ff 81       	ldd	r31, Y+7	; 0x07
    3110:	ea 0d       	add	r30, r10
    3112:	fb 1d       	adc	r31, r11
    3114:	82 1b       	sub	r24, r18
    3116:	93 0b       	sbc	r25, r19
    3118:	20 81       	ld	r18, Z
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	28 17       	cp	r18, r24
    311e:	39 07       	cpc	r19, r25
    3120:	08 f0       	brcs	.+2      	; 0x3124 <qtm_key_sensors_process+0x1f2>
    3122:	af c0       	rjmp	.+350    	; 0x3282 <qtm_key_sensors_process+0x350>
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	88 23       	and	r24, r24
    3128:	31 f0       	breq	.+12     	; 0x3136 <qtm_key_sensors_process+0x204>
    312a:	b4 01       	movw	r22, r8
    312c:	ce 01       	movw	r24, r28
    312e:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <check_for_aks_block>
    3132:	81 11       	cpse	r24, r1
    3134:	cc c0       	rjmp	.+408    	; 0x32ce <qtm_key_sensors_process+0x39c>
    3136:	f8 01       	movw	r30, r16
    3138:	81 81       	ldd	r24, Z+1	; 0x01
    313a:	88 23       	and	r24, r24
    313c:	09 f4       	brne	.+2      	; 0x3140 <qtm_key_sensors_process+0x20e>
    313e:	67 c0       	rjmp	.+206    	; 0x320e <qtm_key_sensors_process+0x2dc>
    3140:	81 50       	subi	r24, 0x01	; 1
    3142:	b6 c0       	rjmp	.+364    	; 0x32b0 <qtm_key_sensors_process+0x37e>
    3144:	a8 81       	ld	r26, Y
    3146:	b9 81       	ldd	r27, Y+1	; 0x01
    3148:	80 85       	ldd	r24, Z+8	; 0x08
    314a:	13 96       	adiw	r26, 0x03	; 3
    314c:	8c 93       	st	X, r24
    314e:	ec 81       	ldd	r30, Y+4	; 0x04
    3150:	fd 81       	ldd	r31, Y+5	; 0x05
    3152:	ee 0d       	add	r30, r14
    3154:	ff 1d       	adc	r31, r15
    3156:	44 81       	ldd	r20, Z+4	; 0x04
    3158:	55 81       	ldd	r21, Z+5	; 0x05
    315a:	a2 81       	ldd	r26, Z+2	; 0x02
    315c:	b3 81       	ldd	r27, Z+3	; 0x03
    315e:	11 96       	adiw	r26, 0x01	; 1
    3160:	8d 91       	ld	r24, X+
    3162:	9c 91       	ld	r25, X
    3164:	12 97       	sbiw	r26, 0x02	; 2
    3166:	84 17       	cp	r24, r20
    3168:	95 07       	cpc	r25, r21
    316a:	c0 f0       	brcs	.+48     	; 0x319c <qtm_key_sensors_process+0x26a>
    316c:	ae 81       	ldd	r26, Y+6	; 0x06
    316e:	bf 81       	ldd	r27, Y+7	; 0x07
    3170:	aa 0d       	add	r26, r10
    3172:	bb 1d       	adc	r27, r11
    3174:	6c 91       	ld	r22, X
    3176:	26 2f       	mov	r18, r22
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	11 96       	adiw	r26, 0x01	; 1
    317c:	7c 91       	ld	r23, X
    317e:	7f 5f       	subi	r23, 0xFF	; 255
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <qtm_key_sensors_process+0x254>
    3182:	35 95       	asr	r19
    3184:	27 95       	ror	r18
    3186:	7a 95       	dec	r23
    3188:	e2 f7       	brpl	.-8      	; 0x3182 <qtm_key_sensors_process+0x250>
    318a:	84 1b       	sub	r24, r20
    318c:	95 0b       	sbc	r25, r21
    318e:	62 1b       	sub	r22, r18
    3190:	26 2f       	mov	r18, r22
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	28 17       	cp	r18, r24
    3196:	39 07       	cpc	r19, r25
    3198:	08 f4       	brcc	.+2      	; 0x319c <qtm_key_sensors_process+0x26a>
    319a:	97 c0       	rjmp	.+302    	; 0x32ca <qtm_key_sensors_process+0x398>
    319c:	70 82       	st	Z, r7
    319e:	ea 81       	ldd	r30, Y+2	; 0x02
    31a0:	fb 81       	ldd	r31, Y+3	; 0x03
    31a2:	22 81       	ldd	r18, Z+2	; 0x02
    31a4:	8c 81       	ldd	r24, Y+4	; 0x04
    31a6:	9d 81       	ldd	r25, Y+5	; 0x05
    31a8:	fc 01       	movw	r30, r24
    31aa:	ee 0d       	add	r30, r14
    31ac:	ff 1d       	adc	r31, r15
    31ae:	21 83       	std	Z+1, r18	; 0x01
    31b0:	42 c0       	rjmp	.+132    	; 0x3236 <qtm_key_sensors_process+0x304>
    31b2:	d8 01       	movw	r26, r16
    31b4:	14 96       	adiw	r26, 0x04	; 4
    31b6:	6d 91       	ld	r22, X+
    31b8:	7c 91       	ld	r23, X
    31ba:	15 97       	sbiw	r26, 0x05	; 5
    31bc:	12 96       	adiw	r26, 0x02	; 2
    31be:	ed 91       	ld	r30, X+
    31c0:	fc 91       	ld	r31, X
    31c2:	13 97       	sbiw	r26, 0x03	; 3
    31c4:	21 81       	ldd	r18, Z+1	; 0x01
    31c6:	32 81       	ldd	r19, Z+2	; 0x02
    31c8:	26 17       	cp	r18, r22
    31ca:	37 07       	cpc	r19, r23
    31cc:	58 f4       	brcc	.+22     	; 0x31e4 <qtm_key_sensors_process+0x2b2>
    31ce:	11 96       	adiw	r26, 0x01	; 1
    31d0:	8c 91       	ld	r24, X
    31d2:	11 97       	sbiw	r26, 0x01	; 1
    31d4:	81 11       	cpse	r24, r1
    31d6:	02 c0       	rjmp	.+4      	; 0x31dc <qtm_key_sensors_process+0x2aa>
    31d8:	cc 92       	st	X, r12
    31da:	77 c0       	rjmp	.+238    	; 0x32ca <qtm_key_sensors_process+0x398>
    31dc:	81 50       	subi	r24, 0x01	; 1
    31de:	f8 01       	movw	r30, r16
    31e0:	81 83       	std	Z+1, r24	; 0x01
    31e2:	73 c0       	rjmp	.+230    	; 0x32ca <qtm_key_sensors_process+0x398>
    31e4:	ee 81       	ldd	r30, Y+6	; 0x06
    31e6:	ff 81       	ldd	r31, Y+7	; 0x07
    31e8:	ea 0d       	add	r30, r10
    31ea:	fb 1d       	adc	r31, r11
    31ec:	80 81       	ld	r24, Z
    31ee:	48 2f       	mov	r20, r24
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	9f 5f       	subi	r25, 0xFF	; 255
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <qtm_key_sensors_process+0x2ca>
    31f8:	55 95       	asr	r21
    31fa:	47 95       	ror	r20
    31fc:	9a 95       	dec	r25
    31fe:	e2 f7       	brpl	.-8      	; 0x31f8 <qtm_key_sensors_process+0x2c6>
    3200:	26 1b       	sub	r18, r22
    3202:	37 0b       	sbc	r19, r23
    3204:	84 1b       	sub	r24, r20
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	82 17       	cp	r24, r18
    320a:	93 07       	cpc	r25, r19
    320c:	60 f4       	brcc	.+24     	; 0x3226 <qtm_key_sensors_process+0x2f4>
    320e:	d8 01       	movw	r26, r16
    3210:	6c 92       	st	X, r6
    3212:	ea 81       	ldd	r30, Y+2	; 0x02
    3214:	fb 81       	ldd	r31, Y+3	; 0x03
    3216:	23 81       	ldd	r18, Z+3	; 0x03
    3218:	8c 81       	ldd	r24, Y+4	; 0x04
    321a:	9d 81       	ldd	r25, Y+5	; 0x05
    321c:	fc 01       	movw	r30, r24
    321e:	ee 0d       	add	r30, r14
    3220:	ff 1d       	adc	r31, r15
    3222:	21 83       	std	Z+1, r18	; 0x01
    3224:	52 c0       	rjmp	.+164    	; 0x32ca <qtm_key_sensors_process+0x398>
    3226:	f8 01       	movw	r30, r16
    3228:	81 81       	ldd	r24, Z+1	; 0x01
    322a:	81 11       	cpse	r24, r1
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <qtm_key_sensors_process+0x300>
    322e:	c0 82       	st	Z, r12
    3230:	4c c0       	rjmp	.+152    	; 0x32ca <qtm_key_sensors_process+0x398>
    3232:	81 50       	subi	r24, 0x01	; 1
    3234:	81 83       	std	Z+1, r24	; 0x01
    3236:	22 24       	eor	r2, r2
    3238:	23 94       	inc	r2
    323a:	3b c0       	rjmp	.+118    	; 0x32b2 <qtm_key_sensors_process+0x380>
    323c:	d8 01       	movw	r26, r16
    323e:	14 96       	adiw	r26, 0x04	; 4
    3240:	2d 91       	ld	r18, X+
    3242:	3c 91       	ld	r19, X
    3244:	15 97       	sbiw	r26, 0x05	; 5
    3246:	12 96       	adiw	r26, 0x02	; 2
    3248:	8d 91       	ld	r24, X+
    324a:	9c 91       	ld	r25, X
    324c:	13 97       	sbiw	r26, 0x03	; 3
    324e:	dc 01       	movw	r26, r24
    3250:	11 96       	adiw	r26, 0x01	; 1
    3252:	8d 91       	ld	r24, X+
    3254:	9c 91       	ld	r25, X
    3256:	12 97       	sbiw	r26, 0x02	; 2
    3258:	82 17       	cp	r24, r18
    325a:	93 07       	cpc	r25, r19
    325c:	68 f5       	brcc	.+90     	; 0x32b8 <qtm_key_sensors_process+0x386>
    325e:	28 1b       	sub	r18, r24
    3260:	39 0b       	sbc	r19, r25
    3262:	ae 81       	ldd	r26, Y+6	; 0x06
    3264:	bf 81       	ldd	r27, Y+7	; 0x07
    3266:	aa 0d       	add	r26, r10
    3268:	bb 1d       	adc	r27, r11
    326a:	8c 91       	ld	r24, X
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	05 80       	ldd	r0, Z+5	; 0x05
    3270:	02 c0       	rjmp	.+4      	; 0x3276 <qtm_key_sensors_process+0x344>
    3272:	95 95       	asr	r25
    3274:	87 95       	ror	r24
    3276:	0a 94       	dec	r0
    3278:	e2 f7       	brpl	.-8      	; 0x3272 <qtm_key_sensors_process+0x340>
    327a:	99 27       	eor	r25, r25
    327c:	28 17       	cp	r18, r24
    327e:	39 07       	cpc	r19, r25
    3280:	18 f4       	brcc	.+6      	; 0x3288 <qtm_key_sensors_process+0x356>
    3282:	f8 01       	movw	r30, r16
    3284:	c0 82       	st	Z, r12
    3286:	1a c0       	rjmp	.+52     	; 0x32bc <qtm_key_sensors_process+0x38a>
    3288:	d8 01       	movw	r26, r16
    328a:	11 96       	adiw	r26, 0x01	; 1
    328c:	8c 91       	ld	r24, X
    328e:	11 97       	sbiw	r26, 0x01	; 1
    3290:	81 11       	cpse	r24, r1
    3292:	0c c0       	rjmp	.+24     	; 0x32ac <qtm_key_sensors_process+0x37a>
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	8c 93       	st	X, r24
    3298:	8c 81       	ldd	r24, Y+4	; 0x04
    329a:	9d 81       	ldd	r25, Y+5	; 0x05
    329c:	fc 01       	movw	r30, r24
    329e:	ee 0d       	add	r30, r14
    32a0:	ff 1d       	adc	r31, r15
    32a2:	02 80       	ldd	r0, Z+2	; 0x02
    32a4:	f3 81       	ldd	r31, Z+3	; 0x03
    32a6:	e0 2d       	mov	r30, r0
    32a8:	c0 82       	st	Z, r12
    32aa:	11 c0       	rjmp	.+34     	; 0x32ce <qtm_key_sensors_process+0x39c>
    32ac:	81 50       	subi	r24, 0x01	; 1
    32ae:	f8 01       	movw	r30, r16
    32b0:	81 83       	std	Z+1, r24	; 0x01
    32b2:	dd 24       	eor	r13, r13
    32b4:	d3 94       	inc	r13
    32b6:	0b c0       	rjmp	.+22     	; 0x32ce <qtm_key_sensors_process+0x39c>
    32b8:	d8 01       	movw	r26, r16
    32ba:	cc 92       	st	X, r12
    32bc:	8c 81       	ldd	r24, Y+4	; 0x04
    32be:	9d 81       	ldd	r25, Y+5	; 0x05
    32c0:	fc 01       	movw	r30, r24
    32c2:	ee 0d       	add	r30, r14
    32c4:	ff 1d       	adc	r31, r15
    32c6:	11 82       	std	Z+1, r1	; 0x01
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <qtm_key_sensors_process+0x39c>
    32ca:	22 24       	eor	r2, r2
    32cc:	23 94       	inc	r2
    32ce:	bf ef       	ldi	r27, 0xFF	; 255
    32d0:	8b 1a       	sub	r8, r27
    32d2:	9b 0a       	sbc	r9, r27
    32d4:	e3 e0       	ldi	r30, 0x03	; 3
    32d6:	ae 0e       	add	r10, r30
    32d8:	b1 1c       	adc	r11, r1
    32da:	53 ce       	rjmp	.-858    	; 0x2f82 <qtm_key_sensors_process+0x50>
    32dc:	e8 81       	ld	r30, Y
    32de:	f9 81       	ldd	r31, Y+1	; 0x01
    32e0:	80 81       	ld	r24, Z
    32e2:	87 ff       	sbrs	r24, 7
    32e4:	23 c0       	rjmp	.+70     	; 0x332c <qtm_key_sensors_process+0x3fa>
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	ea 81       	ldd	r30, Y+2	; 0x02
    32f0:	fb 81       	ldd	r31, Y+3	; 0x03
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	28 17       	cp	r18, r24
    32f8:	39 07       	cpc	r19, r25
    32fa:	98 f4       	brcc	.+38     	; 0x3322 <qtm_key_sensors_process+0x3f0>
    32fc:	ec 81       	ldd	r30, Y+4	; 0x04
    32fe:	fd 81       	ldd	r31, Y+5	; 0x05
    3300:	e4 0f       	add	r30, r20
    3302:	f5 1f       	adc	r31, r21
    3304:	a2 81       	ldd	r26, Z+2	; 0x02
    3306:	b3 81       	ldd	r27, Z+3	; 0x03
    3308:	8c 91       	ld	r24, X
    330a:	80 fd       	sbrc	r24, 0
    330c:	05 c0       	rjmp	.+10     	; 0x3318 <qtm_key_sensors_process+0x3e6>
    330e:	90 81       	ld	r25, Z
    3310:	97 7f       	andi	r25, 0xF7	; 247
    3312:	11 f0       	breq	.+4      	; 0x3318 <qtm_key_sensors_process+0x3e6>
    3314:	81 60       	ori	r24, 0x01	; 1
    3316:	8c 93       	st	X, r24
    3318:	2f 5f       	subi	r18, 0xFF	; 255
    331a:	3f 4f       	sbci	r19, 0xFF	; 255
    331c:	4a 5f       	subi	r20, 0xFA	; 250
    331e:	5f 4f       	sbci	r21, 0xFF	; 255
    3320:	e6 cf       	rjmp	.-52     	; 0x32ee <qtm_key_sensors_process+0x3bc>
    3322:	e8 81       	ld	r30, Y
    3324:	f9 81       	ldd	r31, Y+1	; 0x01
    3326:	80 81       	ld	r24, Z
    3328:	8f 77       	andi	r24, 0x7F	; 127
    332a:	80 83       	st	Z, r24
    332c:	d1 10       	cpse	r13, r1
    332e:	07 c0       	rjmp	.+14     	; 0x333e <qtm_key_sensors_process+0x40c>
    3330:	e8 81       	ld	r30, Y
    3332:	f9 81       	ldd	r31, Y+1	; 0x01
    3334:	21 10       	cpse	r2, r1
    3336:	6f c0       	rjmp	.+222    	; 0x3416 <qtm_key_sensors_process+0x4e4>
    3338:	80 81       	ld	r24, Z
    333a:	8e 7f       	andi	r24, 0xFE	; 254
    333c:	6e c0       	rjmp	.+220    	; 0x341a <qtm_key_sensors_process+0x4e8>
    333e:	ea 81       	ldd	r30, Y+2	; 0x02
    3340:	fb 81       	ldd	r31, Y+3	; 0x03
    3342:	81 85       	ldd	r24, Z+9	; 0x09
    3344:	88 23       	and	r24, r24
    3346:	a1 f3       	breq	.-24     	; 0x3330 <qtm_key_sensors_process+0x3fe>
    3348:	e8 81       	ld	r30, Y
    334a:	f9 81       	ldd	r31, Y+1	; 0x01
    334c:	80 81       	ld	r24, Z
    334e:	80 68       	ori	r24, 0x80	; 128
    3350:	80 83       	st	Z, r24
    3352:	ea 81       	ldd	r30, Y+2	; 0x02
    3354:	fb 81       	ldd	r31, Y+3	; 0x03
    3356:	81 85       	ldd	r24, Z+9	; 0x09
    3358:	81 30       	cpi	r24, 0x01	; 1
    335a:	51 f7       	brne	.-44     	; 0x3330 <qtm_key_sensors_process+0x3fe>
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	96 e0       	ldi	r25, 0x06	; 6
    3366:	d9 2e       	mov	r13, r25
    3368:	ea 81       	ldd	r30, Y+2	; 0x02
    336a:	fb 81       	ldd	r31, Y+3	; 0x03
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	26 17       	cp	r18, r22
    3372:	37 07       	cpc	r19, r23
    3374:	e8 f6       	brcc	.-70     	; 0x3330 <qtm_key_sensors_process+0x3fe>
    3376:	0c 81       	ldd	r16, Y+4	; 0x04
    3378:	1d 81       	ldd	r17, Y+5	; 0x05
    337a:	fa 01       	movw	r30, r20
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	e0 0f       	add	r30, r16
    3382:	f1 1f       	adc	r31, r17
    3384:	80 81       	ld	r24, Z
    3386:	98 2f       	mov	r25, r24
    3388:	97 7f       	andi	r25, 0xF7	; 247
    338a:	a1 f1       	breq	.+104    	; 0x33f4 <qtm_key_sensors_process+0x4c2>
    338c:	85 38       	cpi	r24, 0x85	; 133
    338e:	11 f0       	breq	.+4      	; 0x3394 <qtm_key_sensors_process+0x462>
    3390:	83 30       	cpi	r24, 0x03	; 3
    3392:	b1 f5       	brne	.+108    	; 0x3400 <qtm_key_sensors_process+0x4ce>
    3394:	ee 80       	ldd	r14, Y+6	; 0x06
    3396:	ff 80       	ldd	r15, Y+7	; 0x07
    3398:	d7 01       	movw	r26, r14
    339a:	a4 0f       	add	r26, r20
    339c:	b5 1f       	adc	r27, r21
    339e:	12 96       	adiw	r26, 0x02	; 2
    33a0:	bc 90       	ld	r11, X
    33a2:	bb 20       	and	r11, r11
    33a4:	39 f1       	breq	.+78     	; 0x33f4 <qtm_key_sensors_process+0x4c2>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	c1 2c       	mov	r12, r1
    33ac:	86 17       	cp	r24, r22
    33ae:	97 07       	cpc	r25, r23
    33b0:	f8 f4       	brcc	.+62     	; 0x33f0 <qtm_key_sensors_process+0x4be>
    33b2:	28 17       	cp	r18, r24
    33b4:	39 07       	cpc	r19, r25
    33b6:	d1 f0       	breq	.+52     	; 0x33ec <qtm_key_sensors_process+0x4ba>
    33b8:	d8 9e       	mul	r13, r24
    33ba:	d0 01       	movw	r26, r0
    33bc:	d9 9e       	mul	r13, r25
    33be:	b0 0d       	add	r27, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	a0 0f       	add	r26, r16
    33c4:	b1 1f       	adc	r27, r17
    33c6:	ac 91       	ld	r26, X
    33c8:	a4 30       	cpi	r26, 0x04	; 4
    33ca:	11 f0       	breq	.+4      	; 0x33d0 <qtm_key_sensors_process+0x49e>
    33cc:	a6 38       	cpi	r26, 0x86	; 134
    33ce:	71 f4       	brne	.+28     	; 0x33ec <qtm_key_sensors_process+0x4ba>
    33d0:	dc 01       	movw	r26, r24
    33d2:	aa 0f       	add	r26, r26
    33d4:	bb 1f       	adc	r27, r27
    33d6:	a8 0f       	add	r26, r24
    33d8:	b9 1f       	adc	r27, r25
    33da:	ae 0d       	add	r26, r14
    33dc:	bf 1d       	adc	r27, r15
    33de:	12 96       	adiw	r26, 0x02	; 2
    33e0:	ac 91       	ld	r26, X
    33e2:	ba 12       	cpse	r11, r26
    33e4:	03 c0       	rjmp	.+6      	; 0x33ec <qtm_key_sensors_process+0x4ba>
    33e6:	cb 01       	movw	r24, r22
    33e8:	cc 24       	eor	r12, r12
    33ea:	c3 94       	inc	r12
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	de cf       	rjmp	.-68     	; 0x33ac <qtm_key_sensors_process+0x47a>
    33f0:	c1 10       	cpse	r12, r1
    33f2:	06 c0       	rjmp	.+12     	; 0x3400 <qtm_key_sensors_process+0x4ce>
    33f4:	02 80       	ldd	r0, Z+2	; 0x02
    33f6:	f3 81       	ldd	r31, Z+3	; 0x03
    33f8:	e0 2d       	mov	r30, r0
    33fa:	80 81       	ld	r24, Z
    33fc:	8e 7f       	andi	r24, 0xFE	; 254
    33fe:	05 c0       	rjmp	.+10     	; 0x340a <qtm_key_sensors_process+0x4d8>
    3400:	02 80       	ldd	r0, Z+2	; 0x02
    3402:	f3 81       	ldd	r31, Z+3	; 0x03
    3404:	e0 2d       	mov	r30, r0
    3406:	80 81       	ld	r24, Z
    3408:	81 60       	ori	r24, 0x01	; 1
    340a:	80 83       	st	Z, r24
    340c:	2f 5f       	subi	r18, 0xFF	; 255
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	4d 5f       	subi	r20, 0xFD	; 253
    3412:	5f 4f       	sbci	r21, 0xFF	; 255
    3414:	a9 cf       	rjmp	.-174    	; 0x3368 <qtm_key_sensors_process+0x436>
    3416:	80 81       	ld	r24, Z
    3418:	81 60       	ori	r24, 0x01	; 1
    341a:	80 83       	st	Z, r24
    341c:	80 91 65 41 	lds	r24, 0x4165	; 0x804165 <qtm_local_ms_timecount>
    3420:	90 91 66 41 	lds	r25, 0x4166	; 0x804166 <qtm_local_ms_timecount+0x1>
    3424:	e8 81       	ld	r30, Y
    3426:	f9 81       	ldd	r31, Y+1	; 0x01
    3428:	21 81       	ldd	r18, Z+1	; 0x01
    342a:	32 81       	ldd	r19, Z+2	; 0x02
    342c:	a9 01       	movw	r20, r18
    342e:	48 53       	subi	r20, 0x38	; 56
    3430:	5f 4f       	sbci	r21, 0xFF	; 255
    3432:	48 17       	cp	r20, r24
    3434:	59 07       	cpc	r21, r25
    3436:	38 f4       	brcc	.+14     	; 0x3446 <qtm_key_sensors_process+0x514>
    3438:	82 1b       	sub	r24, r18
    343a:	93 0b       	sbc	r25, r19
    343c:	aa 24       	eor	r10, r10
    343e:	a3 94       	inc	r10
    3440:	a3 e0       	ldi	r26, 0x03	; 3
    3442:	ba 2e       	mov	r11, r26
    3444:	44 c0       	rjmp	.+136    	; 0x34ce <qtm_key_sensors_process+0x59c>
    3446:	82 17       	cp	r24, r18
    3448:	93 07       	cpc	r25, r19
    344a:	10 f0       	brcs	.+4      	; 0x3450 <qtm_key_sensors_process+0x51e>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	04 c1       	rjmp	.+520    	; 0x3658 <qtm_key_sensors_process+0x726>
    3450:	82 1b       	sub	r24, r18
    3452:	93 0b       	sbc	r25, r19
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	89 3c       	cpi	r24, 0xC9	; 201
    3458:	91 05       	cpc	r25, r1
    345a:	c0 f3       	brcs	.-16     	; 0x344c <qtm_key_sensors_process+0x51a>
    345c:	ef cf       	rjmp	.-34     	; 0x343c <qtm_key_sensors_process+0x50a>
    345e:	88 5c       	subi	r24, 0xC8	; 200
    3460:	91 09       	sbc	r25, r1
    3462:	e8 81       	ld	r30, Y
    3464:	f9 81       	ldd	r31, Y+1	; 0x01
    3466:	21 81       	ldd	r18, Z+1	; 0x01
    3468:	32 81       	ldd	r19, Z+2	; 0x02
    346a:	28 53       	subi	r18, 0x38	; 56
    346c:	3f 4f       	sbci	r19, 0xFF	; 255
    346e:	21 83       	std	Z+1, r18	; 0x01
    3470:	32 83       	std	Z+2, r19	; 0x02
    3472:	23 81       	ldd	r18, Z+3	; 0x03
    3474:	21 11       	cpse	r18, r1
    3476:	96 c0       	rjmp	.+300    	; 0x35a4 <qtm_key_sensors_process+0x672>
    3478:	24 81       	ldd	r18, Z+4	; 0x04
    347a:	22 23       	and	r18, r18
    347c:	11 f0       	breq	.+4      	; 0x3482 <qtm_key_sensors_process+0x550>
    347e:	21 50       	subi	r18, 0x01	; 1
    3480:	24 83       	std	Z+4, r18	; 0x04
    3482:	e8 81       	ld	r30, Y
    3484:	f9 81       	ldd	r31, Y+1	; 0x01
    3486:	25 81       	ldd	r18, Z+5	; 0x05
    3488:	22 23       	and	r18, r18
    348a:	11 f0       	breq	.+4      	; 0x3490 <qtm_key_sensors_process+0x55e>
    348c:	21 50       	subi	r18, 0x01	; 1
    348e:	25 83       	std	Z+5, r18	; 0x05
    3490:	8a 80       	ldd	r8, Y+2	; 0x02
    3492:	9b 80       	ldd	r9, Y+3	; 0x03
    3494:	d4 01       	movw	r26, r8
    3496:	16 96       	adiw	r26, 0x06	; 6
    3498:	2c 91       	ld	r18, X
    349a:	16 97       	sbiw	r26, 0x06	; 6
    349c:	21 11       	cpse	r18, r1
    349e:	1b c0       	rjmp	.+54     	; 0x34d6 <qtm_key_sensors_process+0x5a4>
    34a0:	8a 80       	ldd	r8, Y+2	; 0x02
    34a2:	9b 80       	ldd	r9, Y+3	; 0x03
    34a4:	f4 01       	movw	r30, r8
    34a6:	27 81       	ldd	r18, Z+7	; 0x07
    34a8:	21 11       	cpse	r18, r1
    34aa:	48 c0       	rjmp	.+144    	; 0x353c <qtm_key_sensors_process+0x60a>
    34ac:	ea 81       	ldd	r30, Y+2	; 0x02
    34ae:	fb 81       	ldd	r31, Y+3	; 0x03
    34b0:	23 81       	ldd	r18, Z+3	; 0x03
    34b2:	22 23       	and	r18, r18
    34b4:	61 f0       	breq	.+24     	; 0x34ce <qtm_key_sensors_process+0x59c>
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	a0 e0       	ldi	r26, 0x00	; 0
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	ea 81       	ldd	r30, Y+2	; 0x02
    34c0:	fb 81       	ldd	r31, Y+3	; 0x03
    34c2:	40 81       	ld	r20, Z
    34c4:	51 81       	ldd	r21, Z+1	; 0x01
    34c6:	a4 17       	cp	r26, r20
    34c8:	b5 07       	cpc	r27, r21
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <qtm_key_sensors_process+0x59c>
    34cc:	6e c0       	rjmp	.+220    	; 0x35aa <qtm_key_sensors_process+0x678>
    34ce:	89 3c       	cpi	r24, 0xC9	; 201
    34d0:	91 05       	cpc	r25, r1
    34d2:	28 f6       	brcc	.-118    	; 0x345e <qtm_key_sensors_process+0x52c>
    34d4:	bb cf       	rjmp	.-138    	; 0x344c <qtm_key_sensors_process+0x51a>
    34d6:	08 81       	ld	r16, Y
    34d8:	19 81       	ldd	r17, Y+1	; 0x01
    34da:	f8 01       	movw	r30, r16
    34dc:	24 81       	ldd	r18, Z+4	; 0x04
    34de:	21 11       	cpse	r18, r1
    34e0:	df cf       	rjmp	.-66     	; 0x34a0 <qtm_key_sensors_process+0x56e>
    34e2:	ed 90       	ld	r14, X+
    34e4:	fc 90       	ld	r15, X
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	40 e0       	ldi	r20, 0x00	; 0
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	4e 15       	cp	r20, r14
    34f0:	5f 05       	cpc	r21, r15
    34f2:	f1 f0       	breq	.+60     	; 0x3530 <qtm_key_sensors_process+0x5fe>
    34f4:	ec 81       	ldd	r30, Y+4	; 0x04
    34f6:	fd 81       	ldd	r31, Y+5	; 0x05
    34f8:	e6 0f       	add	r30, r22
    34fa:	f7 1f       	adc	r31, r23
    34fc:	20 81       	ld	r18, Z
    34fe:	23 30       	cpi	r18, 0x03	; 3
    3500:	11 f0       	breq	.+4      	; 0x3506 <qtm_key_sensors_process+0x5d4>
    3502:	28 30       	cpi	r18, 0x08	; 8
    3504:	81 f4       	brne	.+32     	; 0x3526 <qtm_key_sensors_process+0x5f4>
    3506:	24 81       	ldd	r18, Z+4	; 0x04
    3508:	35 81       	ldd	r19, Z+5	; 0x05
    350a:	c2 80       	ldd	r12, Z+2	; 0x02
    350c:	d3 80       	ldd	r13, Z+3	; 0x03
    350e:	d6 01       	movw	r26, r12
    3510:	11 96       	adiw	r26, 0x01	; 1
    3512:	cd 90       	ld	r12, X+
    3514:	dc 90       	ld	r13, X
    3516:	12 97       	sbiw	r26, 0x02	; 2
    3518:	2c 15       	cp	r18, r12
    351a:	3d 05       	cpc	r19, r13
    351c:	20 f4       	brcc	.+8      	; 0x3526 <qtm_key_sensors_process+0x5f4>
    351e:	2f 5f       	subi	r18, 0xFF	; 255
    3520:	3f 4f       	sbci	r19, 0xFF	; 255
    3522:	24 83       	std	Z+4, r18	; 0x04
    3524:	35 83       	std	Z+5, r19	; 0x05
    3526:	4f 5f       	subi	r20, 0xFF	; 255
    3528:	5f 4f       	sbci	r21, 0xFF	; 255
    352a:	6a 5f       	subi	r22, 0xFA	; 250
    352c:	7f 4f       	sbci	r23, 0xFF	; 255
    352e:	df cf       	rjmp	.-66     	; 0x34ee <qtm_key_sensors_process+0x5bc>
    3530:	f4 01       	movw	r30, r8
    3532:	26 81       	ldd	r18, Z+6	; 0x06
    3534:	d8 01       	movw	r26, r16
    3536:	14 96       	adiw	r26, 0x04	; 4
    3538:	2c 93       	st	X, r18
    353a:	b2 cf       	rjmp	.-156    	; 0x34a0 <qtm_key_sensors_process+0x56e>
    353c:	08 81       	ld	r16, Y
    353e:	19 81       	ldd	r17, Y+1	; 0x01
    3540:	d8 01       	movw	r26, r16
    3542:	15 96       	adiw	r26, 0x05	; 5
    3544:	2c 91       	ld	r18, X
    3546:	21 11       	cpse	r18, r1
    3548:	b1 cf       	rjmp	.-158    	; 0x34ac <qtm_key_sensors_process+0x57a>
    354a:	e0 80       	ld	r14, Z
    354c:	f1 80       	ldd	r15, Z+1	; 0x01
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	40 e0       	ldi	r20, 0x00	; 0
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	4e 15       	cp	r20, r14
    3558:	5f 05       	cpc	r21, r15
    355a:	f1 f0       	breq	.+60     	; 0x3598 <qtm_key_sensors_process+0x666>
    355c:	ec 81       	ldd	r30, Y+4	; 0x04
    355e:	fd 81       	ldd	r31, Y+5	; 0x05
    3560:	e6 0f       	add	r30, r22
    3562:	f7 1f       	adc	r31, r23
    3564:	20 81       	ld	r18, Z
    3566:	23 30       	cpi	r18, 0x03	; 3
    3568:	11 f0       	breq	.+4      	; 0x356e <qtm_key_sensors_process+0x63c>
    356a:	28 30       	cpi	r18, 0x08	; 8
    356c:	81 f4       	brne	.+32     	; 0x358e <qtm_key_sensors_process+0x65c>
    356e:	24 81       	ldd	r18, Z+4	; 0x04
    3570:	35 81       	ldd	r19, Z+5	; 0x05
    3572:	c2 80       	ldd	r12, Z+2	; 0x02
    3574:	d3 80       	ldd	r13, Z+3	; 0x03
    3576:	d6 01       	movw	r26, r12
    3578:	11 96       	adiw	r26, 0x01	; 1
    357a:	cd 90       	ld	r12, X+
    357c:	dc 90       	ld	r13, X
    357e:	12 97       	sbiw	r26, 0x02	; 2
    3580:	c2 16       	cp	r12, r18
    3582:	d3 06       	cpc	r13, r19
    3584:	20 f4       	brcc	.+8      	; 0x358e <qtm_key_sensors_process+0x65c>
    3586:	21 50       	subi	r18, 0x01	; 1
    3588:	31 09       	sbc	r19, r1
    358a:	24 83       	std	Z+4, r18	; 0x04
    358c:	35 83       	std	Z+5, r19	; 0x05
    358e:	4f 5f       	subi	r20, 0xFF	; 255
    3590:	5f 4f       	sbci	r21, 0xFF	; 255
    3592:	6a 5f       	subi	r22, 0xFA	; 250
    3594:	7f 4f       	sbci	r23, 0xFF	; 255
    3596:	df cf       	rjmp	.-66     	; 0x3556 <qtm_key_sensors_process+0x624>
    3598:	f4 01       	movw	r30, r8
    359a:	27 81       	ldd	r18, Z+7	; 0x07
    359c:	d8 01       	movw	r26, r16
    359e:	15 96       	adiw	r26, 0x05	; 5
    35a0:	2c 93       	st	X, r18
    35a2:	84 cf       	rjmp	.-248    	; 0x34ac <qtm_key_sensors_process+0x57a>
    35a4:	21 50       	subi	r18, 0x01	; 1
    35a6:	23 83       	std	Z+3, r18	; 0x03
    35a8:	81 cf       	rjmp	.-254    	; 0x34ac <qtm_key_sensors_process+0x57a>
    35aa:	a9 01       	movw	r20, r18
    35ac:	44 0f       	add	r20, r20
    35ae:	55 1f       	adc	r21, r21
    35b0:	ec 81       	ldd	r30, Y+4	; 0x04
    35b2:	fd 81       	ldd	r31, Y+5	; 0x05
    35b4:	e4 0f       	add	r30, r20
    35b6:	f5 1f       	adc	r31, r21
    35b8:	60 81       	ld	r22, Z
    35ba:	65 38       	cpi	r22, 0x85	; 133
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <qtm_key_sensors_process+0x68e>
    35be:	47 c0       	rjmp	.+142    	; 0x364e <qtm_key_sensors_process+0x71c>
    35c0:	61 81       	ldd	r22, Z+1	; 0x01
    35c2:	66 23       	and	r22, r22
    35c4:	19 f0       	breq	.+6      	; 0x35cc <qtm_key_sensors_process+0x69a>
    35c6:	61 50       	subi	r22, 0x01	; 1
    35c8:	61 83       	std	Z+1, r22	; 0x01
    35ca:	41 c0       	rjmp	.+130    	; 0x364e <qtm_key_sensors_process+0x71c>
    35cc:	a0 82       	st	Z, r10
    35ce:	6c 81       	ldd	r22, Y+4	; 0x04
    35d0:	7d 81       	ldd	r23, Y+5	; 0x05
    35d2:	fb 01       	movw	r30, r22
    35d4:	e4 0f       	add	r30, r20
    35d6:	f5 1f       	adc	r31, r21
    35d8:	02 80       	ldd	r0, Z+2	; 0x02
    35da:	f3 81       	ldd	r31, Z+3	; 0x03
    35dc:	e0 2d       	mov	r30, r0
    35de:	b0 82       	st	Z, r11
    35e0:	ee 81       	ldd	r30, Y+6	; 0x06
    35e2:	ff 81       	ldd	r31, Y+7	; 0x07
    35e4:	e2 0f       	add	r30, r18
    35e6:	f3 1f       	adc	r31, r19
    35e8:	d2 80       	ldd	r13, Z+2	; 0x02
    35ea:	dd 20       	and	r13, r13
    35ec:	81 f1       	breq	.+96     	; 0x364e <qtm_key_sensors_process+0x71c>
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	50 e0       	ldi	r21, 0x00	; 0
    35f2:	00 e0       	ldi	r16, 0x00	; 0
    35f4:	10 e0       	ldi	r17, 0x00	; 0
    35f6:	ea 81       	ldd	r30, Y+2	; 0x02
    35f8:	fb 81       	ldd	r31, Y+3	; 0x03
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	06 17       	cp	r16, r22
    3600:	17 07       	cpc	r17, r23
    3602:	28 f5       	brcc	.+74     	; 0x364e <qtm_key_sensors_process+0x71c>
    3604:	ee 81       	ldd	r30, Y+6	; 0x06
    3606:	ff 81       	ldd	r31, Y+7	; 0x07
    3608:	e4 0f       	add	r30, r20
    360a:	f5 1f       	adc	r31, r21
    360c:	62 81       	ldd	r22, Z+2	; 0x02
    360e:	d6 12       	cpse	r13, r22
    3610:	19 c0       	rjmp	.+50     	; 0x3644 <qtm_key_sensors_process+0x712>
    3612:	ba 01       	movw	r22, r20
    3614:	66 0f       	add	r22, r22
    3616:	77 1f       	adc	r23, r23
    3618:	ec 81       	ldd	r30, Y+4	; 0x04
    361a:	fd 81       	ldd	r31, Y+5	; 0x05
    361c:	4f 01       	movw	r8, r30
    361e:	86 0e       	add	r8, r22
    3620:	97 1e       	adc	r9, r23
    3622:	f4 01       	movw	r30, r8
    3624:	e2 80       	ldd	r14, Z+2	; 0x02
    3626:	f3 80       	ldd	r15, Z+3	; 0x03
    3628:	f7 01       	movw	r30, r14
    362a:	f0 80       	ld	r15, Z
    362c:	f0 fe       	sbrs	r15, 0
    362e:	0a c0       	rjmp	.+20     	; 0x3644 <qtm_key_sensors_process+0x712>
    3630:	f4 01       	movw	r30, r8
    3632:	a0 82       	st	Z, r10
    3634:	ec 81       	ldd	r30, Y+4	; 0x04
    3636:	fd 81       	ldd	r31, Y+5	; 0x05
    3638:	e6 0f       	add	r30, r22
    363a:	f7 1f       	adc	r31, r23
    363c:	02 80       	ldd	r0, Z+2	; 0x02
    363e:	f3 81       	ldd	r31, Z+3	; 0x03
    3640:	e0 2d       	mov	r30, r0
    3642:	b0 82       	st	Z, r11
    3644:	0f 5f       	subi	r16, 0xFF	; 255
    3646:	1f 4f       	sbci	r17, 0xFF	; 255
    3648:	4d 5f       	subi	r20, 0xFD	; 253
    364a:	5f 4f       	sbci	r21, 0xFF	; 255
    364c:	d4 cf       	rjmp	.-88     	; 0x35f6 <qtm_key_sensors_process+0x6c4>
    364e:	11 96       	adiw	r26, 0x01	; 1
    3650:	2d 5f       	subi	r18, 0xFD	; 253
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	34 cf       	rjmp	.-408    	; 0x34be <qtm_key_sensors_process+0x58c>
    3656:	8b e0       	ldi	r24, 0x0B	; 11
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	df 90       	pop	r13
    3666:	cf 90       	pop	r12
    3668:	bf 90       	pop	r11
    366a:	af 90       	pop	r10
    366c:	9f 90       	pop	r9
    366e:	8f 90       	pop	r8
    3670:	7f 90       	pop	r7
    3672:	6f 90       	pop	r6
    3674:	5f 90       	pop	r5
    3676:	4f 90       	pop	r4
    3678:	3f 90       	pop	r3
    367a:	2f 90       	pop	r2
    367c:	08 95       	ret

0000367e <divide>:
    367e:	9c 01       	movw	r18, r24
    3680:	61 15       	cp	r22, r1
    3682:	71 05       	cpc	r23, r1
    3684:	09 f1       	breq	.+66     	; 0x36c8 <divide+0x4a>
    3686:	4f 5f       	subi	r20, 0xFF	; 255
    3688:	37 fd       	sbrc	r19, 7
    368a:	06 c0       	rjmp	.+12     	; 0x3698 <divide+0x1a>
    368c:	44 23       	and	r20, r20
    368e:	21 f0       	breq	.+8      	; 0x3698 <divide+0x1a>
    3690:	41 50       	subi	r20, 0x01	; 1
    3692:	22 0f       	add	r18, r18
    3694:	33 1f       	adc	r19, r19
    3696:	f8 cf       	rjmp	.-16     	; 0x3688 <divide+0xa>
    3698:	77 fd       	sbrc	r23, 7
    369a:	04 c0       	rjmp	.+8      	; 0x36a4 <divide+0x26>
    369c:	4f 5f       	subi	r20, 0xFF	; 255
    369e:	66 0f       	add	r22, r22
    36a0:	77 1f       	adc	r23, r23
    36a2:	fa cf       	rjmp	.-12     	; 0x3698 <divide+0x1a>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	44 23       	and	r20, r20
    36aa:	81 f0       	breq	.+32     	; 0x36cc <divide+0x4e>
    36ac:	97 fd       	sbrc	r25, 7
    36ae:	0c c0       	rjmp	.+24     	; 0x36c8 <divide+0x4a>
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	41 50       	subi	r20, 0x01	; 1
    36b6:	26 17       	cp	r18, r22
    36b8:	37 07       	cpc	r19, r23
    36ba:	18 f0       	brcs	.+6      	; 0x36c2 <divide+0x44>
    36bc:	26 1b       	sub	r18, r22
    36be:	37 0b       	sbc	r19, r23
    36c0:	01 96       	adiw	r24, 0x01	; 1
    36c2:	76 95       	lsr	r23
    36c4:	67 95       	ror	r22
    36c6:	f0 cf       	rjmp	.-32     	; 0x36a8 <divide+0x2a>
    36c8:	8f ef       	ldi	r24, 0xFF	; 255
    36ca:	9f ef       	ldi	r25, 0xFF	; 255
    36cc:	08 95       	ret

000036ce <qtm_init_scroller_module>:
    36ce:	cf 93       	push	r28
    36d0:	df 93       	push	r29
    36d2:	fc 01       	movw	r30, r24
    36d4:	89 2b       	or	r24, r25
    36d6:	b9 f1       	breq	.+110    	; 0x3746 <qtm_init_scroller_module+0x78>
    36d8:	24 81       	ldd	r18, Z+4	; 0x04
    36da:	35 81       	ldd	r19, Z+5	; 0x05
    36dc:	21 15       	cp	r18, r1
    36de:	31 05       	cpc	r19, r1
    36e0:	91 f1       	breq	.+100    	; 0x3746 <qtm_init_scroller_module+0x78>
    36e2:	46 81       	ldd	r20, Z+6	; 0x06
    36e4:	57 81       	ldd	r21, Z+7	; 0x07
    36e6:	41 15       	cp	r20, r1
    36e8:	51 05       	cpc	r21, r1
    36ea:	69 f1       	breq	.+90     	; 0x3746 <qtm_init_scroller_module+0x78>
    36ec:	a0 81       	ld	r26, Z
    36ee:	b1 81       	ldd	r27, Z+1	; 0x01
    36f0:	1c 92       	st	X, r1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	a2 81       	ldd	r26, Z+2	; 0x02
    36f6:	b3 81       	ldd	r27, Z+3	; 0x03
    36f8:	12 96       	adiw	r26, 0x02	; 2
    36fa:	8c 91       	ld	r24, X
    36fc:	98 17       	cp	r25, r24
    36fe:	08 f5       	brcc	.+66     	; 0x3742 <qtm_init_scroller_module+0x74>
    3700:	d9 01       	movw	r26, r18
    3702:	89 e0       	ldi	r24, 0x09	; 9
    3704:	98 9f       	mul	r25, r24
    3706:	a0 0d       	add	r26, r0
    3708:	b1 1d       	adc	r27, r1
    370a:	11 24       	eor	r1, r1
    370c:	11 96       	adiw	r26, 0x01	; 1
    370e:	1c 92       	st	X, r1
    3710:	11 97       	sbiw	r26, 0x01	; 1
    3712:	ea 01       	movw	r28, r20
    3714:	88 e0       	ldi	r24, 0x08	; 8
    3716:	98 9f       	mul	r25, r24
    3718:	c0 0d       	add	r28, r0
    371a:	d1 1d       	adc	r29, r1
    371c:	11 24       	eor	r1, r1
    371e:	8d 81       	ldd	r24, Y+5	; 0x05
    3720:	12 96       	adiw	r26, 0x02	; 2
    3722:	8c 93       	st	X, r24
    3724:	12 97       	sbiw	r26, 0x02	; 2
    3726:	13 96       	adiw	r26, 0x03	; 3
    3728:	1d 92       	st	X+, r1
    372a:	1c 92       	st	X, r1
    372c:	14 97       	sbiw	r26, 0x04	; 4
    372e:	15 96       	adiw	r26, 0x05	; 5
    3730:	1d 92       	st	X+, r1
    3732:	1c 92       	st	X, r1
    3734:	16 97       	sbiw	r26, 0x06	; 6
    3736:	17 96       	adiw	r26, 0x07	; 7
    3738:	1d 92       	st	X+, r1
    373a:	1c 92       	st	X, r1
    373c:	18 97       	sbiw	r26, 0x08	; 8
    373e:	9f 5f       	subi	r25, 0xFF	; 255
    3740:	d9 cf       	rjmp	.-78     	; 0x36f4 <qtm_init_scroller_module+0x26>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	01 c0       	rjmp	.+2      	; 0x3748 <qtm_init_scroller_module+0x7a>
    3746:	8b e0       	ldi	r24, 0x0B	; 11
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	08 95       	ret

0000374e <qtm_scroller_process>:
    374e:	2f 92       	push	r2
    3750:	3f 92       	push	r3
    3752:	4f 92       	push	r4
    3754:	5f 92       	push	r5
    3756:	6f 92       	push	r6
    3758:	7f 92       	push	r7
    375a:	8f 92       	push	r8
    375c:	9f 92       	push	r9
    375e:	af 92       	push	r10
    3760:	bf 92       	push	r11
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	ff 92       	push	r15
    376a:	0f 93       	push	r16
    376c:	1f 93       	push	r17
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	61 97       	sbiw	r28, 0x11	; 17
    3778:	cd bf       	out	0x3d, r28	; 61
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	fc 01       	movw	r30, r24
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	09 f4       	brne	.+2      	; 0x3784 <qtm_scroller_process+0x36>
    3782:	dc c2       	rjmp	.+1464   	; 0x3d3c <qtm_scroller_process+0x5ee>
    3784:	e4 80       	ldd	r14, Z+4	; 0x04
    3786:	f5 80       	ldd	r15, Z+5	; 0x05
    3788:	ea 86       	std	Y+10, r14	; 0x0a
    378a:	fb 86       	std	Y+11, r15	; 0x0b
    378c:	ef 28       	or	r14, r15
    378e:	09 f4       	brne	.+2      	; 0x3792 <qtm_scroller_process+0x44>
    3790:	d5 c2       	rjmp	.+1450   	; 0x3d3c <qtm_scroller_process+0x5ee>
    3792:	e6 80       	ldd	r14, Z+6	; 0x06
    3794:	f7 80       	ldd	r15, Z+7	; 0x07
    3796:	e8 86       	std	Y+8, r14	; 0x08
    3798:	f9 86       	std	Y+9, r15	; 0x09
    379a:	ef 28       	or	r14, r15
    379c:	09 f4       	brne	.+2      	; 0x37a0 <qtm_scroller_process+0x52>
    379e:	ce c2       	rjmp	.+1436   	; 0x3d3c <qtm_scroller_process+0x5ee>
    37a0:	a2 81       	ldd	r26, Z+2	; 0x02
    37a2:	b3 81       	ldd	r27, Z+3	; 0x03
    37a4:	4d 90       	ld	r4, X+
    37a6:	5c 90       	ld	r5, X
    37a8:	41 14       	cp	r4, r1
    37aa:	51 04       	cpc	r5, r1
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <qtm_scroller_process+0x62>
    37ae:	c6 c2       	rjmp	.+1420   	; 0x3d3c <qtm_scroller_process+0x5ee>
    37b0:	8e 83       	std	Y+6, r24	; 0x06
    37b2:	9f 83       	std	Y+7, r25	; 0x07
    37b4:	00 e0       	ldi	r16, 0x00	; 0
    37b6:	1a 82       	std	Y+2, r1	; 0x02
    37b8:	91 2c       	mov	r9, r1
    37ba:	16 e0       	ldi	r17, 0x06	; 6
    37bc:	81 2e       	mov	r8, r17
    37be:	ae 81       	ldd	r26, Y+6	; 0x06
    37c0:	bf 81       	ldd	r27, Y+7	; 0x07
    37c2:	12 96       	adiw	r26, 0x02	; 2
    37c4:	ed 91       	ld	r30, X+
    37c6:	fc 91       	ld	r31, X
    37c8:	13 97       	sbiw	r26, 0x03	; 3
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	98 16       	cp	r9, r24
    37ce:	08 f0       	brcs	.+2      	; 0x37d2 <qtm_scroller_process+0x84>
    37d0:	b0 c2       	rjmp	.+1376   	; 0x3d32 <qtm_scroller_process+0x5e4>
    37d2:	68 84       	ldd	r6, Y+8	; 0x08
    37d4:	79 84       	ldd	r7, Y+9	; 0x09
    37d6:	28 e0       	ldi	r18, 0x08	; 8
    37d8:	92 9e       	mul	r9, r18
    37da:	60 0c       	add	r6, r0
    37dc:	71 1c       	adc	r7, r1
    37de:	11 24       	eor	r1, r1
    37e0:	d3 01       	movw	r26, r6
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	4d 91       	ld	r20, X+
    37e6:	5c 91       	ld	r21, X
    37e8:	12 97       	sbiw	r26, 0x02	; 2
    37ea:	13 96       	adiw	r26, 0x03	; 3
    37ec:	ac 90       	ld	r10, X
    37ee:	7a 01       	movw	r14, r20
    37f0:	ea 0c       	add	r14, r10
    37f2:	f1 1c       	adc	r15, r1
    37f4:	ca 01       	movw	r24, r20
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	8e 15       	cp	r24, r14
    37fa:	9f 05       	cpc	r25, r15
    37fc:	70 f4       	brcc	.+28     	; 0x381a <qtm_scroller_process+0xcc>
    37fe:	88 9e       	mul	r8, r24
    3800:	f0 01       	movw	r30, r0
    3802:	89 9e       	mul	r8, r25
    3804:	f0 0d       	add	r31, r0
    3806:	11 24       	eor	r1, r1
    3808:	e4 0d       	add	r30, r4
    380a:	f5 1d       	adc	r31, r5
    380c:	20 81       	ld	r18, Z
    380e:	25 38       	cpi	r18, 0x85	; 133
    3810:	11 f4       	brne	.+4      	; 0x3816 <qtm_scroller_process+0xc8>
    3812:	c7 01       	movw	r24, r14
    3814:	61 e0       	ldi	r22, 0x01	; 1
    3816:	01 96       	adiw	r24, 0x01	; 1
    3818:	ef cf       	rjmp	.-34     	; 0x37f8 <qtm_scroller_process+0xaa>
    381a:	84 9e       	mul	r8, r20
    381c:	f0 01       	movw	r30, r0
    381e:	85 9e       	mul	r8, r21
    3820:	f0 0d       	add	r31, r0
    3822:	11 24       	eor	r1, r1
    3824:	ec 83       	std	Y+4, r30	; 0x04
    3826:	fd 83       	std	Y+5, r31	; 0x05
    3828:	34 97       	sbiw	r30, 0x04	; 4
    382a:	e4 0d       	add	r30, r4
    382c:	f5 1d       	adc	r31, r5
    382e:	26 e0       	ldi	r18, 0x06	; 6
    3830:	a2 9e       	mul	r10, r18
    3832:	50 01       	movw	r10, r0
    3834:	11 24       	eor	r1, r1
    3836:	1a 01       	movw	r2, r20
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	18 8a       	std	Y+16, r1	; 0x10
    383c:	19 8a       	std	Y+17, r1	; 0x11
    383e:	2e 14       	cp	r2, r14
    3840:	3f 04       	cpc	r3, r15
    3842:	08 f0       	brcs	.+2      	; 0x3846 <qtm_scroller_process+0xf8>
    3844:	4f c0       	rjmp	.+158    	; 0x38e4 <qtm_scroller_process+0x196>
    3846:	86 81       	ldd	r24, Z+6	; 0x06
    3848:	97 81       	ldd	r25, Z+7	; 0x07
    384a:	dc 01       	movw	r26, r24
    384c:	11 96       	adiw	r26, 0x01	; 1
    384e:	2d 91       	ld	r18, X+
    3850:	3c 91       	ld	r19, X
    3852:	12 97       	sbiw	r26, 0x02	; 2
    3854:	80 85       	ldd	r24, Z+8	; 0x08
    3856:	91 85       	ldd	r25, Z+9	; 0x09
    3858:	28 1b       	sub	r18, r24
    385a:	39 0b       	sbc	r19, r25
    385c:	12 16       	cp	r1, r18
    385e:	13 06       	cpc	r1, r19
    3860:	14 f0       	brlt	.+4      	; 0x3866 <qtm_scroller_process+0x118>
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	24 16       	cp	r2, r20
    3868:	35 06       	cpc	r3, r21
    386a:	a9 f4       	brne	.+42     	; 0x3896 <qtm_scroller_process+0x148>
    386c:	d3 01       	movw	r26, r6
    386e:	8c 91       	ld	r24, X
    3870:	81 30       	cpi	r24, 0x01	; 1
    3872:	f9 f4       	brne	.+62     	; 0x38b2 <qtm_scroller_process+0x164>
    3874:	6f 01       	movw	r12, r30
    3876:	ca 0c       	add	r12, r10
    3878:	db 1c       	adc	r13, r11
    387a:	d6 01       	movw	r26, r12
    387c:	8d 91       	ld	r24, X+
    387e:	9c 91       	ld	r25, X
    3880:	dc 01       	movw	r26, r24
    3882:	11 96       	adiw	r26, 0x01	; 1
    3884:	8d 91       	ld	r24, X+
    3886:	9c 91       	ld	r25, X
    3888:	12 97       	sbiw	r26, 0x02	; 2
    388a:	d6 01       	movw	r26, r12
    388c:	12 96       	adiw	r26, 0x02	; 2
    388e:	cd 90       	ld	r12, X+
    3890:	dc 90       	ld	r13, X
    3892:	13 97       	sbiw	r26, 0x03	; 3
    3894:	09 c0       	rjmp	.+18     	; 0x38a8 <qtm_scroller_process+0x15a>
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	dc 01       	movw	r26, r24
    389c:	11 96       	adiw	r26, 0x01	; 1
    389e:	8d 91       	ld	r24, X+
    38a0:	9c 91       	ld	r25, X
    38a2:	12 97       	sbiw	r26, 0x02	; 2
    38a4:	c2 80       	ldd	r12, Z+2	; 0x02
    38a6:	d3 80       	ldd	r13, Z+3	; 0x03
    38a8:	8c 19       	sub	r24, r12
    38aa:	9d 09       	sbc	r25, r13
    38ac:	18 16       	cp	r1, r24
    38ae:	19 06       	cpc	r1, r25
    38b0:	14 f0       	brlt	.+4      	; 0x38b6 <qtm_scroller_process+0x168>
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	28 0f       	add	r18, r24
    38b8:	39 1f       	adc	r19, r25
    38ba:	d3 01       	movw	r26, r6
    38bc:	16 96       	adiw	r26, 0x06	; 6
    38be:	8d 91       	ld	r24, X+
    38c0:	9c 91       	ld	r25, X
    38c2:	17 97       	sbiw	r26, 0x07	; 7
    38c4:	28 17       	cp	r18, r24
    38c6:	39 07       	cpc	r19, r25
    38c8:	40 f0       	brcs	.+16     	; 0x38da <qtm_scroller_process+0x18c>
    38ca:	88 89       	ldd	r24, Y+16	; 0x10
    38cc:	99 89       	ldd	r25, Y+17	; 0x11
    38ce:	82 17       	cp	r24, r18
    38d0:	93 07       	cpc	r25, r19
    38d2:	10 f4       	brcc	.+4      	; 0x38d8 <qtm_scroller_process+0x18a>
    38d4:	28 8b       	std	Y+16, r18	; 0x10
    38d6:	39 8b       	std	Y+17, r19	; 0x11
    38d8:	71 e0       	ldi	r23, 0x01	; 1
    38da:	9f ef       	ldi	r25, 0xFF	; 255
    38dc:	29 1a       	sub	r2, r25
    38de:	39 0a       	sbc	r3, r25
    38e0:	36 96       	adiw	r30, 0x06	; 6
    38e2:	ad cf       	rjmp	.-166    	; 0x383e <qtm_scroller_process+0xf0>
    38e4:	71 11       	cpse	r23, r1
    38e6:	01 c0       	rjmp	.+2      	; 0x38ea <qtm_scroller_process+0x19c>
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	a9 e0       	ldi	r26, 0x09	; 9
    38ec:	9a 9e       	mul	r9, r26
    38ee:	90 01       	movw	r18, r0
    38f0:	11 24       	eor	r1, r1
    38f2:	ea 84       	ldd	r14, Y+10	; 0x0a
    38f4:	fb 84       	ldd	r15, Y+11	; 0x0b
    38f6:	e2 0e       	add	r14, r18
    38f8:	f3 1e       	adc	r15, r19
    38fa:	ee 86       	std	Y+14, r14	; 0x0e
    38fc:	ff 86       	std	Y+15, r15	; 0x0f
    38fe:	d7 01       	movw	r26, r14
    3900:	8c 91       	ld	r24, X
    3902:	ae 81       	ldd	r26, Y+6	; 0x06
    3904:	bf 81       	ldd	r27, Y+7	; 0x07
    3906:	14 96       	adiw	r26, 0x04	; 4
    3908:	ed 91       	ld	r30, X+
    390a:	fc 91       	ld	r31, X
    390c:	15 97       	sbiw	r26, 0x05	; 5
    390e:	b8 2f       	mov	r27, r24
    3910:	b1 70       	andi	r27, 0x01	; 1
    3912:	bd 87       	std	Y+13, r27	; 0x0d
    3914:	80 ff       	sbrs	r24, 0
    3916:	1e c0       	rjmp	.+60     	; 0x3954 <qtm_scroller_process+0x206>
    3918:	7f 01       	movw	r14, r30
    391a:	e2 0e       	add	r14, r18
    391c:	f3 1e       	adc	r15, r19
    391e:	d7 01       	movw	r26, r14
    3920:	17 96       	adiw	r26, 0x07	; 7
    3922:	cd 90       	ld	r12, X+
    3924:	dc 90       	ld	r13, X
    3926:	18 97       	sbiw	r26, 0x08	; 8
    3928:	c6 01       	movw	r24, r12
    392a:	88 0f       	add	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	8c 0d       	add	r24, r12
    3930:	9d 1d       	adc	r25, r13
    3932:	a8 89       	ldd	r26, Y+16	; 0x10
    3934:	b9 89       	ldd	r27, Y+17	; 0x11
    3936:	8a 0f       	add	r24, r26
    3938:	9b 1f       	adc	r25, r27
    393a:	96 95       	lsr	r25
    393c:	87 95       	ror	r24
    393e:	96 95       	lsr	r25
    3940:	87 95       	ror	r24
    3942:	d7 01       	movw	r26, r14
    3944:	17 96       	adiw	r26, 0x07	; 7
    3946:	8d 93       	st	X+, r24
    3948:	9c 93       	st	X, r25
    394a:	18 97       	sbiw	r26, 0x08	; 8
    394c:	77 23       	and	r23, r23
    394e:	61 f0       	breq	.+24     	; 0x3968 <qtm_scroller_process+0x21a>
    3950:	61 e0       	ldi	r22, 0x01	; 1
    3952:	0a c0       	rjmp	.+20     	; 0x3968 <qtm_scroller_process+0x21a>
    3954:	cf 01       	movw	r24, r30
    3956:	82 0f       	add	r24, r18
    3958:	93 1f       	adc	r25, r19
    395a:	e8 88       	ldd	r14, Y+16	; 0x10
    395c:	f9 88       	ldd	r15, Y+17	; 0x11
    395e:	dc 01       	movw	r26, r24
    3960:	17 96       	adiw	r26, 0x07	; 7
    3962:	ed 92       	st	X+, r14
    3964:	fc 92       	st	X, r15
    3966:	18 97       	sbiw	r26, 0x08	; 8
    3968:	d3 01       	movw	r26, r6
    396a:	bc 91       	ld	r27, X
    396c:	b9 83       	std	Y+1, r27	; 0x01
    396e:	b2 30       	cpi	r27, 0x02	; 2
    3970:	08 f0       	brcs	.+2      	; 0x3974 <qtm_scroller_process+0x226>
    3972:	d4 c1       	rjmp	.+936    	; 0x3d1c <qtm_scroller_process+0x5ce>
    3974:	d3 01       	movw	r26, r6
    3976:	14 96       	adiw	r26, 0x04	; 4
    3978:	1c 91       	ld	r17, X
    397a:	10 3d       	cpi	r17, 0xD0	; 208
    397c:	08 f0       	brcs	.+2      	; 0x3980 <qtm_scroller_process+0x232>
    397e:	ce c1       	rjmp	.+924    	; 0x3d1c <qtm_scroller_process+0x5ce>
    3980:	61 11       	cpse	r22, r1
    3982:	05 c0       	rjmp	.+10     	; 0x398e <qtm_scroller_process+0x240>
    3984:	e2 0f       	add	r30, r18
    3986:	f3 1f       	adc	r31, r19
    3988:	17 82       	std	Z+7, r1	; 0x07
    398a:	10 86       	std	Z+8, r1	; 0x08
    398c:	c8 c1       	rjmp	.+912    	; 0x3d1e <qtm_scroller_process+0x5d0>
    398e:	f3 01       	movw	r30, r6
    3990:	f3 81       	ldd	r31, Z+3	; 0x03
    3992:	fb 83       	std	Y+3, r31	; 0x03
    3994:	e1 2e       	mov	r14, r17
    3996:	e2 94       	swap	r14
    3998:	9f e0       	ldi	r25, 0x0F	; 15
    399a:	e9 22       	and	r14, r25
    399c:	ec 86       	std	Y+12, r14	; 0x0c
    399e:	ac 80       	ldd	r10, Y+4	; 0x04
    39a0:	bd 80       	ldd	r11, Y+5	; 0x05
    39a2:	a4 0c       	add	r10, r4
    39a4:	b5 1c       	adc	r11, r5
    39a6:	f5 01       	movw	r30, r10
    39a8:	ba 01       	movw	r22, r20
    39aa:	21 2c       	mov	r2, r1
    39ac:	31 2c       	mov	r3, r1
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	8b 81       	ldd	r24, Y+3	; 0x03
    39b4:	e8 2e       	mov	r14, r24
    39b6:	f1 2c       	mov	r15, r1
    39b8:	6a 01       	movw	r12, r20
    39ba:	ce 0c       	add	r12, r14
    39bc:	df 1c       	adc	r13, r15
    39be:	6c 15       	cp	r22, r12
    39c0:	7d 05       	cpc	r23, r13
    39c2:	b0 f4       	brcc	.+44     	; 0x39f0 <qtm_scroller_process+0x2a2>
    39c4:	a2 81       	ldd	r26, Z+2	; 0x02
    39c6:	b3 81       	ldd	r27, Z+3	; 0x03
    39c8:	11 96       	adiw	r26, 0x01	; 1
    39ca:	8d 91       	ld	r24, X+
    39cc:	9c 91       	ld	r25, X
    39ce:	12 97       	sbiw	r26, 0x02	; 2
    39d0:	a4 81       	ldd	r26, Z+4	; 0x04
    39d2:	b5 81       	ldd	r27, Z+5	; 0x05
    39d4:	8a 1b       	sub	r24, r26
    39d6:	9b 0b       	sbc	r25, r27
    39d8:	18 16       	cp	r1, r24
    39da:	19 06       	cpc	r1, r25
    39dc:	2c f4       	brge	.+10     	; 0x39e8 <qtm_scroller_process+0x29a>
    39de:	28 16       	cp	r2, r24
    39e0:	39 06       	cpc	r3, r25
    39e2:	14 f4       	brge	.+4      	; 0x39e8 <qtm_scroller_process+0x29a>
    39e4:	1c 01       	movw	r2, r24
    39e6:	9b 01       	movw	r18, r22
    39e8:	6f 5f       	subi	r22, 0xFF	; 255
    39ea:	7f 4f       	sbci	r23, 0xFF	; 255
    39ec:	36 96       	adiw	r30, 0x06	; 6
    39ee:	e7 cf       	rjmp	.-50     	; 0x39be <qtm_scroller_process+0x270>
    39f0:	42 17       	cp	r20, r18
    39f2:	53 07       	cpc	r21, r19
    39f4:	79 f5       	brne	.+94     	; 0x3a54 <qtm_scroller_process+0x306>
    39f6:	99 81       	ldd	r25, Y+1	; 0x01
    39f8:	91 30       	cpi	r25, 0x01	; 1
    39fa:	09 f0       	breq	.+2      	; 0x39fe <qtm_scroller_process+0x2b0>
    39fc:	a1 c1       	rjmp	.+834    	; 0x3d40 <qtm_scroller_process+0x5f2>
    39fe:	8c 9c       	mul	r8, r12
    3a00:	f0 01       	movw	r30, r0
    3a02:	8d 9c       	mul	r8, r13
    3a04:	f0 0d       	add	r31, r0
    3a06:	11 24       	eor	r1, r1
    3a08:	36 97       	sbiw	r30, 0x06	; 6
    3a0a:	e4 0d       	add	r30, r4
    3a0c:	f5 1d       	adc	r31, r5
    3a0e:	a2 81       	ldd	r26, Z+2	; 0x02
    3a10:	b3 81       	ldd	r27, Z+3	; 0x03
    3a12:	11 96       	adiw	r26, 0x01	; 1
    3a14:	6d 91       	ld	r22, X+
    3a16:	7c 91       	ld	r23, X
    3a18:	12 97       	sbiw	r26, 0x02	; 2
    3a1a:	84 81       	ldd	r24, Z+4	; 0x04
    3a1c:	95 81       	ldd	r25, Z+5	; 0x05
    3a1e:	68 1b       	sub	r22, r24
    3a20:	79 0b       	sbc	r23, r25
    3a22:	ec 81       	ldd	r30, Y+4	; 0x04
    3a24:	fd 81       	ldd	r31, Y+5	; 0x05
    3a26:	36 96       	adiw	r30, 0x06	; 6
    3a28:	e4 0d       	add	r30, r4
    3a2a:	f5 1d       	adc	r31, r5
    3a2c:	a2 81       	ldd	r26, Z+2	; 0x02
    3a2e:	b3 81       	ldd	r27, Z+3	; 0x03
    3a30:	11 96       	adiw	r26, 0x01	; 1
    3a32:	8d 91       	ld	r24, X+
    3a34:	9c 91       	ld	r25, X
    3a36:	12 97       	sbiw	r26, 0x02	; 2
    3a38:	04 80       	ldd	r0, Z+4	; 0x04
    3a3a:	f5 81       	ldd	r31, Z+5	; 0x05
    3a3c:	e0 2d       	mov	r30, r0
    3a3e:	8e 1b       	sub	r24, r30
    3a40:	9f 0b       	sbc	r25, r31
    3a42:	97 ff       	sbrs	r25, 7
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <qtm_scroller_process+0x2fc>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	86 17       	cp	r24, r22
    3a4c:	97 07       	cpc	r25, r23
    3a4e:	0c f4       	brge	.+2      	; 0x3a52 <qtm_scroller_process+0x304>
    3a50:	7b c1       	rjmp	.+758    	; 0x3d48 <qtm_scroller_process+0x5fa>
    3a52:	12 c0       	rjmp	.+36     	; 0x3a78 <qtm_scroller_process+0x32a>
    3a54:	82 9e       	mul	r8, r18
    3a56:	f0 01       	movw	r30, r0
    3a58:	83 9e       	mul	r8, r19
    3a5a:	f0 0d       	add	r31, r0
    3a5c:	11 24       	eor	r1, r1
    3a5e:	36 97       	sbiw	r30, 0x06	; 6
    3a60:	e4 0d       	add	r30, r4
    3a62:	f5 1d       	adc	r31, r5
    3a64:	a2 81       	ldd	r26, Z+2	; 0x02
    3a66:	b3 81       	ldd	r27, Z+3	; 0x03
    3a68:	11 96       	adiw	r26, 0x01	; 1
    3a6a:	6d 91       	ld	r22, X+
    3a6c:	7c 91       	ld	r23, X
    3a6e:	12 97       	sbiw	r26, 0x02	; 2
    3a70:	84 81       	ldd	r24, Z+4	; 0x04
    3a72:	95 81       	ldd	r25, Z+5	; 0x05
    3a74:	68 1b       	sub	r22, r24
    3a76:	79 0b       	sbc	r23, r25
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	77 ff       	sbrs	r23, 7
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <qtm_scroller_process+0x334>
    3a7e:	60 e0       	ldi	r22, 0x00	; 0
    3a80:	70 e0       	ldi	r23, 0x00	; 0
    3a82:	a1 e0       	ldi	r26, 0x01	; 1
    3a84:	ca 1a       	sub	r12, r26
    3a86:	d1 08       	sbc	r13, r1
    3a88:	2c 15       	cp	r18, r12
    3a8a:	3d 05       	cpc	r19, r13
    3a8c:	81 f4       	brne	.+32     	; 0x3aae <qtm_scroller_process+0x360>
    3a8e:	b9 81       	ldd	r27, Y+1	; 0x01
    3a90:	b1 30       	cpi	r27, 0x01	; 1
    3a92:	29 f5       	brne	.+74     	; 0x3ade <qtm_scroller_process+0x390>
    3a94:	d5 01       	movw	r26, r10
    3a96:	12 96       	adiw	r26, 0x02	; 2
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	13 97       	sbiw	r26, 0x03	; 3
    3a9e:	c1 80       	ldd	r12, Z+1	; 0x01
    3aa0:	d2 80       	ldd	r13, Z+2	; 0x02
    3aa2:	14 96       	adiw	r26, 0x04	; 4
    3aa4:	0d 90       	ld	r0, X+
    3aa6:	bc 91       	ld	r27, X
    3aa8:	a0 2d       	mov	r26, r0
    3aaa:	f6 01       	movw	r30, r12
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <qtm_scroller_process+0x388>
    3aae:	f9 01       	movw	r30, r18
    3ab0:	31 96       	adiw	r30, 0x01	; 1
    3ab2:	8e 9e       	mul	r8, r30
    3ab4:	d0 01       	movw	r26, r0
    3ab6:	8f 9e       	mul	r8, r31
    3ab8:	b0 0d       	add	r27, r0
    3aba:	11 24       	eor	r1, r1
    3abc:	a4 0d       	add	r26, r4
    3abe:	b5 1d       	adc	r27, r5
    3ac0:	12 96       	adiw	r26, 0x02	; 2
    3ac2:	ed 91       	ld	r30, X+
    3ac4:	fc 91       	ld	r31, X
    3ac6:	13 97       	sbiw	r26, 0x03	; 3
    3ac8:	01 80       	ldd	r0, Z+1	; 0x01
    3aca:	f2 81       	ldd	r31, Z+2	; 0x02
    3acc:	e0 2d       	mov	r30, r0
    3ace:	14 96       	adiw	r26, 0x04	; 4
    3ad0:	0d 90       	ld	r0, X+
    3ad2:	bc 91       	ld	r27, X
    3ad4:	a0 2d       	mov	r26, r0
    3ad6:	ea 1b       	sub	r30, r26
    3ad8:	fb 0b       	sbc	r31, r27
    3ada:	f7 ff       	sbrs	r31, 7
    3adc:	02 c0       	rjmp	.+4      	; 0x3ae2 <qtm_scroller_process+0x394>
    3ade:	e0 e0       	ldi	r30, 0x00	; 0
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	bb 81       	ldd	r27, Y+3	; 0x03
    3ae4:	b0 31       	cpi	r27, 0x10	; 16
    3ae6:	28 f0       	brcs	.+10     	; 0x3af2 <qtm_scroller_process+0x3a4>
    3ae8:	b4 e0       	ldi	r27, 0x04	; 4
    3aea:	ab 2e       	mov	r10, r27
    3aec:	88 e0       	ldi	r24, 0x08	; 8
    3aee:	b8 2e       	mov	r11, r24
    3af0:	03 c0       	rjmp	.+6      	; 0x3af8 <qtm_scroller_process+0x3aa>
    3af2:	a1 2c       	mov	r10, r1
    3af4:	ac e0       	ldi	r26, 0x0C	; 12
    3af6:	ba 2e       	mov	r11, r26
    3af8:	91 30       	cpi	r25, 0x01	; 1
    3afa:	11 f4       	brne	.+4      	; 0x3b00 <qtm_scroller_process+0x3b2>
    3afc:	67 01       	movw	r12, r14
    3afe:	03 c0       	rjmp	.+6      	; 0x3b06 <qtm_scroller_process+0x3b8>
    3b00:	24 1b       	sub	r18, r20
    3b02:	35 0b       	sbc	r19, r21
    3b04:	69 01       	movw	r12, r18
    3b06:	0b 2c       	mov	r0, r11
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <qtm_scroller_process+0x3c0>
    3b0a:	cc 0c       	add	r12, r12
    3b0c:	dd 1c       	adc	r13, r13
    3b0e:	0a 94       	dec	r0
    3b10:	e2 f7       	brpl	.-8      	; 0x3b0a <qtm_scroller_process+0x3bc>
    3b12:	6e 17       	cp	r22, r30
    3b14:	7f 07       	cpc	r23, r31
    3b16:	a8 f0       	brcs	.+42     	; 0x3b42 <qtm_scroller_process+0x3f4>
    3b18:	c1 01       	movw	r24, r2
    3b1a:	8e 1b       	sub	r24, r30
    3b1c:	9f 0b       	sbc	r25, r31
    3b1e:	9c 01       	movw	r18, r24
    3b20:	2e 1b       	sub	r18, r30
    3b22:	3f 0b       	sbc	r19, r31
    3b24:	62 0f       	add	r22, r18
    3b26:	73 1f       	adc	r23, r19
    3b28:	4b 2d       	mov	r20, r11
    3b2a:	0e 94 3f 1b 	call	0x367e	; 0x367e <divide>
    3b2e:	21 e0       	ldi	r18, 0x01	; 1
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <qtm_scroller_process+0x3ea>
    3b34:	22 0f       	add	r18, r18
    3b36:	33 1f       	adc	r19, r19
    3b38:	ba 94       	dec	r11
    3b3a:	e2 f7       	brpl	.-8      	; 0x3b34 <qtm_scroller_process+0x3e6>
    3b3c:	82 1b       	sub	r24, r18
    3b3e:	93 0b       	sbc	r25, r19
    3b40:	0c c0       	rjmp	.+24     	; 0x3b5a <qtm_scroller_process+0x40c>
    3b42:	cf 01       	movw	r24, r30
    3b44:	86 1b       	sub	r24, r22
    3b46:	97 0b       	sbc	r25, r23
    3b48:	f1 01       	movw	r30, r2
    3b4a:	e6 1b       	sub	r30, r22
    3b4c:	f7 0b       	sbc	r31, r23
    3b4e:	bf 01       	movw	r22, r30
    3b50:	68 0f       	add	r22, r24
    3b52:	79 1f       	adc	r23, r25
    3b54:	4b 2d       	mov	r20, r11
    3b56:	0e 94 3f 1b 	call	0x367e	; 0x367e <divide>
    3b5a:	8c 0d       	add	r24, r12
    3b5c:	9d 1d       	adc	r25, r13
    3b5e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b60:	f3 30       	cpi	r31, 0x03	; 3
    3b62:	60 f0       	brcs	.+24     	; 0x3b7c <qtm_scroller_process+0x42e>
    3b64:	29 81       	ldd	r18, Y+1	; 0x01
    3b66:	21 30       	cpi	r18, 0x01	; 1
    3b68:	19 f4       	brne	.+6      	; 0x3b70 <qtm_scroller_process+0x422>
    3b6a:	4a 2d       	mov	r20, r10
    3b6c:	b7 01       	movw	r22, r14
    3b6e:	04 c0       	rjmp	.+8      	; 0x3b78 <qtm_scroller_process+0x42a>
    3b70:	b7 01       	movw	r22, r14
    3b72:	61 50       	subi	r22, 0x01	; 1
    3b74:	71 09       	sbc	r23, r1
    3b76:	4a 2d       	mov	r20, r10
    3b78:	0e 94 3f 1b 	call	0x367e	; 0x367e <divide>
    3b7c:	81 30       	cpi	r24, 0x01	; 1
    3b7e:	30 e1       	ldi	r19, 0x10	; 16
    3b80:	93 07       	cpc	r25, r19
    3b82:	10 f0       	brcs	.+4      	; 0x3b88 <qtm_scroller_process+0x43a>
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e1       	ldi	r25, 0x10	; 16
    3b88:	e9 80       	ldd	r14, Y+1	; 0x01
    3b8a:	e1 10       	cpse	r14, r1
    3b8c:	17 c0       	rjmp	.+46     	; 0x3bbc <qtm_scroller_process+0x46e>
    3b8e:	1f 70       	andi	r17, 0x0F	; 15
    3b90:	a9 f0       	breq	.+42     	; 0x3bbc <qtm_scroller_process+0x46e>
    3b92:	28 e2       	ldi	r18, 0x28	; 40
    3b94:	12 9f       	mul	r17, r18
    3b96:	a0 01       	movw	r20, r0
    3b98:	11 24       	eor	r1, r1
    3b9a:	84 17       	cp	r24, r20
    3b9c:	95 07       	cpc	r25, r21
    3b9e:	18 f0       	brcs	.+6      	; 0x3ba6 <qtm_scroller_process+0x458>
    3ba0:	84 1b       	sub	r24, r20
    3ba2:	95 0b       	sbc	r25, r21
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <qtm_scroller_process+0x45c>
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	44 0f       	add	r20, r20
    3bac:	55 1f       	adc	r21, r21
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	70 e1       	ldi	r23, 0x10	; 16
    3bb2:	64 1b       	sub	r22, r20
    3bb4:	75 0b       	sbc	r23, r21
    3bb6:	4c e0       	ldi	r20, 0x0C	; 12
    3bb8:	0e 94 3f 1b 	call	0x367e	; 0x367e <divide>
    3bbc:	2c e0       	ldi	r18, 0x0C	; 12
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	ec 84       	ldd	r14, Y+12	; 0x0c
    3bc2:	2e 19       	sub	r18, r14
    3bc4:	31 09       	sbc	r19, r1
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	02 c0       	rjmp	.+4      	; 0x3bd0 <qtm_scroller_process+0x482>
    3bcc:	66 0f       	add	r22, r22
    3bce:	77 1f       	adc	r23, r23
    3bd0:	ea 94       	dec	r14
    3bd2:	e2 f7       	brpl	.-8      	; 0x3bcc <qtm_scroller_process+0x47e>
    3bd4:	fb 01       	movw	r30, r22
    3bd6:	31 97       	sbiw	r30, 0x01	; 1
    3bd8:	02 c0       	rjmp	.+4      	; 0x3bde <qtm_scroller_process+0x490>
    3bda:	96 95       	lsr	r25
    3bdc:	87 95       	ror	r24
    3bde:	2a 95       	dec	r18
    3be0:	e2 f7       	brpl	.-8      	; 0x3bda <qtm_scroller_process+0x48c>
    3be2:	e8 17       	cp	r30, r24
    3be4:	f9 07       	cpc	r31, r25
    3be6:	08 f4       	brcc	.+2      	; 0x3bea <qtm_scroller_process+0x49c>
    3be8:	cf 01       	movw	r24, r30
    3bea:	fd 84       	ldd	r15, Y+13	; 0x0d
    3bec:	ff 20       	and	r15, r15
    3bee:	d9 f1       	breq	.+118    	; 0x3c66 <qtm_scroller_process+0x518>
    3bf0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3bf2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3bf4:	13 96       	adiw	r26, 0x03	; 3
    3bf6:	4d 91       	ld	r20, X+
    3bf8:	5c 91       	ld	r21, X
    3bfa:	14 97       	sbiw	r26, 0x04	; 4
    3bfc:	9c 01       	movw	r18, r24
    3bfe:	24 1b       	sub	r18, r20
    3c00:	35 0b       	sbc	r19, r21
    3c02:	b9 81       	ldd	r27, Y+1	; 0x01
    3c04:	b1 30       	cpi	r27, 0x01	; 1
    3c06:	a9 f4       	brne	.+42     	; 0x3c32 <qtm_scroller_process+0x4e4>
    3c08:	db 01       	movw	r26, r22
    3c0a:	b6 95       	lsr	r27
    3c0c:	a7 95       	ror	r26
    3c0e:	37 ff       	sbrs	r19, 7
    3c10:	0a c0       	rjmp	.+20     	; 0x3c26 <qtm_scroller_process+0x4d8>
    3c12:	b1 95       	neg	r27
    3c14:	a1 95       	neg	r26
    3c16:	b1 09       	sbc	r27, r1
    3c18:	2a 17       	cp	r18, r26
    3c1a:	3b 07       	cpc	r19, r27
    3c1c:	0c f0       	brlt	.+2      	; 0x3c20 <qtm_scroller_process+0x4d2>
    3c1e:	96 c0       	rjmp	.+300    	; 0x3d4c <qtm_scroller_process+0x5fe>
    3c20:	26 0f       	add	r18, r22
    3c22:	37 1f       	adc	r19, r23
    3c24:	06 c0       	rjmp	.+12     	; 0x3c32 <qtm_scroller_process+0x4e4>
    3c26:	a2 17       	cp	r26, r18
    3c28:	b3 07       	cpc	r27, r19
    3c2a:	0c f0       	brlt	.+2      	; 0x3c2e <qtm_scroller_process+0x4e0>
    3c2c:	95 c0       	rjmp	.+298    	; 0x3d58 <qtm_scroller_process+0x60a>
    3c2e:	26 1b       	sub	r18, r22
    3c30:	37 0b       	sbc	r19, r23
    3c32:	21 30       	cpi	r18, 0x01	; 1
    3c34:	31 05       	cpc	r19, r1
    3c36:	c1 f0       	breq	.+48     	; 0x3c68 <qtm_scroller_process+0x51a>
    3c38:	2f 3f       	cpi	r18, 0xFF	; 255
    3c3a:	6f ef       	ldi	r22, 0xFF	; 255
    3c3c:	36 07       	cpc	r19, r22
    3c3e:	a1 f0       	breq	.+40     	; 0x3c68 <qtm_scroller_process+0x51a>
    3c40:	37 ff       	sbrs	r19, 7
    3c42:	09 c0       	rjmp	.+18     	; 0x3c56 <qtm_scroller_process+0x508>
    3c44:	31 95       	neg	r19
    3c46:	21 95       	neg	r18
    3c48:	31 09       	sbc	r19, r1
    3c4a:	36 95       	lsr	r19
    3c4c:	27 95       	ror	r18
    3c4e:	31 95       	neg	r19
    3c50:	21 95       	neg	r18
    3c52:	31 09       	sbc	r19, r1
    3c54:	02 c0       	rjmp	.+4      	; 0x3c5a <qtm_scroller_process+0x50c>
    3c56:	36 95       	lsr	r19
    3c58:	27 95       	ror	r18
    3c5a:	24 0f       	add	r18, r20
    3c5c:	35 1f       	adc	r19, r21
    3c5e:	af 01       	movw	r20, r30
    3c60:	42 23       	and	r20, r18
    3c62:	53 23       	and	r21, r19
    3c64:	01 c0       	rjmp	.+2      	; 0x3c68 <qtm_scroller_process+0x51a>
    3c66:	ac 01       	movw	r20, r24
    3c68:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c6a:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c6c:	13 96       	adiw	r26, 0x03	; 3
    3c6e:	8d 93       	st	X+, r24
    3c70:	9c 93       	st	X, r25
    3c72:	14 97       	sbiw	r26, 0x04	; 4
    3c74:	f3 01       	movw	r30, r6
    3c76:	a5 81       	ldd	r26, Z+5	; 0x05
    3c78:	ee 85       	ldd	r30, Y+14	; 0x0e
    3c7a:	ff 85       	ldd	r31, Y+15	; 0x0f
    3c7c:	65 81       	ldd	r22, Z+5	; 0x05
    3c7e:	76 81       	ldd	r23, Z+6	; 0x06
    3c80:	f3 01       	movw	r30, r6
    3c82:	24 81       	ldd	r18, Z+4	; 0x04
    3c84:	ca 01       	movw	r24, r20
    3c86:	86 1b       	sub	r24, r22
    3c88:	97 0b       	sbc	r25, r23
    3c8a:	30 81       	ld	r19, Z
    3c8c:	31 30       	cpi	r19, 0x01	; 1
    3c8e:	e1 f4       	brne	.+56     	; 0x3cc8 <qtm_scroller_process+0x57a>
    3c90:	22 95       	swap	r18
    3c92:	2f 70       	andi	r18, 0x0F	; 15
    3c94:	e1 e0       	ldi	r30, 0x01	; 1
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	02 c0       	rjmp	.+4      	; 0x3c9e <qtm_scroller_process+0x550>
    3c9a:	ee 0f       	add	r30, r30
    3c9c:	ff 1f       	adc	r31, r31
    3c9e:	2a 95       	dec	r18
    3ca0:	e2 f7       	brpl	.-8      	; 0x3c9a <qtm_scroller_process+0x54c>
    3ca2:	9f 01       	movw	r18, r30
    3ca4:	36 95       	lsr	r19
    3ca6:	27 95       	ror	r18
    3ca8:	97 ff       	sbrs	r25, 7
    3caa:	09 c0       	rjmp	.+18     	; 0x3cbe <qtm_scroller_process+0x570>
    3cac:	31 95       	neg	r19
    3cae:	21 95       	neg	r18
    3cb0:	31 09       	sbc	r19, r1
    3cb2:	82 17       	cp	r24, r18
    3cb4:	93 07       	cpc	r25, r19
    3cb6:	54 f4       	brge	.+20     	; 0x3ccc <qtm_scroller_process+0x57e>
    3cb8:	8e 0f       	add	r24, r30
    3cba:	9f 1f       	adc	r25, r31
    3cbc:	05 c0       	rjmp	.+10     	; 0x3cc8 <qtm_scroller_process+0x57a>
    3cbe:	28 17       	cp	r18, r24
    3cc0:	39 07       	cpc	r19, r25
    3cc2:	ac f4       	brge	.+42     	; 0x3cee <qtm_scroller_process+0x5a0>
    3cc4:	8e 1b       	sub	r24, r30
    3cc6:	9f 0b       	sbc	r25, r31
    3cc8:	97 ff       	sbrs	r25, 7
    3cca:	11 c0       	rjmp	.+34     	; 0x3cee <qtm_scroller_process+0x5a0>
    3ccc:	91 95       	neg	r25
    3cce:	81 95       	neg	r24
    3cd0:	91 09       	sbc	r25, r1
    3cd2:	ee 85       	ldd	r30, Y+14	; 0x0e
    3cd4:	ff 85       	ldd	r31, Y+15	; 0x0f
    3cd6:	22 81       	ldd	r18, Z+2	; 0x02
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	28 17       	cp	r18, r24
    3cdc:	39 07       	cpc	r19, r25
    3cde:	14 f0       	brlt	.+4      	; 0x3ce4 <qtm_scroller_process+0x596>
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	1a c0       	rjmp	.+52     	; 0x3d18 <qtm_scroller_process+0x5ca>
    3ce4:	ee 85       	ldd	r30, Y+14	; 0x0e
    3ce6:	ff 85       	ldd	r31, Y+15	; 0x0f
    3ce8:	a1 83       	std	Z+1, r26	; 0x01
    3cea:	12 82       	std	Z+2, r1	; 0x02
    3cec:	0b c0       	rjmp	.+22     	; 0x3d04 <qtm_scroller_process+0x5b6>
    3cee:	ee 85       	ldd	r30, Y+14	; 0x0e
    3cf0:	ff 85       	ldd	r31, Y+15	; 0x0f
    3cf2:	21 81       	ldd	r18, Z+1	; 0x01
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	28 17       	cp	r18, r24
    3cf8:	39 07       	cpc	r19, r25
    3cfa:	94 f7       	brge	.-28     	; 0x3ce0 <qtm_scroller_process+0x592>
    3cfc:	ee 85       	ldd	r30, Y+14	; 0x0e
    3cfe:	ff 85       	ldd	r31, Y+15	; 0x0f
    3d00:	11 82       	std	Z+1, r1	; 0x01
    3d02:	a2 83       	std	Z+2, r26	; 0x02
    3d04:	46 17       	cp	r20, r22
    3d06:	57 07       	cpc	r21, r23
    3d08:	59 f3       	breq	.-42     	; 0x3ce0 <qtm_scroller_process+0x592>
    3d0a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d0c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d0e:	15 96       	adiw	r26, 0x05	; 5
    3d10:	4d 93       	st	X+, r20
    3d12:	5c 93       	st	X, r21
    3d14:	16 97       	sbiw	r26, 0x06	; 6
    3d16:	82 e0       	ldi	r24, 0x02	; 2
    3d18:	81 68       	ori	r24, 0x81	; 129
    3d1a:	02 c0       	rjmp	.+4      	; 0x3d20 <qtm_scroller_process+0x5d2>
    3d1c:	02 e0       	ldi	r16, 0x02	; 2
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	ee 85       	ldd	r30, Y+14	; 0x0e
    3d22:	ff 85       	ldd	r31, Y+15	; 0x0f
    3d24:	80 83       	st	Z, r24
    3d26:	81 78       	andi	r24, 0x81	; 129
    3d28:	ea 80       	ldd	r14, Y+2	; 0x02
    3d2a:	e8 2a       	or	r14, r24
    3d2c:	ea 82       	std	Y+2, r14	; 0x02
    3d2e:	93 94       	inc	r9
    3d30:	46 cd       	rjmp	.-1396   	; 0x37be <qtm_scroller_process+0x70>
    3d32:	ed 91       	ld	r30, X+
    3d34:	fc 91       	ld	r31, X
    3d36:	ea 80       	ldd	r14, Y+2	; 0x02
    3d38:	e0 82       	st	Z, r14
    3d3a:	13 c0       	rjmp	.+38     	; 0x3d62 <qtm_scroller_process+0x614>
    3d3c:	0b e0       	ldi	r16, 0x0B	; 11
    3d3e:	11 c0       	rjmp	.+34     	; 0x3d62 <qtm_scroller_process+0x614>
    3d40:	60 e0       	ldi	r22, 0x00	; 0
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	9d ce       	rjmp	.-710    	; 0x3a82 <qtm_scroller_process+0x334>
    3d48:	91 e0       	ldi	r25, 0x01	; 1
    3d4a:	9b ce       	rjmp	.-714    	; 0x3a82 <qtm_scroller_process+0x334>
    3d4c:	2f 3f       	cpi	r18, 0xFF	; 255
    3d4e:	6f ef       	ldi	r22, 0xFF	; 255
    3d50:	36 07       	cpc	r19, r22
    3d52:	09 f0       	breq	.+2      	; 0x3d56 <qtm_scroller_process+0x608>
    3d54:	77 cf       	rjmp	.-274    	; 0x3c44 <qtm_scroller_process+0x4f6>
    3d56:	88 cf       	rjmp	.-240    	; 0x3c68 <qtm_scroller_process+0x51a>
    3d58:	21 30       	cpi	r18, 0x01	; 1
    3d5a:	31 05       	cpc	r19, r1
    3d5c:	09 f0       	breq	.+2      	; 0x3d60 <qtm_scroller_process+0x612>
    3d5e:	70 cf       	rjmp	.-288    	; 0x3c40 <qtm_scroller_process+0x4f2>
    3d60:	83 cf       	rjmp	.-250    	; 0x3c68 <qtm_scroller_process+0x51a>
    3d62:	80 2f       	mov	r24, r16
    3d64:	61 96       	adiw	r28, 0x11	; 17
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	1f 91       	pop	r17
    3d70:	0f 91       	pop	r16
    3d72:	ff 90       	pop	r15
    3d74:	ef 90       	pop	r14
    3d76:	df 90       	pop	r13
    3d78:	cf 90       	pop	r12
    3d7a:	bf 90       	pop	r11
    3d7c:	af 90       	pop	r10
    3d7e:	9f 90       	pop	r9
    3d80:	8f 90       	pop	r8
    3d82:	7f 90       	pop	r7
    3d84:	6f 90       	pop	r6
    3d86:	5f 90       	pop	r5
    3d88:	4f 90       	pop	r4
    3d8a:	3f 90       	pop	r3
    3d8c:	2f 90       	pop	r2
    3d8e:	08 95       	ret

00003d90 <charge_share_test>:
    3d90:	a0 91 b2 41 	lds	r26, 0x41B2	; 0x8041b2 <qtm_acquisition_control_working_set_ptr>
    3d94:	b0 91 b3 41 	lds	r27, 0x41B3	; 0x8041b3 <qtm_acquisition_control_working_set_ptr+0x1>
    3d98:	25 e0       	ldi	r18, 0x05	; 5
    3d9a:	ac 01       	movw	r20, r24
    3d9c:	24 9f       	mul	r18, r20
    3d9e:	c0 01       	movw	r24, r0
    3da0:	25 9f       	mul	r18, r21
    3da2:	90 0d       	add	r25, r0
    3da4:	11 24       	eor	r1, r1
    3da6:	14 96       	adiw	r26, 0x04	; 4
    3da8:	ed 91       	ld	r30, X+
    3daa:	fc 91       	ld	r31, X
    3dac:	15 97       	sbiw	r26, 0x05	; 5
    3dae:	e8 0f       	add	r30, r24
    3db0:	f9 1f       	adc	r31, r25
    3db2:	81 81       	ldd	r24, Z+1	; 0x01
    3db4:	92 81       	ldd	r25, Z+2	; 0x02
    3db6:	86 17       	cp	r24, r22
    3db8:	97 07       	cpc	r25, r23
    3dba:	81 f1       	breq	.+96     	; 0x3e1c <charge_share_test+0x8c>
    3dbc:	86 17       	cp	r24, r22
    3dbe:	97 07       	cpc	r25, r23
    3dc0:	18 f4       	brcc	.+6      	; 0x3dc8 <charge_share_test+0x38>
    3dc2:	68 1b       	sub	r22, r24
    3dc4:	79 0b       	sbc	r23, r25
    3dc6:	04 c0       	rjmp	.+8      	; 0x3dd0 <charge_share_test+0x40>
    3dc8:	9c 01       	movw	r18, r24
    3dca:	26 1b       	sub	r18, r22
    3dcc:	37 0b       	sbc	r19, r23
    3dce:	b9 01       	movw	r22, r18
    3dd0:	ed 91       	ld	r30, X+
    3dd2:	fc 91       	ld	r31, X
    3dd4:	82 81       	ldd	r24, Z+2	; 0x02
    3dd6:	80 34       	cpi	r24, 0x40	; 64
    3dd8:	11 f4       	brne	.+4      	; 0x3dde <charge_share_test+0x4e>
    3dda:	76 95       	lsr	r23
    3ddc:	67 95       	ror	r22
    3dde:	65 38       	cpi	r22, 0x85	; 133
    3de0:	71 05       	cpc	r23, r1
    3de2:	d0 f4       	brcc	.+52     	; 0x3e18 <charge_share_test+0x88>
    3de4:	66 30       	cpi	r22, 0x06	; 6
    3de6:	71 05       	cpc	r23, r1
    3de8:	c8 f0       	brcs	.+50     	; 0x3e1c <charge_share_test+0x8c>
    3dea:	e3 81       	ldd	r30, Z+3	; 0x03
    3dec:	e0 73       	andi	r30, 0x30	; 48
    3dee:	f0 e0       	ldi	r31, 0x00	; 0
    3df0:	83 e0       	ldi	r24, 0x03	; 3
    3df2:	f6 95       	lsr	r31
    3df4:	e7 95       	ror	r30
    3df6:	8a 95       	dec	r24
    3df8:	e1 f7       	brne	.-8      	; 0x3df2 <charge_share_test+0x62>
    3dfa:	e9 52       	subi	r30, 0x29	; 41
    3dfc:	ff 4b       	sbci	r31, 0xBF	; 191
    3dfe:	80 81       	ld	r24, Z
    3e00:	91 81       	ldd	r25, Z+1	; 0x01
    3e02:	68 9f       	mul	r22, r24
    3e04:	90 01       	movw	r18, r0
    3e06:	69 9f       	mul	r22, r25
    3e08:	30 0d       	add	r19, r0
    3e0a:	78 9f       	mul	r23, r24
    3e0c:	30 0d       	add	r19, r0
    3e0e:	11 24       	eor	r1, r1
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	23 2b       	or	r18, r19
    3e14:	21 f4       	brne	.+8      	; 0x3e1e <charge_share_test+0x8e>
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <charge_share_test+0x8c>
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	08 95       	ret
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	08 95       	ret

00003e20 <select_next_channel_to_measure>:
    3e20:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <current_measure_channel>
    3e24:	90 91 6d 41 	lds	r25, 0x416D	; 0x80416d <current_measure_channel+0x1>
    3e28:	a0 91 b2 41 	lds	r26, 0x41B2	; 0x8041b2 <qtm_acquisition_control_working_set_ptr>
    3e2c:	b0 91 b3 41 	lds	r27, 0x41B3	; 0x8041b3 <qtm_acquisition_control_working_set_ptr+0x1>
    3e30:	ed 91       	ld	r30, X+
    3e32:	fc 91       	ld	r31, X
    3e34:	11 97       	sbiw	r26, 0x01	; 1
    3e36:	40 81       	ld	r20, Z
    3e38:	51 81       	ldd	r21, Z+1	; 0x01
    3e3a:	25 e0       	ldi	r18, 0x05	; 5
    3e3c:	28 9f       	mul	r18, r24
    3e3e:	b0 01       	movw	r22, r0
    3e40:	29 9f       	mul	r18, r25
    3e42:	70 0d       	add	r23, r0
    3e44:	11 24       	eor	r1, r1
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	84 17       	cp	r24, r20
    3e4c:	95 07       	cpc	r25, r21
    3e4e:	a8 f4       	brcc	.+42     	; 0x3e7a <select_next_channel_to_measure+0x5a>
    3e50:	14 96       	adiw	r26, 0x04	; 4
    3e52:	ed 91       	ld	r30, X+
    3e54:	fc 91       	ld	r31, X
    3e56:	15 97       	sbiw	r26, 0x05	; 5
    3e58:	e2 0f       	add	r30, r18
    3e5a:	f3 1f       	adc	r31, r19
    3e5c:	e6 0f       	add	r30, r22
    3e5e:	f7 1f       	adc	r31, r23
    3e60:	e0 81       	ld	r30, Z
    3e62:	2b 5f       	subi	r18, 0xFB	; 251
    3e64:	3f 4f       	sbci	r19, 0xFF	; 255
    3e66:	e0 fd       	sbrc	r30, 0
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <select_next_channel_to_measure+0x4e>
    3e6a:	01 96       	adiw	r24, 0x01	; 1
    3e6c:	ee cf       	rjmp	.-36     	; 0x3e4a <select_next_channel_to_measure+0x2a>
    3e6e:	80 93 6c 41 	sts	0x416C, r24	; 0x80416c <current_measure_channel>
    3e72:	90 93 6d 41 	sts	0x416D, r25	; 0x80416d <current_measure_channel+0x1>
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	08 95       	ret
    3e7a:	10 92 6c 41 	sts	0x416C, r1	; 0x80416c <current_measure_channel>
    3e7e:	10 92 6d 41 	sts	0x416D, r1	; 0x80416d <current_measure_channel+0x1>
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	08 95       	ret

00003e86 <qtm_measure_node>:
    3e86:	af 92       	push	r10
    3e88:	bf 92       	push	r11
    3e8a:	cf 92       	push	r12
    3e8c:	df 92       	push	r13
    3e8e:	ef 92       	push	r14
    3e90:	ff 92       	push	r15
    3e92:	0f 93       	push	r16
    3e94:	1f 93       	push	r17
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	7c 01       	movw	r14, r24
    3e9c:	e0 91 b2 41 	lds	r30, 0x41B2	; 0x8041b2 <qtm_acquisition_control_working_set_ptr>
    3ea0:	f0 91 b3 41 	lds	r31, 0x41B3	; 0x8041b3 <qtm_acquisition_control_working_set_ptr+0x1>
    3ea4:	84 e1       	ldi	r24, 0x14	; 20
    3ea6:	8e 9d       	mul	r24, r14
    3ea8:	e0 01       	movw	r28, r0
    3eaa:	8f 9d       	mul	r24, r15
    3eac:	d0 0d       	add	r29, r0
    3eae:	11 24       	eor	r1, r1
    3eb0:	a2 81       	ldd	r26, Z+2	; 0x02
    3eb2:	b3 81       	ldd	r27, Z+3	; 0x03
    3eb4:	ac 0f       	add	r26, r28
    3eb6:	bd 1f       	adc	r27, r29
    3eb8:	18 96       	adiw	r26, 0x08	; 8
    3eba:	2c 91       	ld	r18, X
    3ebc:	18 97       	sbiw	r26, 0x08	; 8
    3ebe:	19 96       	adiw	r26, 0x09	; 9
    3ec0:	3c 91       	ld	r19, X
    3ec2:	19 97       	sbiw	r26, 0x09	; 9
    3ec4:	1a 96       	adiw	r26, 0x0a	; 10
    3ec6:	4c 91       	ld	r20, X
    3ec8:	1a 97       	sbiw	r26, 0x0a	; 10
    3eca:	1b 96       	adiw	r26, 0x0b	; 11
    3ecc:	5c 91       	ld	r21, X
    3ece:	1b 97       	sbiw	r26, 0x0b	; 11
    3ed0:	1c 96       	adiw	r26, 0x0c	; 12
    3ed2:	6c 91       	ld	r22, X
    3ed4:	1c 97       	sbiw	r26, 0x0c	; 12
    3ed6:	1d 96       	adiw	r26, 0x0d	; 13
    3ed8:	7c 91       	ld	r23, X
    3eda:	1d 97       	sbiw	r26, 0x0d	; 13
    3edc:	1e 96       	adiw	r26, 0x0e	; 14
    3ede:	8c 91       	ld	r24, X
    3ee0:	1e 97       	sbiw	r26, 0x0e	; 14
    3ee2:	1f 96       	adiw	r26, 0x0f	; 15
    3ee4:	9c 91       	ld	r25, X
    3ee6:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    3eea:	08 e0       	ldi	r16, 0x08	; 8
    3eec:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3ef0:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    3ef4:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3ef8:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    3efc:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f00:	20 93 f3 07 	sts	0x07F3, r18	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    3f04:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f08:	20 93 f4 07 	sts	0x07F4, r18	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    3f0c:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f10:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    3f14:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    3f18:	a0 81       	ld	r26, Z
    3f1a:	b1 81       	ldd	r27, Z+1	; 0x01
    3f1c:	12 96       	adiw	r26, 0x02	; 2
    3f1e:	8c 91       	ld	r24, X
    3f20:	80 38       	cpi	r24, 0x80	; 128
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <qtm_measure_node+0xa0>
    3f24:	4f c0       	rjmp	.+158    	; 0x3fc4 <qtm_measure_node+0x13e>
    3f26:	a2 81       	ldd	r26, Z+2	; 0x02
    3f28:	b3 81       	ldd	r27, Z+3	; 0x03
    3f2a:	ac 0f       	add	r26, r28
    3f2c:	bd 1f       	adc	r27, r29
    3f2e:	cc 90       	ld	r12, X
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	3c 91       	ld	r19, X
    3f34:	11 97       	sbiw	r26, 0x01	; 1
    3f36:	12 96       	adiw	r26, 0x02	; 2
    3f38:	4c 91       	ld	r20, X
    3f3a:	12 97       	sbiw	r26, 0x02	; 2
    3f3c:	13 96       	adiw	r26, 0x03	; 3
    3f3e:	5c 91       	ld	r21, X
    3f40:	13 97       	sbiw	r26, 0x03	; 3
    3f42:	14 96       	adiw	r26, 0x04	; 4
    3f44:	6c 91       	ld	r22, X
    3f46:	14 97       	sbiw	r26, 0x04	; 4
    3f48:	15 96       	adiw	r26, 0x05	; 5
    3f4a:	7c 91       	ld	r23, X
    3f4c:	15 97       	sbiw	r26, 0x05	; 5
    3f4e:	16 96       	adiw	r26, 0x06	; 6
    3f50:	8c 91       	ld	r24, X
    3f52:	16 97       	sbiw	r26, 0x06	; 6
    3f54:	17 96       	adiw	r26, 0x07	; 7
    3f56:	9c 91       	ld	r25, X
    3f58:	c0 92 e8 07 	sts	0x07E8, r12	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    3f5c:	2c 2d       	mov	r18, r12
    3f5e:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f62:	d2 2e       	mov	r13, r18
    3f64:	20 93 e9 07 	sts	0x07E9, r18	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    3f68:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f6c:	12 2f       	mov	r17, r18
    3f6e:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    3f72:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f76:	a2 2e       	mov	r10, r18
    3f78:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    3f7c:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f80:	b2 2e       	mov	r11, r18
    3f82:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    3f86:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    3f8a:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	dc 01       	movw	r26, r24
    3f94:	12 96       	adiw	r26, 0x02	; 2
    3f96:	8c 91       	ld	r24, X
    3f98:	81 38       	cpi	r24, 0x81	; 129
    3f9a:	21 f4       	brne	.+8      	; 0x3fa4 <qtm_measure_node+0x11e>
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    3fa2:	10 c0       	rjmp	.+32     	; 0x3fc4 <qtm_measure_node+0x13e>
    3fa4:	82 38       	cpi	r24, 0x82	; 130
    3fa6:	71 f4       	brne	.+28     	; 0x3fc4 <qtm_measure_node+0x13e>
    3fa8:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    3fac:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    3fb0:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    3fb4:	10 93 fa 07 	sts	0x07FA, r17	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    3fb8:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    3fbc:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    3fc0:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    3fc4:	25 e0       	ldi	r18, 0x05	; 5
    3fc6:	2e 9d       	mul	r18, r14
    3fc8:	c0 01       	movw	r24, r0
    3fca:	2f 9d       	mul	r18, r15
    3fcc:	90 0d       	add	r25, r0
    3fce:	11 24       	eor	r1, r1
    3fd0:	a4 81       	ldd	r26, Z+4	; 0x04
    3fd2:	b5 81       	ldd	r27, Z+5	; 0x05
    3fd4:	a8 0f       	add	r26, r24
    3fd6:	b9 1f       	adc	r27, r25
    3fd8:	13 96       	adiw	r26, 0x03	; 3
    3fda:	2d 91       	ld	r18, X+
    3fdc:	3c 91       	ld	r19, X
    3fde:	14 97       	sbiw	r26, 0x04	; 4
    3fe0:	a9 01       	movw	r20, r18
    3fe2:	53 70       	andi	r21, 0x03	; 3
    3fe4:	40 93 e4 07 	sts	0x07E4, r20	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7e07e4>
    3fe8:	50 93 e5 07 	sts	0x07E5, r21	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7e07e5>
    3fec:	37 fd       	sbrc	r19, 7
    3fee:	03 c0       	rjmp	.+6      	; 0x3ff6 <qtm_measure_node+0x170>
    3ff0:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    3ff4:	03 c0       	rjmp	.+6      	; 0x3ffc <qtm_measure_node+0x176>
    3ff6:	21 e0       	ldi	r18, 0x01	; 1
    3ff8:	20 93 ca 07 	sts	0x07CA, r18	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    3ffc:	a4 81       	ldd	r26, Z+4	; 0x04
    3ffe:	b5 81       	ldd	r27, Z+5	; 0x05
    4000:	a8 0f       	add	r26, r24
    4002:	b9 1f       	adc	r27, r25
    4004:	2c 91       	ld	r18, X
    4006:	21 ff       	sbrs	r18, 1
    4008:	02 c0       	rjmp	.+4      	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    400a:	25 e0       	ldi	r18, 0x05	; 5
    400c:	2c 93       	st	X, r18
    400e:	24 81       	ldd	r18, Z+4	; 0x04
    4010:	35 81       	ldd	r19, Z+5	; 0x05
    4012:	d9 01       	movw	r26, r18
    4014:	a8 0f       	add	r26, r24
    4016:	b9 1f       	adc	r27, r25
    4018:	8c 91       	ld	r24, X
    401a:	8c 71       	andi	r24, 0x1C	; 28
    401c:	69 f4       	brne	.+26     	; 0x4038 <__DATA_REGION_LENGTH__+0x38>
    401e:	a2 81       	ldd	r26, Z+2	; 0x02
    4020:	b3 81       	ldd	r27, Z+3	; 0x03
    4022:	ac 0f       	add	r26, r28
    4024:	bd 1f       	adc	r27, r29
    4026:	52 96       	adiw	r26, 0x12	; 18
    4028:	ac 91       	ld	r26, X
    402a:	a2 95       	swap	r26
    402c:	af 70       	andi	r26, 0x0F	; 15
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	a1 52       	subi	r26, 0x21	; 33
    4032:	bf 4b       	sbci	r27, 0xBF	; 191
    4034:	8c 91       	ld	r24, X
    4036:	01 c0       	rjmp	.+2      	; 0x403a <__DATA_REGION_LENGTH__+0x3a>
    4038:	8f e1       	ldi	r24, 0x1F	; 31
    403a:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7e07e6>
    403e:	a2 81       	ldd	r26, Z+2	; 0x02
    4040:	b3 81       	ldd	r27, Z+3	; 0x03
    4042:	ac 0f       	add	r26, r28
    4044:	bd 1f       	adc	r27, r29
    4046:	50 96       	adiw	r26, 0x10	; 16
    4048:	8c 91       	ld	r24, X
    404a:	8b 37       	cpi	r24, 0x7B	; 123
    404c:	10 f4       	brcc	.+4      	; 0x4052 <__DATA_REGION_LENGTH__+0x52>
    404e:	8c 5f       	subi	r24, 0xFC	; 252
    4050:	01 c0       	rjmp	.+2      	; 0x4054 <__DATA_REGION_LENGTH__+0x54>
    4052:	8f e7       	ldi	r24, 0x7F	; 127
    4054:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7e07c4>
    4058:	a2 81       	ldd	r26, Z+2	; 0x02
    405a:	b3 81       	ldd	r27, Z+3	; 0x03
    405c:	ac 0f       	add	r26, r28
    405e:	bd 1f       	adc	r27, r29
    4060:	53 96       	adiw	r26, 0x13	; 19
    4062:	8c 91       	ld	r24, X
    4064:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7e07c7>
    4068:	a2 81       	ldd	r26, Z+2	; 0x02
    406a:	b3 81       	ldd	r27, Z+3	; 0x03
    406c:	ac 0f       	add	r26, r28
    406e:	bd 1f       	adc	r27, r29
    4070:	51 96       	adiw	r26, 0x11	; 17
    4072:	8c 91       	ld	r24, X
    4074:	82 95       	swap	r24
    4076:	8f 70       	andi	r24, 0x0F	; 15
    4078:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7e07c9>
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	93 81       	ldd	r25, Z+3	; 0x03
    4080:	c8 0f       	add	r28, r24
    4082:	d9 1f       	adc	r29, r25
    4084:	89 89       	ldd	r24, Y+17	; 0x11
    4086:	8f 70       	andi	r24, 0x0F	; 15
    4088:	80 68       	ori	r24, 0x80	; 128
    408a:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__TEXT_REGION_LENGTH__+0x7e07c2>
    408e:	81 e8       	ldi	r24, 0x81	; 129
    4090:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7e07d0>
    409a:	df 91       	pop	r29
    409c:	cf 91       	pop	r28
    409e:	1f 91       	pop	r17
    40a0:	0f 91       	pop	r16
    40a2:	ff 90       	pop	r15
    40a4:	ef 90       	pop	r14
    40a6:	df 90       	pop	r13
    40a8:	cf 90       	pop	r12
    40aa:	bf 90       	pop	r11
    40ac:	af 90       	pop	r10
    40ae:	08 95       	ret

000040b0 <qtm_acquisition_process>:
    40b0:	2f 92       	push	r2
    40b2:	3f 92       	push	r3
    40b4:	4f 92       	push	r4
    40b6:	5f 92       	push	r5
    40b8:	6f 92       	push	r6
    40ba:	7f 92       	push	r7
    40bc:	8f 92       	push	r8
    40be:	9f 92       	push	r9
    40c0:	af 92       	push	r10
    40c2:	bf 92       	push	r11
    40c4:	cf 92       	push	r12
    40c6:	df 92       	push	r13
    40c8:	ef 92       	push	r14
    40ca:	ff 92       	push	r15
    40cc:	0f 93       	push	r16
    40ce:	1f 93       	push	r17
    40d0:	cf 93       	push	r28
    40d2:	df 93       	push	r29
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	27 97       	sbiw	r28, 0x07	; 7
    40da:	cd bf       	out	0x3d, r28	; 61
    40dc:	de bf       	out	0x3e, r29	; 62
    40de:	80 91 6b 41 	lds	r24, 0x416B	; 0x80416b <touch_seq_lib_state>
    40e2:	88 23       	and	r24, r24
    40e4:	09 f4       	brne	.+2      	; 0x40e8 <qtm_acquisition_process+0x38>
    40e6:	46 c2       	rjmp	.+1164   	; 0x4574 <qtm_acquisition_process+0x4c4>
    40e8:	00 91 b2 41 	lds	r16, 0x41B2	; 0x8041b2 <qtm_acquisition_control_working_set_ptr>
    40ec:	10 91 b3 41 	lds	r17, 0x41B3	; 0x8041b3 <qtm_acquisition_control_working_set_ptr+0x1>
    40f0:	20 91 b4 41 	lds	r18, 0x41B4	; 0x8041b4 <qtm_raw_data_measurements_ptr>
    40f4:	30 91 b5 41 	lds	r19, 0x41B5	; 0x8041b5 <qtm_raw_data_measurements_ptr+0x1>
    40f8:	2a 83       	std	Y+2, r18	; 0x02
    40fa:	3b 83       	std	Y+3, r19	; 0x03
    40fc:	c1 2c       	mov	r12, r1
    40fe:	d1 2c       	mov	r13, r1
    4100:	a1 2c       	mov	r10, r1
    4102:	b1 2c       	mov	r11, r1
    4104:	21 2c       	mov	r2, r1
    4106:	31 2c       	mov	r3, r1
    4108:	19 82       	std	Y+1, r1	; 0x01
    410a:	44 24       	eor	r4, r4
    410c:	4a 94       	dec	r4
    410e:	55 24       	eor	r5, r5
    4110:	53 94       	inc	r5
    4112:	77 24       	eor	r7, r7
    4114:	73 94       	inc	r7
    4116:	d8 01       	movw	r26, r16
    4118:	0d 90       	ld	r0, X+
    411a:	bc 91       	ld	r27, X
    411c:	a0 2d       	mov	r26, r0
    411e:	ae 83       	std	Y+6, r26	; 0x06
    4120:	bf 83       	std	Y+7, r27	; 0x07
    4122:	8d 91       	ld	r24, X+
    4124:	9c 91       	ld	r25, X
    4126:	28 16       	cp	r2, r24
    4128:	39 06       	cpc	r3, r25
    412a:	08 f0       	brcs	.+2      	; 0x412e <qtm_acquisition_process+0x7e>
    412c:	1f c2       	rjmp	.+1086   	; 0x456c <qtm_acquisition_process+0x4bc>
    412e:	aa 81       	ldd	r26, Y+2	; 0x02
    4130:	bb 81       	ldd	r27, Y+3	; 0x03
    4132:	4d 91       	ld	r20, X+
    4134:	5d 91       	ld	r21, X+
    4136:	aa 83       	std	Y+2, r26	; 0x02
    4138:	bb 83       	std	Y+3, r27	; 0x03
    413a:	f8 01       	movw	r30, r16
    413c:	e4 80       	ldd	r14, Z+4	; 0x04
    413e:	f5 80       	ldd	r15, Z+5	; 0x05
    4140:	ea 0c       	add	r14, r10
    4142:	fb 1c       	adc	r15, r11
    4144:	d7 01       	movw	r26, r14
    4146:	2c 91       	ld	r18, X
    4148:	82 2f       	mov	r24, r18
    414a:	8c 71       	andi	r24, 0x1C	; 28
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	96 95       	lsr	r25
    4150:	87 95       	ror	r24
    4152:	96 95       	lsr	r25
    4154:	87 95       	ror	r24
    4156:	82 30       	cpi	r24, 0x02	; 2
    4158:	91 05       	cpc	r25, r1
    415a:	09 f4       	brne	.+2      	; 0x415e <qtm_acquisition_process+0xae>
    415c:	a0 c1       	rjmp	.+832    	; 0x449e <qtm_acquisition_process+0x3ee>
    415e:	28 f4       	brcc	.+10     	; 0x416a <qtm_acquisition_process+0xba>
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	59 f0       	breq	.+22     	; 0x417a <qtm_acquisition_process+0xca>
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	01 f1       	breq	.+64     	; 0x41a8 <qtm_acquisition_process+0xf8>
    4168:	f7 c1       	rjmp	.+1006   	; 0x4558 <qtm_acquisition_process+0x4a8>
    416a:	83 30       	cpi	r24, 0x03	; 3
    416c:	91 05       	cpc	r25, r1
    416e:	09 f4       	brne	.+2      	; 0x4172 <qtm_acquisition_process+0xc2>
    4170:	59 c1       	rjmp	.+690    	; 0x4424 <qtm_acquisition_process+0x374>
    4172:	04 97       	sbiw	r24, 0x04	; 4
    4174:	09 f4       	brne	.+2      	; 0x4178 <qtm_acquisition_process+0xc8>
    4176:	e1 c0       	rjmp	.+450    	; 0x433a <qtm_acquisition_process+0x28a>
    4178:	ef c1       	rjmp	.+990    	; 0x4558 <qtm_acquisition_process+0x4a8>
    417a:	02 80       	ldd	r0, Z+2	; 0x02
    417c:	f3 81       	ldd	r31, Z+3	; 0x03
    417e:	e0 2d       	mov	r30, r0
    4180:	ec 0d       	add	r30, r12
    4182:	fd 1d       	adc	r31, r13
    4184:	92 89       	ldd	r25, Z+18	; 0x12
    4186:	9f 70       	andi	r25, 0x0F	; 15
    4188:	83 89       	ldd	r24, Z+19	; 0x13
    418a:	98 17       	cp	r25, r24
    418c:	10 f4       	brcc	.+4      	; 0x4192 <qtm_acquisition_process+0xe2>
    418e:	89 1b       	sub	r24, r25
    4190:	01 c0       	rjmp	.+2      	; 0x4194 <qtm_acquisition_process+0xe4>
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	9a 01       	movw	r18, r20
    4196:	02 c0       	rjmp	.+4      	; 0x419c <qtm_acquisition_process+0xec>
    4198:	36 95       	lsr	r19
    419a:	27 95       	ror	r18
    419c:	8a 95       	dec	r24
    419e:	e2 f7       	brpl	.-8      	; 0x4198 <qtm_acquisition_process+0xe8>
    41a0:	f7 01       	movw	r30, r14
    41a2:	21 83       	std	Z+1, r18	; 0x01
    41a4:	32 83       	std	Z+2, r19	; 0x02
    41a6:	d8 c1       	rjmp	.+944    	; 0x4558 <qtm_acquisition_process+0x4a8>
    41a8:	82 81       	ldd	r24, Z+2	; 0x02
    41aa:	93 81       	ldd	r25, Z+3	; 0x03
    41ac:	fc 01       	movw	r30, r24
    41ae:	ec 0d       	add	r30, r12
    41b0:	fd 1d       	adc	r31, r13
    41b2:	4a 01       	movw	r8, r20
    41b4:	03 88       	ldd	r0, Z+19	; 0x13
    41b6:	02 c0       	rjmp	.+4      	; 0x41bc <qtm_acquisition_process+0x10c>
    41b8:	96 94       	lsr	r9
    41ba:	87 94       	ror	r8
    41bc:	0a 94       	dec	r0
    41be:	e2 f7       	brpl	.-8      	; 0x41b8 <qtm_acquisition_process+0x108>
    41c0:	d7 01       	movw	r26, r14
    41c2:	11 96       	adiw	r26, 0x01	; 1
    41c4:	8d 92       	st	X+, r8
    41c6:	9c 92       	st	X, r9
    41c8:	12 97       	sbiw	r26, 0x02	; 2
    41ca:	13 96       	adiw	r26, 0x03	; 3
    41cc:	8d 91       	ld	r24, X+
    41ce:	9c 91       	ld	r25, X
    41d0:	14 97       	sbiw	r26, 0x04	; 4
    41d2:	69 2f       	mov	r22, r25
    41d4:	66 1f       	adc	r22, r22
    41d6:	66 27       	eor	r22, r22
    41d8:	66 1f       	adc	r22, r22
    41da:	81 14       	cp	r8, r1
    41dc:	b2 e0       	ldi	r27, 0x02	; 2
    41de:	9b 06       	cpc	r9, r27
    41e0:	30 f0       	brcs	.+12     	; 0x41ee <qtm_acquisition_process+0x13e>
    41e2:	3f ef       	ldi	r19, 0xFF	; 255
    41e4:	83 1a       	sub	r8, r19
    41e6:	31 e0       	ldi	r19, 0x01	; 1
    41e8:	93 0a       	sbc	r9, r19
    41ea:	41 e0       	ldi	r20, 0x01	; 1
    41ec:	05 c0       	rjmp	.+10     	; 0x41f8 <qtm_acquisition_process+0x148>
    41ee:	a2 01       	movw	r20, r4
    41f0:	48 19       	sub	r20, r8
    41f2:	59 09       	sbc	r21, r9
    41f4:	4a 01       	movw	r8, r20
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	96 94       	lsr	r9
    41fa:	87 94       	ror	r8
    41fc:	ae 81       	ldd	r26, Y+6	; 0x06
    41fe:	bf 81       	ldd	r27, Y+7	; 0x07
    4200:	12 96       	adiw	r26, 0x02	; 2
    4202:	3c 91       	ld	r19, X
    4204:	30 34       	cpi	r19, 0x40	; 64
    4206:	29 f0       	breq	.+10     	; 0x4212 <qtm_acquisition_process+0x162>
    4208:	44 23       	and	r20, r20
    420a:	09 f4       	brne	.+2      	; 0x420e <qtm_acquisition_process+0x15e>
    420c:	b6 c1       	rjmp	.+876    	; 0x457a <qtm_acquisition_process+0x4ca>
    420e:	46 2f       	mov	r20, r22
    4210:	06 c0       	rjmp	.+12     	; 0x421e <qtm_acquisition_process+0x16e>
    4212:	97 ff       	sbrs	r25, 7
    4214:	04 c0       	rjmp	.+8      	; 0x421e <qtm_acquisition_process+0x16e>
    4216:	31 e0       	ldi	r19, 0x01	; 1
    4218:	41 11       	cpse	r20, r1
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	43 2f       	mov	r20, r19
    421e:	ba e0       	ldi	r27, 0x0A	; 10
    4220:	8b 16       	cp	r8, r27
    4222:	91 04       	cpc	r9, r1
    4224:	08 f0       	brcs	.+2      	; 0x4228 <qtm_acquisition_process+0x178>
    4226:	3f c0       	rjmp	.+126    	; 0x42a6 <qtm_acquisition_process+0x1f6>
    4228:	26 fd       	sbrc	r18, 6
    422a:	3a c0       	rjmp	.+116    	; 0x42a0 <qtm_acquisition_process+0x1f0>
    422c:	27 fd       	sbrc	r18, 7
    422e:	94 c1       	rjmp	.+808    	; 0x4558 <qtm_acquisition_process+0x4a8>
    4230:	ae 81       	ldd	r26, Y+6	; 0x06
    4232:	bf 81       	ldd	r27, Y+7	; 0x07
    4234:	13 96       	adiw	r26, 0x03	; 3
    4236:	8c 91       	ld	r24, X
    4238:	83 70       	andi	r24, 0x03	; 3
    423a:	83 30       	cpi	r24, 0x03	; 3
    423c:	59 f4       	brne	.+22     	; 0x4254 <qtm_acquisition_process+0x1a4>
    423e:	bf e7       	ldi	r27, 0x7F	; 127
    4240:	b0 8b       	std	Z+16, r27	; 0x10
    4242:	d8 01       	movw	r26, r16
    4244:	14 96       	adiw	r26, 0x04	; 4
    4246:	ed 91       	ld	r30, X+
    4248:	fc 91       	ld	r31, X
    424a:	15 97       	sbiw	r26, 0x05	; 5
    424c:	ea 0d       	add	r30, r10
    424e:	fb 1d       	adc	r31, r11
    4250:	b1 e1       	ldi	r27, 0x11	; 17
    4252:	0d c0       	rjmp	.+26     	; 0x426e <qtm_acquisition_process+0x1be>
    4254:	82 30       	cpi	r24, 0x02	; 2
    4256:	69 f4       	brne	.+26     	; 0x4272 <qtm_acquisition_process+0x1c2>
    4258:	81 89       	ldd	r24, Z+17	; 0x11
    425a:	80 7f       	andi	r24, 0xF0	; 240
    425c:	81 8b       	std	Z+17, r24	; 0x11
    425e:	d8 01       	movw	r26, r16
    4260:	14 96       	adiw	r26, 0x04	; 4
    4262:	ed 91       	ld	r30, X+
    4264:	fc 91       	ld	r31, X
    4266:	15 97       	sbiw	r26, 0x05	; 5
    4268:	ea 0d       	add	r30, r10
    426a:	fb 1d       	adc	r31, r11
    426c:	b9 e0       	ldi	r27, 0x09	; 9
    426e:	b0 83       	st	Z, r27
    4270:	73 c1       	rjmp	.+742    	; 0x4558 <qtm_acquisition_process+0x4a8>
    4272:	81 30       	cpi	r24, 0x01	; 1
    4274:	a9 f4       	brne	.+42     	; 0x42a0 <qtm_acquisition_process+0x1f0>
    4276:	81 89       	ldd	r24, Z+17	; 0x11
    4278:	8f 70       	andi	r24, 0x0F	; 15
    427a:	81 8b       	std	Z+17, r24	; 0x11
    427c:	d8 01       	movw	r26, r16
    427e:	12 96       	adiw	r26, 0x02	; 2
    4280:	ed 91       	ld	r30, X+
    4282:	fc 91       	ld	r31, X
    4284:	13 97       	sbiw	r26, 0x03	; 3
    4286:	ec 0d       	add	r30, r12
    4288:	fd 1d       	adc	r31, r13
    428a:	81 89       	ldd	r24, Z+17	; 0x11
    428c:	80 67       	ori	r24, 0x70	; 112
    428e:	81 8b       	std	Z+17, r24	; 0x11
    4290:	14 96       	adiw	r26, 0x04	; 4
    4292:	ed 91       	ld	r30, X+
    4294:	fc 91       	ld	r31, X
    4296:	15 97       	sbiw	r26, 0x05	; 5
    4298:	ea 0d       	add	r30, r10
    429a:	fb 1d       	adc	r31, r11
    429c:	bd e0       	ldi	r27, 0x0D	; 13
    429e:	e7 cf       	rjmp	.-50     	; 0x426e <qtm_acquisition_process+0x1be>
    42a0:	f7 01       	movw	r30, r14
    42a2:	70 82       	st	Z, r7
    42a4:	59 c1       	rjmp	.+690    	; 0x4558 <qtm_acquisition_process+0x4a8>
    42a6:	9c 01       	movw	r18, r24
    42a8:	33 70       	andi	r19, 0x03	; 3
    42aa:	2f 3f       	cpi	r18, 0xFF	; 255
    42ac:	f3 e0       	ldi	r31, 0x03	; 3
    42ae:	3f 07       	cpc	r19, r31
    42b0:	31 f4       	brne	.+12     	; 0x42be <qtm_acquisition_process+0x20e>
    42b2:	e1 e8       	ldi	r30, 0x81	; 129
    42b4:	d7 01       	movw	r26, r14
    42b6:	ec 93       	st	X, r30
    42b8:	8f ef       	ldi	r24, 0xFF	; 255
    42ba:	93 e0       	ldi	r25, 0x03	; 3
    42bc:	0b c0       	rjmp	.+22     	; 0x42d4 <qtm_acquisition_process+0x224>
    42be:	21 15       	cp	r18, r1
    42c0:	31 05       	cpc	r19, r1
    42c2:	59 f4       	brne	.+22     	; 0x42da <qtm_acquisition_process+0x22a>
    42c4:	97 ff       	sbrs	r25, 7
    42c6:	25 c0       	rjmp	.+74     	; 0x4312 <qtm_acquisition_process+0x262>
    42c8:	e1 e8       	ldi	r30, 0x81	; 129
    42ca:	d7 01       	movw	r26, r14
    42cc:	ec 93       	st	X, r30
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	61 e0       	ldi	r22, 0x01	; 1
    42d4:	fe e0       	ldi	r31, 0x0E	; 14
    42d6:	f9 83       	std	Y+1, r31	; 0x01
    42d8:	1f c0       	rjmp	.+62     	; 0x4318 <qtm_acquisition_process+0x268>
    42da:	c9 01       	movw	r24, r18
    42dc:	41 11       	cpse	r20, r1
    42de:	0f c0       	rjmp	.+30     	; 0x42fe <qtm_acquisition_process+0x24e>
    42e0:	01 96       	adiw	r24, 0x01	; 1
    42e2:	21 e0       	ldi	r18, 0x01	; 1
    42e4:	82 1a       	sub	r8, r18
    42e6:	91 08       	sbc	r9, r1
    42e8:	31 e0       	ldi	r19, 0x01	; 1
    42ea:	83 16       	cp	r8, r19
    42ec:	91 04       	cpc	r9, r1
    42ee:	a1 f0       	breq	.+40     	; 0x4318 <qtm_acquisition_process+0x268>
    42f0:	8f 3f       	cpi	r24, 0xFF	; 255
    42f2:	43 e0       	ldi	r20, 0x03	; 3
    42f4:	94 07       	cpc	r25, r20
    42f6:	a1 f7       	brne	.-24     	; 0x42e0 <qtm_acquisition_process+0x230>
    42f8:	0f c0       	rjmp	.+30     	; 0x4318 <qtm_acquisition_process+0x268>
    42fa:	00 97       	sbiw	r24, 0x00	; 0
    42fc:	69 f0       	breq	.+26     	; 0x4318 <qtm_acquisition_process+0x268>
    42fe:	01 97       	sbiw	r24, 0x01	; 1
    4300:	ac 01       	movw	r20, r24
    4302:	42 1b       	sub	r20, r18
    4304:	53 0b       	sbc	r21, r19
    4306:	48 0d       	add	r20, r8
    4308:	59 1d       	adc	r21, r9
    430a:	41 30       	cpi	r20, 0x01	; 1
    430c:	51 05       	cpc	r21, r1
    430e:	a9 f7       	brne	.-22     	; 0x42fa <qtm_acquisition_process+0x24a>
    4310:	03 c0       	rjmp	.+6      	; 0x4318 <qtm_acquisition_process+0x268>
    4312:	80 ef       	ldi	r24, 0xF0	; 240
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	61 e0       	ldi	r22, 0x01	; 1
    4318:	d8 01       	movw	r26, r16
    431a:	14 96       	adiw	r26, 0x04	; 4
    431c:	ed 91       	ld	r30, X+
    431e:	fc 91       	ld	r31, X
    4320:	15 97       	sbiw	r26, 0x05	; 5
    4322:	ea 0d       	add	r30, r10
    4324:	fb 1d       	adc	r31, r11
    4326:	70 e0       	ldi	r23, 0x00	; 0
    4328:	77 27       	eor	r23, r23
    432a:	66 95       	lsr	r22
    432c:	77 95       	ror	r23
    432e:	66 27       	eor	r22, r22
    4330:	86 2b       	or	r24, r22
    4332:	97 2b       	or	r25, r23
    4334:	83 83       	std	Z+3, r24	; 0x03
    4336:	94 83       	std	Z+4, r25	; 0x04
    4338:	0f c1       	rjmp	.+542    	; 0x4558 <qtm_acquisition_process+0x4a8>
    433a:	f8 01       	movw	r30, r16
    433c:	82 80       	ldd	r8, Z+2	; 0x02
    433e:	93 80       	ldd	r9, Z+3	; 0x03
    4340:	8c 0c       	add	r8, r12
    4342:	9d 1c       	adc	r9, r13
    4344:	fa 01       	movw	r30, r20
    4346:	d4 01       	movw	r26, r8
    4348:	53 96       	adiw	r26, 0x13	; 19
    434a:	0c 90       	ld	r0, X
    434c:	53 97       	sbiw	r26, 0x13	; 19
    434e:	02 c0       	rjmp	.+4      	; 0x4354 <qtm_acquisition_process+0x2a4>
    4350:	f6 95       	lsr	r31
    4352:	e7 95       	ror	r30
    4354:	0a 94       	dec	r0
    4356:	e2 f7       	brpl	.-8      	; 0x4350 <qtm_acquisition_process+0x2a0>
    4358:	ec 83       	std	Y+4, r30	; 0x04
    435a:	fd 83       	std	Y+5, r31	; 0x05
    435c:	50 96       	adiw	r26, 0x10	; 16
    435e:	6c 90       	ld	r6, X
    4360:	ff e7       	ldi	r31, 0x7F	; 127
    4362:	6f 12       	cpse	r6, r31
    4364:	0f c0       	rjmp	.+30     	; 0x4384 <qtm_acquisition_process+0x2d4>
    4366:	ec 81       	ldd	r30, Y+4	; 0x04
    4368:	fd 81       	ldd	r31, Y+5	; 0x05
    436a:	d7 01       	movw	r26, r14
    436c:	11 96       	adiw	r26, 0x01	; 1
    436e:	ed 93       	st	X+, r30
    4370:	fc 93       	st	X, r31
    4372:	12 97       	sbiw	r26, 0x02	; 2
    4374:	d4 01       	movw	r26, r8
    4376:	50 96       	adiw	r26, 0x10	; 16
    4378:	8c 91       	ld	r24, X
    437a:	50 97       	sbiw	r26, 0x10	; 16
    437c:	8f 7b       	andi	r24, 0xBF	; 191
    437e:	50 96       	adiw	r26, 0x10	; 16
    4380:	8c 93       	st	X, r24
    4382:	42 c0       	rjmp	.+132    	; 0x4408 <qtm_acquisition_process+0x358>
    4384:	f1 2c       	mov	r15, r1
    4386:	26 2d       	mov	r18, r6
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	c9 01       	movw	r24, r18
    438c:	0f 2c       	mov	r0, r15
    438e:	02 c0       	rjmp	.+4      	; 0x4394 <qtm_acquisition_process+0x2e4>
    4390:	96 95       	lsr	r25
    4392:	87 95       	ror	r24
    4394:	0a 94       	dec	r0
    4396:	e2 f7       	brpl	.-8      	; 0x4390 <qtm_acquisition_process+0x2e0>
    4398:	80 ff       	sbrs	r24, 0
    439a:	03 c0       	rjmp	.+6      	; 0x43a2 <qtm_acquisition_process+0x2f2>
    439c:	8f 2d       	mov	r24, r15
    439e:	f1 2c       	mov	r15, r1
    43a0:	01 c0       	rjmp	.+2      	; 0x43a4 <qtm_acquisition_process+0x2f4>
    43a2:	87 e0       	ldi	r24, 0x07	; 7
    43a4:	8f 5f       	subi	r24, 0xFF	; 255
    43a6:	87 30       	cpi	r24, 0x07	; 7
    43a8:	10 f4       	brcc	.+4      	; 0x43ae <qtm_acquisition_process+0x2fe>
    43aa:	f8 2e       	mov	r15, r24
    43ac:	ee cf       	rjmp	.-36     	; 0x438a <qtm_acquisition_process+0x2da>
    43ae:	6c 81       	ldd	r22, Y+4	; 0x04
    43b0:	7d 81       	ldd	r23, Y+5	; 0x05
    43b2:	c1 01       	movw	r24, r2
    43b4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <charge_share_test>
    43b8:	88 23       	and	r24, r24
    43ba:	51 f0       	breq	.+20     	; 0x43d0 <qtm_acquisition_process+0x320>
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	0f 2c       	mov	r0, r15
    43c2:	01 c0       	rjmp	.+2      	; 0x43c6 <qtm_acquisition_process+0x316>
    43c4:	88 0f       	add	r24, r24
    43c6:	0a 94       	dec	r0
    43c8:	ea f7       	brpl	.-6      	; 0x43c4 <qtm_acquisition_process+0x314>
    43ca:	86 29       	or	r24, r6
    43cc:	f4 01       	movw	r30, r8
    43ce:	80 8b       	std	Z+16, r24	; 0x10
    43d0:	d8 01       	movw	r26, r16
    43d2:	ff 20       	and	r15, r15
    43d4:	91 f0       	breq	.+36     	; 0x43fa <qtm_acquisition_process+0x34a>
    43d6:	12 96       	adiw	r26, 0x02	; 2
    43d8:	ed 91       	ld	r30, X+
    43da:	fc 91       	ld	r31, X
    43dc:	13 97       	sbiw	r26, 0x03	; 3
    43de:	ec 0d       	add	r30, r12
    43e0:	fd 1d       	adc	r31, r13
    43e2:	fa 94       	dec	r15
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	01 c0       	rjmp	.+2      	; 0x43ec <qtm_acquisition_process+0x33c>
    43ea:	88 0f       	add	r24, r24
    43ec:	fa 94       	dec	r15
    43ee:	ea f7       	brpl	.-6      	; 0x43ea <qtm_acquisition_process+0x33a>
    43f0:	80 95       	com	r24
    43f2:	90 89       	ldd	r25, Z+16	; 0x10
    43f4:	89 23       	and	r24, r25
    43f6:	80 8b       	std	Z+16, r24	; 0x10
    43f8:	07 c0       	rjmp	.+14     	; 0x4408 <qtm_acquisition_process+0x358>
    43fa:	14 96       	adiw	r26, 0x04	; 4
    43fc:	ed 91       	ld	r30, X+
    43fe:	fc 91       	ld	r31, X
    4400:	15 97       	sbiw	r26, 0x05	; 5
    4402:	ea 0d       	add	r30, r10
    4404:	fb 1d       	adc	r31, r11
    4406:	70 82       	st	Z, r7
    4408:	d8 01       	movw	r26, r16
    440a:	14 96       	adiw	r26, 0x04	; 4
    440c:	ed 91       	ld	r30, X+
    440e:	fc 91       	ld	r31, X
    4410:	15 97       	sbiw	r26, 0x05	; 5
    4412:	ea 0d       	add	r30, r10
    4414:	fb 1d       	adc	r31, r11
    4416:	80 81       	ld	r24, Z
    4418:	81 30       	cpi	r24, 0x01	; 1
    441a:	09 f0       	breq	.+2      	; 0x441e <qtm_acquisition_process+0x36e>
    441c:	9d c0       	rjmp	.+314    	; 0x4558 <qtm_acquisition_process+0x4a8>
    441e:	2c 81       	ldd	r18, Y+4	; 0x04
    4420:	3d 81       	ldd	r19, Y+5	; 0x05
    4422:	83 c0       	rjmp	.+262    	; 0x452a <qtm_acquisition_process+0x47a>
    4424:	02 80       	ldd	r0, Z+2	; 0x02
    4426:	f3 81       	ldd	r31, Z+3	; 0x03
    4428:	e0 2d       	mov	r30, r0
    442a:	ec 0d       	add	r30, r12
    442c:	fd 1d       	adc	r31, r13
    442e:	9a 01       	movw	r18, r20
    4430:	03 88       	ldd	r0, Z+19	; 0x13
    4432:	02 c0       	rjmp	.+4      	; 0x4438 <qtm_acquisition_process+0x388>
    4434:	36 95       	lsr	r19
    4436:	27 95       	ror	r18
    4438:	0a 94       	dec	r0
    443a:	e2 f7       	brpl	.-8      	; 0x4434 <qtm_acquisition_process+0x384>
    443c:	2c 83       	std	Y+4, r18	; 0x04
    443e:	3d 83       	std	Y+5, r19	; 0x05
    4440:	91 88       	ldd	r9, Z+17	; 0x11
    4442:	92 94       	swap	r9
    4444:	2f e0       	ldi	r18, 0x0F	; 15
    4446:	92 22       	and	r9, r18
    4448:	37 e0       	ldi	r19, 0x07	; 7
    444a:	93 16       	cp	r9, r19
    444c:	91 f0       	breq	.+36     	; 0x4472 <qtm_acquisition_process+0x3c2>
    444e:	6c 81       	ldd	r22, Y+4	; 0x04
    4450:	7d 81       	ldd	r23, Y+5	; 0x05
    4452:	c1 01       	movw	r24, r2
    4454:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <charge_share_test>
    4458:	81 11       	cpse	r24, r1
    445a:	04 c0       	rjmp	.+8      	; 0x4464 <qtm_acquisition_process+0x3b4>
    445c:	93 94       	inc	r9
    445e:	d7 01       	movw	r26, r14
    4460:	7c 92       	st	X, r7
    4462:	09 c0       	rjmp	.+18     	; 0x4476 <qtm_acquisition_process+0x3c6>
    4464:	91 10       	cpse	r9, r1
    4466:	03 c0       	rjmp	.+6      	; 0x446e <qtm_acquisition_process+0x3be>
    4468:	f7 01       	movw	r30, r14
    446a:	70 82       	st	Z, r7
    446c:	04 c0       	rjmp	.+8      	; 0x4476 <qtm_acquisition_process+0x3c6>
    446e:	9a 94       	dec	r9
    4470:	02 c0       	rjmp	.+4      	; 0x4476 <qtm_acquisition_process+0x3c6>
    4472:	96 e0       	ldi	r25, 0x06	; 6
    4474:	99 2e       	mov	r9, r25
    4476:	d8 01       	movw	r26, r16
    4478:	12 96       	adiw	r26, 0x02	; 2
    447a:	ed 91       	ld	r30, X+
    447c:	fc 91       	ld	r31, X
    447e:	13 97       	sbiw	r26, 0x03	; 3
    4480:	ec 0d       	add	r30, r12
    4482:	fd 1d       	adc	r31, r13
    4484:	81 89       	ldd	r24, Z+17	; 0x11
    4486:	8f 70       	andi	r24, 0x0F	; 15
    4488:	81 8b       	std	Z+17, r24	; 0x11
    448a:	12 96       	adiw	r26, 0x02	; 2
    448c:	ed 91       	ld	r30, X+
    448e:	fc 91       	ld	r31, X
    4490:	13 97       	sbiw	r26, 0x03	; 3
    4492:	ec 0d       	add	r30, r12
    4494:	fd 1d       	adc	r31, r13
    4496:	92 94       	swap	r9
    4498:	80 ef       	ldi	r24, 0xF0	; 240
    449a:	98 22       	and	r9, r24
    449c:	36 c0       	rjmp	.+108    	; 0x450a <qtm_acquisition_process+0x45a>
    449e:	02 80       	ldd	r0, Z+2	; 0x02
    44a0:	f3 81       	ldd	r31, Z+3	; 0x03
    44a2:	e0 2d       	mov	r30, r0
    44a4:	ec 0d       	add	r30, r12
    44a6:	fd 1d       	adc	r31, r13
    44a8:	9a 01       	movw	r18, r20
    44aa:	03 88       	ldd	r0, Z+19	; 0x13
    44ac:	02 c0       	rjmp	.+4      	; 0x44b2 <qtm_acquisition_process+0x402>
    44ae:	36 95       	lsr	r19
    44b0:	27 95       	ror	r18
    44b2:	0a 94       	dec	r0
    44b4:	e2 f7       	brpl	.-8      	; 0x44ae <qtm_acquisition_process+0x3fe>
    44b6:	2c 83       	std	Y+4, r18	; 0x04
    44b8:	3d 83       	std	Y+5, r19	; 0x05
    44ba:	81 89       	ldd	r24, Z+17	; 0x11
    44bc:	8f 70       	andi	r24, 0x0F	; 15
    44be:	98 2e       	mov	r9, r24
    44c0:	91 f0       	breq	.+36     	; 0x44e6 <qtm_acquisition_process+0x436>
    44c2:	b9 01       	movw	r22, r18
    44c4:	c1 01       	movw	r24, r2
    44c6:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <charge_share_test>
    44ca:	81 11       	cpse	r24, r1
    44cc:	04 c0       	rjmp	.+8      	; 0x44d6 <qtm_acquisition_process+0x426>
    44ce:	9a 94       	dec	r9
    44d0:	d7 01       	movw	r26, r14
    44d2:	7c 92       	st	X, r7
    44d4:	0a c0       	rjmp	.+20     	; 0x44ea <qtm_acquisition_process+0x43a>
    44d6:	b7 e0       	ldi	r27, 0x07	; 7
    44d8:	9b 12       	cpse	r9, r27
    44da:	03 c0       	rjmp	.+6      	; 0x44e2 <qtm_acquisition_process+0x432>
    44dc:	f7 01       	movw	r30, r14
    44de:	70 82       	st	Z, r7
    44e0:	04 c0       	rjmp	.+8      	; 0x44ea <qtm_acquisition_process+0x43a>
    44e2:	93 94       	inc	r9
    44e4:	02 c0       	rjmp	.+4      	; 0x44ea <qtm_acquisition_process+0x43a>
    44e6:	99 24       	eor	r9, r9
    44e8:	93 94       	inc	r9
    44ea:	d8 01       	movw	r26, r16
    44ec:	12 96       	adiw	r26, 0x02	; 2
    44ee:	ed 91       	ld	r30, X+
    44f0:	fc 91       	ld	r31, X
    44f2:	13 97       	sbiw	r26, 0x03	; 3
    44f4:	ec 0d       	add	r30, r12
    44f6:	fd 1d       	adc	r31, r13
    44f8:	81 89       	ldd	r24, Z+17	; 0x11
    44fa:	80 7f       	andi	r24, 0xF0	; 240
    44fc:	81 8b       	std	Z+17, r24	; 0x11
    44fe:	12 96       	adiw	r26, 0x02	; 2
    4500:	ed 91       	ld	r30, X+
    4502:	fc 91       	ld	r31, X
    4504:	13 97       	sbiw	r26, 0x03	; 3
    4506:	ec 0d       	add	r30, r12
    4508:	fd 1d       	adc	r31, r13
    450a:	81 89       	ldd	r24, Z+17	; 0x11
    450c:	98 2a       	or	r9, r24
    450e:	91 8a       	std	Z+17, r9	; 0x11
    4510:	14 96       	adiw	r26, 0x04	; 4
    4512:	ed 91       	ld	r30, X+
    4514:	fc 91       	ld	r31, X
    4516:	15 97       	sbiw	r26, 0x05	; 5
    4518:	ea 0d       	add	r30, r10
    451a:	fb 1d       	adc	r31, r11
    451c:	2c 81       	ldd	r18, Y+4	; 0x04
    451e:	3d 81       	ldd	r19, Y+5	; 0x05
    4520:	21 83       	std	Z+1, r18	; 0x01
    4522:	32 83       	std	Z+2, r19	; 0x02
    4524:	80 81       	ld	r24, Z
    4526:	81 30       	cpi	r24, 0x01	; 1
    4528:	b9 f4       	brne	.+46     	; 0x4558 <qtm_acquisition_process+0x4a8>
    452a:	21 15       	cp	r18, r1
    452c:	42 e0       	ldi	r20, 0x02	; 2
    452e:	34 07       	cpc	r19, r20
    4530:	28 f0       	brcs	.+10     	; 0x453c <qtm_acquisition_process+0x48c>
    4532:	2f 5f       	subi	r18, 0xFF	; 255
    4534:	31 40       	sbci	r19, 0x01	; 1
    4536:	2c 83       	std	Y+4, r18	; 0x04
    4538:	3d 83       	std	Y+5, r19	; 0x05
    453a:	07 c0       	rjmp	.+14     	; 0x454a <qtm_acquisition_process+0x49a>
    453c:	c2 01       	movw	r24, r4
    453e:	ac 81       	ldd	r26, Y+4	; 0x04
    4540:	bd 81       	ldd	r27, Y+5	; 0x05
    4542:	8a 1b       	sub	r24, r26
    4544:	9b 0b       	sbc	r25, r27
    4546:	8c 83       	std	Y+4, r24	; 0x04
    4548:	9d 83       	std	Y+5, r25	; 0x05
    454a:	2c 81       	ldd	r18, Y+4	; 0x04
    454c:	3d 81       	ldd	r19, Y+5	; 0x05
    454e:	2b 30       	cpi	r18, 0x0B	; 11
    4550:	31 05       	cpc	r19, r1
    4552:	10 f0       	brcs	.+4      	; 0x4558 <qtm_acquisition_process+0x4a8>
    4554:	35 e4       	ldi	r19, 0x45	; 69
    4556:	30 83       	st	Z, r19
    4558:	4f ef       	ldi	r20, 0xFF	; 255
    455a:	24 1a       	sub	r2, r20
    455c:	34 0a       	sbc	r3, r20
    455e:	55 e0       	ldi	r21, 0x05	; 5
    4560:	a5 0e       	add	r10, r21
    4562:	b1 1c       	adc	r11, r1
    4564:	84 e1       	ldi	r24, 0x14	; 20
    4566:	c8 0e       	add	r12, r24
    4568:	d1 1c       	adc	r13, r1
    456a:	d5 cd       	rjmp	.-1110   	; 0x4116 <qtm_acquisition_process+0x66>
    456c:	82 e0       	ldi	r24, 0x02	; 2
    456e:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <touch_seq_lib_state>
    4572:	09 c0       	rjmp	.+18     	; 0x4586 <qtm_acquisition_process+0x4d6>
    4574:	b3 e0       	ldi	r27, 0x03	; 3
    4576:	b9 83       	std	Y+1, r27	; 0x01
    4578:	06 c0       	rjmp	.+12     	; 0x4586 <qtm_acquisition_process+0x4d6>
    457a:	49 2f       	mov	r20, r25
    457c:	40 95       	com	r20
    457e:	44 1f       	adc	r20, r20
    4580:	44 27       	eor	r20, r20
    4582:	44 1f       	adc	r20, r20
    4584:	4c ce       	rjmp	.-872    	; 0x421e <qtm_acquisition_process+0x16e>
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	27 96       	adiw	r28, 0x07	; 7
    458a:	cd bf       	out	0x3d, r28	; 61
    458c:	de bf       	out	0x3e, r29	; 62
    458e:	df 91       	pop	r29
    4590:	cf 91       	pop	r28
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	ff 90       	pop	r15
    4598:	ef 90       	pop	r14
    459a:	df 90       	pop	r13
    459c:	cf 90       	pop	r12
    459e:	bf 90       	pop	r11
    45a0:	af 90       	pop	r10
    45a2:	9f 90       	pop	r9
    45a4:	8f 90       	pop	r8
    45a6:	7f 90       	pop	r7
    45a8:	6f 90       	pop	r6
    45aa:	5f 90       	pop	r5
    45ac:	4f 90       	pop	r4
    45ae:	3f 90       	pop	r3
    45b0:	2f 90       	pop	r2
    45b2:	08 95       	ret

000045b4 <qtm_ptc_init_acquisition_module>:
    45b4:	5f 92       	push	r5
    45b6:	6f 92       	push	r6
    45b8:	7f 92       	push	r7
    45ba:	8f 92       	push	r8
    45bc:	9f 92       	push	r9
    45be:	af 92       	push	r10
    45c0:	bf 92       	push	r11
    45c2:	cf 92       	push	r12
    45c4:	df 92       	push	r13
    45c6:	ef 92       	push	r14
    45c8:	ff 92       	push	r15
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	00 97       	sbiw	r24, 0x00	; 0
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <qtm_ptc_init_acquisition_module+0x24>
    45d6:	92 c0       	rjmp	.+292    	; 0x46fc <qtm_ptc_init_acquisition_module+0x148>
    45d8:	dc 01       	movw	r26, r24
    45da:	ed 91       	ld	r30, X+
    45dc:	fc 91       	ld	r31, X
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	40 e0       	ldi	r20, 0x00	; 0
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	b0 e0       	ldi	r27, 0x00	; 0
    45ec:	10 e0       	ldi	r17, 0x00	; 0
    45ee:	f1 2c       	mov	r15, r1
    45f0:	e1 2c       	mov	r14, r1
    45f2:	91 2c       	mov	r9, r1
    45f4:	81 2c       	mov	r8, r1
    45f6:	71 2c       	mov	r7, r1
    45f8:	61 2c       	mov	r6, r1
    45fa:	26 17       	cp	r18, r22
    45fc:	37 07       	cpc	r19, r23
    45fe:	51 f1       	breq	.+84     	; 0x4654 <qtm_ptc_init_acquisition_module+0xa0>
    4600:	ec 01       	movw	r28, r24
    4602:	ea 81       	ldd	r30, Y+2	; 0x02
    4604:	fb 81       	ldd	r31, Y+3	; 0x03
    4606:	e4 0f       	add	r30, r20
    4608:	f5 1f       	adc	r31, r21
    460a:	a0 80       	ld	r10, Z
    460c:	a0 85       	ldd	r26, Z+8	; 0x08
    460e:	aa 2a       	or	r10, r26
    4610:	b1 80       	ldd	r11, Z+1	; 0x01
    4612:	a1 85       	ldd	r26, Z+9	; 0x09
    4614:	ba 2a       	or	r11, r26
    4616:	c2 80       	ldd	r12, Z+2	; 0x02
    4618:	a2 85       	ldd	r26, Z+10	; 0x0a
    461a:	ca 2a       	or	r12, r26
    461c:	d3 80       	ldd	r13, Z+3	; 0x03
    461e:	a3 85       	ldd	r26, Z+11	; 0x0b
    4620:	da 2a       	or	r13, r26
    4622:	d4 81       	ldd	r29, Z+4	; 0x04
    4624:	a4 85       	ldd	r26, Z+12	; 0x0c
    4626:	da 2b       	or	r29, r26
    4628:	c5 81       	ldd	r28, Z+5	; 0x05
    462a:	a5 85       	ldd	r26, Z+13	; 0x0d
    462c:	ca 2b       	or	r28, r26
    462e:	56 80       	ldd	r5, Z+6	; 0x06
    4630:	a6 85       	ldd	r26, Z+14	; 0x0e
    4632:	a5 29       	or	r26, r5
    4634:	57 80       	ldd	r5, Z+7	; 0x07
    4636:	e7 85       	ldd	r30, Z+15	; 0x0f
    4638:	e5 29       	or	r30, r5
    463a:	ba 29       	or	r27, r10
    463c:	1b 29       	or	r17, r11
    463e:	fc 28       	or	r15, r12
    4640:	ed 28       	or	r14, r13
    4642:	9d 2a       	or	r9, r29
    4644:	8c 2a       	or	r8, r28
    4646:	7a 2a       	or	r7, r26
    4648:	6e 2a       	or	r6, r30
    464a:	2f 5f       	subi	r18, 0xFF	; 255
    464c:	3f 4f       	sbci	r19, 0xFF	; 255
    464e:	4c 5e       	subi	r20, 0xEC	; 236
    4650:	5f 4f       	sbci	r21, 0xFF	; 255
    4652:	d3 cf       	rjmp	.-90     	; 0x45fa <qtm_ptc_init_acquisition_module+0x46>
    4654:	2b 2f       	mov	r18, r27
    4656:	31 2f       	mov	r19, r17
    4658:	4f 2d       	mov	r20, r15
    465a:	5e 2d       	mov	r21, r14
    465c:	69 2d       	mov	r22, r9
    465e:	78 2d       	mov	r23, r8
    4660:	87 2d       	mov	r24, r7
    4662:	96 2d       	mov	r25, r6
    4664:	a0 e0       	ldi	r26, 0x00	; 0
    4666:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__cmpdi2_s8>
    466a:	09 f4       	brne	.+2      	; 0x466e <qtm_ptc_init_acquisition_module+0xba>
    466c:	49 c0       	rjmp	.+146    	; 0x4700 <qtm_ptc_init_acquisition_module+0x14c>
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <touch_seq_lib_state>
    4674:	22 ef       	ldi	r18, 0xF2	; 242
    4676:	c2 2e       	mov	r12, r18
    4678:	20 e4       	ldi	r18, 0x40	; 64
    467a:	d2 2e       	mov	r13, r18
    467c:	c0 e0       	ldi	r28, 0x00	; 0
    467e:	d0 e0       	ldi	r29, 0x00	; 0
    4680:	aa 24       	eor	r10, r10
    4682:	a3 94       	inc	r10
    4684:	b1 2c       	mov	r11, r1
    4686:	4c e0       	ldi	r20, 0x0C	; 12
    4688:	54 2e       	mov	r5, r20
    468a:	2b 2f       	mov	r18, r27
    468c:	31 2f       	mov	r19, r17
    468e:	4f 2d       	mov	r20, r15
    4690:	5e 2d       	mov	r21, r14
    4692:	69 2d       	mov	r22, r9
    4694:	78 2d       	mov	r23, r8
    4696:	87 2d       	mov	r24, r7
    4698:	96 2d       	mov	r25, r6
    469a:	0c 2f       	mov	r16, r28
    469c:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <__lshrdi3>
    46a0:	21 70       	andi	r18, 0x01	; 1
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	40 e0       	ldi	r20, 0x00	; 0
    46a6:	50 e0       	ldi	r21, 0x00	; 0
    46a8:	60 e0       	ldi	r22, 0x00	; 0
    46aa:	70 e0       	ldi	r23, 0x00	; 0
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	a0 e0       	ldi	r26, 0x00	; 0
    46b2:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__cmpdi2_s8>
    46b6:	c9 f0       	breq	.+50     	; 0x46ea <qtm_ptc_init_acquisition_module+0x136>
    46b8:	f6 01       	movw	r30, r12
    46ba:	80 81       	ld	r24, Z
    46bc:	e8 2f       	mov	r30, r24
    46be:	e2 95       	swap	r30
    46c0:	e6 95       	lsr	r30
    46c2:	e7 70       	andi	r30, 0x07	; 7
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	ee 0f       	add	r30, r30
    46c8:	ff 1f       	adc	r31, r31
    46ca:	ec 51       	subi	r30, 0x1C	; 28
    46cc:	ff 4b       	sbci	r31, 0xBF	; 191
    46ce:	01 90       	ld	r0, Z+
    46d0:	f0 81       	ld	r31, Z
    46d2:	e0 2d       	mov	r30, r0
    46d4:	8f 71       	andi	r24, 0x1F	; 31
    46d6:	95 01       	movw	r18, r10
    46d8:	02 c0       	rjmp	.+4      	; 0x46de <qtm_ptc_init_acquisition_module+0x12a>
    46da:	22 0f       	add	r18, r18
    46dc:	33 1f       	adc	r19, r19
    46de:	8a 95       	dec	r24
    46e0:	e2 f7       	brpl	.-8      	; 0x46da <qtm_ptc_init_acquisition_module+0x126>
    46e2:	22 83       	std	Z+2, r18	; 0x02
    46e4:	26 83       	std	Z+6, r18	; 0x06
    46e6:	53 86       	std	Z+11, r5	; 0x0b
    46e8:	25 87       	std	Z+13, r18	; 0x0d
    46ea:	21 96       	adiw	r28, 0x01	; 1
    46ec:	3f ef       	ldi	r19, 0xFF	; 255
    46ee:	c3 1a       	sub	r12, r19
    46f0:	d3 0a       	sbc	r13, r19
    46f2:	c0 33       	cpi	r28, 0x30	; 48
    46f4:	d1 05       	cpc	r29, r1
    46f6:	49 f6       	brne	.-110    	; 0x468a <qtm_ptc_init_acquisition_module+0xd6>
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	03 c0       	rjmp	.+6      	; 0x4702 <qtm_ptc_init_acquisition_module+0x14e>
    46fc:	8b e0       	ldi	r24, 0x0B	; 11
    46fe:	01 c0       	rjmp	.+2      	; 0x4702 <qtm_ptc_init_acquisition_module+0x14e>
    4700:	82 e0       	ldi	r24, 0x02	; 2
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
    470a:	ff 90       	pop	r15
    470c:	ef 90       	pop	r14
    470e:	df 90       	pop	r13
    4710:	cf 90       	pop	r12
    4712:	bf 90       	pop	r11
    4714:	af 90       	pop	r10
    4716:	9f 90       	pop	r9
    4718:	8f 90       	pop	r8
    471a:	7f 90       	pop	r7
    471c:	6f 90       	pop	r6
    471e:	5f 90       	pop	r5
    4720:	08 95       	ret

00004722 <qtm_ptc_qtlib_assign_signal_memory>:
    4722:	00 97       	sbiw	r24, 0x00	; 0
    4724:	31 f0       	breq	.+12     	; 0x4732 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    4726:	80 93 b4 41 	sts	0x41B4, r24	; 0x8041b4 <qtm_raw_data_measurements_ptr>
    472a:	90 93 b5 41 	sts	0x41B5, r25	; 0x8041b5 <qtm_raw_data_measurements_ptr+0x1>
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	08 95       	ret
    4732:	8b e0       	ldi	r24, 0x0B	; 11
    4734:	08 95       	ret

00004736 <qtm_ptc_start_measurement_seq>:
    4736:	61 15       	cp	r22, r1
    4738:	71 05       	cpc	r23, r1
    473a:	61 f1       	breq	.+88     	; 0x4794 <qtm_ptc_start_measurement_seq+0x5e>
    473c:	00 97       	sbiw	r24, 0x00	; 0
    473e:	51 f1       	breq	.+84     	; 0x4794 <qtm_ptc_start_measurement_seq+0x5e>
    4740:	20 91 6b 41 	lds	r18, 0x416B	; 0x80416b <touch_seq_lib_state>
    4744:	22 23       	and	r18, r18
    4746:	41 f1       	breq	.+80     	; 0x4798 <qtm_ptc_start_measurement_seq+0x62>
    4748:	24 30       	cpi	r18, 0x04	; 4
    474a:	41 f1       	breq	.+80     	; 0x479c <qtm_ptc_start_measurement_seq+0x66>
    474c:	80 93 b2 41 	sts	0x41B2, r24	; 0x8041b2 <qtm_acquisition_control_working_set_ptr>
    4750:	90 93 b3 41 	sts	0x41B3, r25	; 0x8041b3 <qtm_acquisition_control_working_set_ptr+0x1>
    4754:	60 93 69 41 	sts	0x4169, r22	; 0x804169 <ptc_seq_measure_complete_pointer>
    4758:	70 93 6a 41 	sts	0x416A, r23	; 0x80416a <ptc_seq_measure_complete_pointer+0x1>
    475c:	dc 01       	movw	r26, r24
    475e:	ed 91       	ld	r30, X+
    4760:	fc 91       	ld	r31, X
    4762:	22 81       	ldd	r18, Z+2	; 0x02
    4764:	20 34       	cpi	r18, 0x40	; 64
    4766:	19 f4       	brne	.+6      	; 0x476e <qtm_ptc_start_measurement_seq+0x38>
    4768:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    476c:	07 c0       	rjmp	.+14     	; 0x477c <qtm_ptc_start_measurement_seq+0x46>
    476e:	20 38       	cpi	r18, 0x80	; 128
    4770:	11 f0       	breq	.+4      	; 0x4776 <qtm_ptc_start_measurement_seq+0x40>
    4772:	21 38       	cpi	r18, 0x81	; 129
    4774:	31 f4       	brne	.+12     	; 0x4782 <qtm_ptc_start_measurement_seq+0x4c>
    4776:	21 e0       	ldi	r18, 0x01	; 1
    4778:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    477c:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    4780:	11 c0       	rjmp	.+34     	; 0x47a4 <qtm_ptc_start_measurement_seq+0x6e>
    4782:	22 38       	cpi	r18, 0x82	; 130
    4784:	69 f4       	brne	.+26     	; 0x47a0 <qtm_ptc_start_measurement_seq+0x6a>
    4786:	21 e0       	ldi	r18, 0x01	; 1
    4788:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    478c:	29 e0       	ldi	r18, 0x09	; 9
    478e:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    4792:	08 c0       	rjmp	.+16     	; 0x47a4 <qtm_ptc_start_measurement_seq+0x6e>
    4794:	8b e0       	ldi	r24, 0x0B	; 11
    4796:	08 95       	ret
    4798:	83 e0       	ldi	r24, 0x03	; 3
    479a:	08 95       	ret
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	08 95       	ret
    47a0:	82 e0       	ldi	r24, 0x02	; 2
    47a2:	08 95       	ret
    47a4:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    47a8:	dc 01       	movw	r26, r24
    47aa:	ed 91       	ld	r30, X+
    47ac:	fc 91       	ld	r31, X
    47ae:	84 81       	ldd	r24, Z+4	; 0x04
    47b0:	92 81       	ldd	r25, Z+2	; 0x02
    47b2:	90 34       	cpi	r25, 0x40	; 64
    47b4:	51 f4       	brne	.+20     	; 0x47ca <qtm_ptc_start_measurement_seq+0x94>
    47b6:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    47ba:	80 31       	cpi	r24, 0x10	; 16
    47bc:	10 f4       	brcc	.+4      	; 0x47c2 <qtm_ptc_start_measurement_seq+0x8c>
    47be:	80 62       	ori	r24, 0x20	; 32
    47c0:	01 c0       	rjmp	.+2      	; 0x47c4 <qtm_ptc_start_measurement_seq+0x8e>
    47c2:	8f e2       	ldi	r24, 0x2F	; 47
    47c4:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    47c8:	08 c0       	rjmp	.+16     	; 0x47da <qtm_ptc_start_measurement_seq+0xa4>
    47ca:	90 e2       	ldi	r25, 0x20	; 32
    47cc:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    47d0:	8f 30       	cpi	r24, 0x0F	; 15
    47d2:	08 f0       	brcs	.+2      	; 0x47d6 <qtm_ptc_start_measurement_seq+0xa0>
    47d4:	8f e0       	ldi	r24, 0x0F	; 15
    47d6:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <__TEXT_REGION_LENGTH__+0x7e07d3>
    47e0:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <__TEXT_REGION_LENGTH__+0x7e07d2>
    47e4:	80 93 d6 40 	sts	0x40D6, r24	; 0x8040d6 <qtm_which_mode_current>
    47e8:	10 92 6c 41 	sts	0x416C, r1	; 0x80416c <current_measure_channel>
    47ec:	10 92 6d 41 	sts	0x416D, r1	; 0x80416d <current_measure_channel+0x1>
    47f0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <select_next_channel_to_measure>
    47f4:	81 11       	cpse	r24, r1
    47f6:	0b c0       	rjmp	.+22     	; 0x480e <qtm_ptc_start_measurement_seq+0xd8>
    47f8:	84 e0       	ldi	r24, 0x04	; 4
    47fa:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <touch_seq_lib_state>
    47fe:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <current_measure_channel>
    4802:	90 91 6d 41 	lds	r25, 0x416D	; 0x80416d <current_measure_channel+0x1>
    4806:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <qtm_measure_node>
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	08 95       	ret
    480e:	82 e0       	ldi	r24, 0x02	; 2
    4810:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <touch_seq_lib_state>
    4814:	08 95       	ret

00004816 <qtm_enable_sensor_node>:
    4816:	00 97       	sbiw	r24, 0x00	; 0
    4818:	c9 f0       	breq	.+50     	; 0x484c <qtm_enable_sensor_node+0x36>
    481a:	dc 01       	movw	r26, r24
    481c:	ed 91       	ld	r30, X+
    481e:	fc 91       	ld	r31, X
    4820:	11 97       	sbiw	r26, 0x01	; 1
    4822:	20 81       	ld	r18, Z
    4824:	31 81       	ldd	r19, Z+1	; 0x01
    4826:	26 17       	cp	r18, r22
    4828:	37 07       	cpc	r19, r23
    482a:	90 f0       	brcs	.+36     	; 0x4850 <qtm_enable_sensor_node+0x3a>
    482c:	45 e0       	ldi	r20, 0x05	; 5
    482e:	46 9f       	mul	r20, r22
    4830:	90 01       	movw	r18, r0
    4832:	47 9f       	mul	r20, r23
    4834:	30 0d       	add	r19, r0
    4836:	11 24       	eor	r1, r1
    4838:	14 96       	adiw	r26, 0x04	; 4
    483a:	ed 91       	ld	r30, X+
    483c:	fc 91       	ld	r31, X
    483e:	15 97       	sbiw	r26, 0x05	; 5
    4840:	e2 0f       	add	r30, r18
    4842:	f3 1f       	adc	r31, r19
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	80 83       	st	Z, r24
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	08 95       	ret
    484c:	8b e0       	ldi	r24, 0x0B	; 11
    484e:	08 95       	ret
    4850:	82 e0       	ldi	r24, 0x02	; 2
    4852:	08 95       	ret

00004854 <qtm_calibrate_sensor_node>:
    4854:	fc 01       	movw	r30, r24
    4856:	89 2b       	or	r24, r25
    4858:	d1 f1       	breq	.+116    	; 0x48ce <qtm_calibrate_sensor_node+0x7a>
    485a:	a0 81       	ld	r26, Z
    485c:	b1 81       	ldd	r27, Z+1	; 0x01
    485e:	8d 91       	ld	r24, X+
    4860:	9c 91       	ld	r25, X
    4862:	11 97       	sbiw	r26, 0x01	; 1
    4864:	86 17       	cp	r24, r22
    4866:	97 07       	cpc	r25, r23
    4868:	a0 f1       	brcs	.+104    	; 0x48d2 <qtm_calibrate_sensor_node+0x7e>
    486a:	12 96       	adiw	r26, 0x02	; 2
    486c:	9c 91       	ld	r25, X
    486e:	04 80       	ldd	r0, Z+4	; 0x04
    4870:	f5 81       	ldd	r31, Z+5	; 0x05
    4872:	e0 2d       	mov	r30, r0
    4874:	90 34       	cpi	r25, 0x40	; 64
    4876:	59 f4       	brne	.+22     	; 0x488e <qtm_calibrate_sensor_node+0x3a>
    4878:	85 e0       	ldi	r24, 0x05	; 5
    487a:	86 9f       	mul	r24, r22
    487c:	d0 01       	movw	r26, r0
    487e:	87 9f       	mul	r24, r23
    4880:	b0 0d       	add	r27, r0
    4882:	11 24       	eor	r1, r1
    4884:	ae 0f       	add	r26, r30
    4886:	bf 1f       	adc	r27, r31
    4888:	80 ea       	ldi	r24, 0xA0	; 160
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	0d c0       	rjmp	.+26     	; 0x48a8 <qtm_calibrate_sensor_node+0x54>
    488e:	90 58       	subi	r25, 0x80	; 128
    4890:	93 30       	cpi	r25, 0x03	; 3
    4892:	80 f4       	brcc	.+32     	; 0x48b4 <qtm_calibrate_sensor_node+0x60>
    4894:	85 e0       	ldi	r24, 0x05	; 5
    4896:	86 9f       	mul	r24, r22
    4898:	d0 01       	movw	r26, r0
    489a:	87 9f       	mul	r24, r23
    489c:	b0 0d       	add	r27, r0
    489e:	11 24       	eor	r1, r1
    48a0:	ae 0f       	add	r26, r30
    48a2:	bf 1f       	adc	r27, r31
    48a4:	80 ef       	ldi	r24, 0xF0	; 240
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	13 96       	adiw	r26, 0x03	; 3
    48aa:	8d 93       	st	X+, r24
    48ac:	9c 93       	st	X, r25
    48ae:	14 97       	sbiw	r26, 0x04	; 4
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	01 c0       	rjmp	.+2      	; 0x48b6 <qtm_calibrate_sensor_node+0x62>
    48b4:	82 e0       	ldi	r24, 0x02	; 2
    48b6:	95 e0       	ldi	r25, 0x05	; 5
    48b8:	96 9f       	mul	r25, r22
    48ba:	90 01       	movw	r18, r0
    48bc:	97 9f       	mul	r25, r23
    48be:	30 0d       	add	r19, r0
    48c0:	11 24       	eor	r1, r1
    48c2:	e2 0f       	add	r30, r18
    48c4:	f3 1f       	adc	r31, r19
    48c6:	90 81       	ld	r25, Z
    48c8:	92 60       	ori	r25, 0x02	; 2
    48ca:	90 83       	st	Z, r25
    48cc:	08 95       	ret
    48ce:	8b e0       	ldi	r24, 0x0B	; 11
    48d0:	08 95       	ret
    48d2:	82 e0       	ldi	r24, 0x02	; 2
    48d4:	08 95       	ret

000048d6 <qtm_avr_da_ptc_handler_wcomp>:
    48d6:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    48da:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    48de:	60 91 6c 41 	lds	r22, 0x416C	; 0x80416c <current_measure_channel>
    48e2:	70 91 6d 41 	lds	r23, 0x416D	; 0x80416d <current_measure_channel+0x1>
    48e6:	cb 01       	movw	r24, r22
    48e8:	88 0f       	add	r24, r24
    48ea:	99 1f       	adc	r25, r25
    48ec:	e0 91 b4 41 	lds	r30, 0x41B4	; 0x8041b4 <qtm_raw_data_measurements_ptr>
    48f0:	f0 91 b5 41 	lds	r31, 0x41B5	; 0x8041b5 <qtm_raw_data_measurements_ptr+0x1>
    48f4:	e8 0f       	add	r30, r24
    48f6:	f9 1f       	adc	r31, r25
    48f8:	20 83       	st	Z, r18
    48fa:	31 83       	std	Z+1, r19	; 0x01
    48fc:	a0 91 b2 41 	lds	r26, 0x41B2	; 0x8041b2 <qtm_acquisition_control_working_set_ptr>
    4900:	b0 91 b3 41 	lds	r27, 0x41B3	; 0x8041b3 <qtm_acquisition_control_working_set_ptr+0x1>
    4904:	44 e1       	ldi	r20, 0x14	; 20
    4906:	46 9f       	mul	r20, r22
    4908:	c0 01       	movw	r24, r0
    490a:	47 9f       	mul	r20, r23
    490c:	90 0d       	add	r25, r0
    490e:	11 24       	eor	r1, r1
    4910:	12 96       	adiw	r26, 0x02	; 2
    4912:	ed 91       	ld	r30, X+
    4914:	fc 91       	ld	r31, X
    4916:	13 97       	sbiw	r26, 0x03	; 3
    4918:	e8 0f       	add	r30, r24
    491a:	f9 1f       	adc	r31, r25
    491c:	92 89       	ldd	r25, Z+18	; 0x12
    491e:	9f 70       	andi	r25, 0x0F	; 15
    4920:	83 89       	ldd	r24, Z+19	; 0x13
    4922:	98 17       	cp	r25, r24
    4924:	10 f4       	brcc	.+4      	; 0x492a <qtm_avr_da_ptc_handler_wcomp+0x54>
    4926:	89 1b       	sub	r24, r25
    4928:	01 c0       	rjmp	.+2      	; 0x492c <qtm_avr_da_ptc_handler_wcomp+0x56>
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	95 e0       	ldi	r25, 0x05	; 5
    492e:	96 9f       	mul	r25, r22
    4930:	a0 01       	movw	r20, r0
    4932:	97 9f       	mul	r25, r23
    4934:	50 0d       	add	r21, r0
    4936:	11 24       	eor	r1, r1
    4938:	14 96       	adiw	r26, 0x04	; 4
    493a:	ed 91       	ld	r30, X+
    493c:	fc 91       	ld	r31, X
    493e:	15 97       	sbiw	r26, 0x05	; 5
    4940:	e4 0f       	add	r30, r20
    4942:	f5 1f       	adc	r31, r21
    4944:	02 c0       	rjmp	.+4      	; 0x494a <qtm_avr_da_ptc_handler_wcomp+0x74>
    4946:	36 95       	lsr	r19
    4948:	27 95       	ror	r18
    494a:	8a 95       	dec	r24
    494c:	e2 f7       	brpl	.-8      	; 0x4946 <qtm_avr_da_ptc_handler_wcomp+0x70>
    494e:	21 83       	std	Z+1, r18	; 0x01
    4950:	32 83       	std	Z+2, r19	; 0x02
    4952:	82 e0       	ldi	r24, 0x02	; 2
    4954:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <touch_seq_lib_state>
    4958:	e0 91 67 41 	lds	r30, 0x4167	; 0x804167 <ptc_wcomp_happened_pointer>
    495c:	f0 91 68 41 	lds	r31, 0x4168	; 0x804168 <ptc_wcomp_happened_pointer+0x1>
    4960:	09 94       	ijmp

00004962 <qtm_avr_da_ptc_handler_eoc>:
    4962:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    4966:	80 91 d6 40 	lds	r24, 0x40D6	; 0x8040d6 <qtm_which_mode_current>
    496a:	81 30       	cpi	r24, 0x01	; 1
    496c:	09 f0       	breq	.+2      	; 0x4970 <qtm_avr_da_ptc_handler_eoc+0xe>
    496e:	4e c0       	rjmp	.+156    	; 0x4a0c <qtm_avr_da_ptc_handler_eoc+0xaa>
    4970:	40 91 da 07 	lds	r20, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    4974:	50 91 db 07 	lds	r21, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    4978:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <current_measure_channel>
    497c:	90 91 6d 41 	lds	r25, 0x416D	; 0x80416d <current_measure_channel+0x1>
    4980:	9c 01       	movw	r18, r24
    4982:	22 0f       	add	r18, r18
    4984:	33 1f       	adc	r19, r19
    4986:	e0 91 b4 41 	lds	r30, 0x41B4	; 0x8041b4 <qtm_raw_data_measurements_ptr>
    498a:	f0 91 b5 41 	lds	r31, 0x41B5	; 0x8041b5 <qtm_raw_data_measurements_ptr+0x1>
    498e:	e2 0f       	add	r30, r18
    4990:	f3 1f       	adc	r31, r19
    4992:	40 83       	st	Z, r20
    4994:	51 83       	std	Z+1, r21	; 0x01
    4996:	01 96       	adiw	r24, 0x01	; 1
    4998:	80 93 6c 41 	sts	0x416C, r24	; 0x80416c <current_measure_channel>
    499c:	90 93 6d 41 	sts	0x416D, r25	; 0x80416d <current_measure_channel+0x1>
    49a0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <select_next_channel_to_measure>
    49a4:	81 11       	cpse	r24, r1
    49a6:	09 c0       	rjmp	.+18     	; 0x49ba <qtm_avr_da_ptc_handler_eoc+0x58>
    49a8:	84 e0       	ldi	r24, 0x04	; 4
    49aa:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <touch_seq_lib_state>
    49ae:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <current_measure_channel>
    49b2:	90 91 6d 41 	lds	r25, 0x416D	; 0x80416d <current_measure_channel+0x1>
    49b6:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <qtm_measure_node>
    49ba:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    49be:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    49c2:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    49c6:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    49ca:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    49ce:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    49d2:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    49d6:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    49da:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    49de:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    49e2:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    49e6:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    49ea:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    49ee:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    49f2:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    49f6:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    49fa:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    49fe:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    4a02:	e0 91 69 41 	lds	r30, 0x4169	; 0x804169 <ptc_seq_measure_complete_pointer>
    4a06:	f0 91 6a 41 	lds	r31, 0x416A	; 0x80416a <ptc_seq_measure_complete_pointer+0x1>
    4a0a:	09 94       	ijmp
    4a0c:	0c 94 6b 24 	jmp	0x48d6	; 0x48d6 <qtm_avr_da_ptc_handler_wcomp>

00004a10 <__cmpsf2>:
    4a10:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__fp_cmp>
    4a14:	08 f4       	brcc	.+2      	; 0x4a18 <__cmpsf2+0x8>
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	08 95       	ret

00004a1a <__fixunssfsi>:
    4a1a:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__fp_splitA>
    4a1e:	88 f0       	brcs	.+34     	; 0x4a42 <__fixunssfsi+0x28>
    4a20:	9f 57       	subi	r25, 0x7F	; 127
    4a22:	98 f0       	brcs	.+38     	; 0x4a4a <__fixunssfsi+0x30>
    4a24:	b9 2f       	mov	r27, r25
    4a26:	99 27       	eor	r25, r25
    4a28:	b7 51       	subi	r27, 0x17	; 23
    4a2a:	b0 f0       	brcs	.+44     	; 0x4a58 <__fixunssfsi+0x3e>
    4a2c:	e1 f0       	breq	.+56     	; 0x4a66 <__fixunssfsi+0x4c>
    4a2e:	66 0f       	add	r22, r22
    4a30:	77 1f       	adc	r23, r23
    4a32:	88 1f       	adc	r24, r24
    4a34:	99 1f       	adc	r25, r25
    4a36:	1a f0       	brmi	.+6      	; 0x4a3e <__fixunssfsi+0x24>
    4a38:	ba 95       	dec	r27
    4a3a:	c9 f7       	brne	.-14     	; 0x4a2e <__fixunssfsi+0x14>
    4a3c:	14 c0       	rjmp	.+40     	; 0x4a66 <__fixunssfsi+0x4c>
    4a3e:	b1 30       	cpi	r27, 0x01	; 1
    4a40:	91 f0       	breq	.+36     	; 0x4a66 <__fixunssfsi+0x4c>
    4a42:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__fp_zero>
    4a46:	b1 e0       	ldi	r27, 0x01	; 1
    4a48:	08 95       	ret
    4a4a:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <__fp_zero>
    4a4e:	67 2f       	mov	r22, r23
    4a50:	78 2f       	mov	r23, r24
    4a52:	88 27       	eor	r24, r24
    4a54:	b8 5f       	subi	r27, 0xF8	; 248
    4a56:	39 f0       	breq	.+14     	; 0x4a66 <__fixunssfsi+0x4c>
    4a58:	b9 3f       	cpi	r27, 0xF9	; 249
    4a5a:	cc f3       	brlt	.-14     	; 0x4a4e <__fixunssfsi+0x34>
    4a5c:	86 95       	lsr	r24
    4a5e:	77 95       	ror	r23
    4a60:	67 95       	ror	r22
    4a62:	b3 95       	inc	r27
    4a64:	d9 f7       	brne	.-10     	; 0x4a5c <__fixunssfsi+0x42>
    4a66:	3e f4       	brtc	.+14     	; 0x4a76 <__fixunssfsi+0x5c>
    4a68:	90 95       	com	r25
    4a6a:	80 95       	com	r24
    4a6c:	70 95       	com	r23
    4a6e:	61 95       	neg	r22
    4a70:	7f 4f       	sbci	r23, 0xFF	; 255
    4a72:	8f 4f       	sbci	r24, 0xFF	; 255
    4a74:	9f 4f       	sbci	r25, 0xFF	; 255
    4a76:	08 95       	ret

00004a78 <__fp_cmp>:
    4a78:	99 0f       	add	r25, r25
    4a7a:	00 08       	sbc	r0, r0
    4a7c:	55 0f       	add	r21, r21
    4a7e:	aa 0b       	sbc	r26, r26
    4a80:	e0 e8       	ldi	r30, 0x80	; 128
    4a82:	fe ef       	ldi	r31, 0xFE	; 254
    4a84:	16 16       	cp	r1, r22
    4a86:	17 06       	cpc	r1, r23
    4a88:	e8 07       	cpc	r30, r24
    4a8a:	f9 07       	cpc	r31, r25
    4a8c:	c0 f0       	brcs	.+48     	; 0x4abe <__fp_cmp+0x46>
    4a8e:	12 16       	cp	r1, r18
    4a90:	13 06       	cpc	r1, r19
    4a92:	e4 07       	cpc	r30, r20
    4a94:	f5 07       	cpc	r31, r21
    4a96:	98 f0       	brcs	.+38     	; 0x4abe <__fp_cmp+0x46>
    4a98:	62 1b       	sub	r22, r18
    4a9a:	73 0b       	sbc	r23, r19
    4a9c:	84 0b       	sbc	r24, r20
    4a9e:	95 0b       	sbc	r25, r21
    4aa0:	39 f4       	brne	.+14     	; 0x4ab0 <__fp_cmp+0x38>
    4aa2:	0a 26       	eor	r0, r26
    4aa4:	61 f0       	breq	.+24     	; 0x4abe <__fp_cmp+0x46>
    4aa6:	23 2b       	or	r18, r19
    4aa8:	24 2b       	or	r18, r20
    4aaa:	25 2b       	or	r18, r21
    4aac:	21 f4       	brne	.+8      	; 0x4ab6 <__fp_cmp+0x3e>
    4aae:	08 95       	ret
    4ab0:	0a 26       	eor	r0, r26
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <__fp_cmp+0x3e>
    4ab4:	a1 40       	sbci	r26, 0x01	; 1
    4ab6:	a6 95       	lsr	r26
    4ab8:	8f ef       	ldi	r24, 0xFF	; 255
    4aba:	81 1d       	adc	r24, r1
    4abc:	81 1d       	adc	r24, r1
    4abe:	08 95       	ret

00004ac0 <__fp_inf>:
    4ac0:	97 f9       	bld	r25, 7
    4ac2:	9f 67       	ori	r25, 0x7F	; 127
    4ac4:	80 e8       	ldi	r24, 0x80	; 128
    4ac6:	70 e0       	ldi	r23, 0x00	; 0
    4ac8:	60 e0       	ldi	r22, 0x00	; 0
    4aca:	08 95       	ret

00004acc <__fp_nan>:
    4acc:	9f ef       	ldi	r25, 0xFF	; 255
    4ace:	80 ec       	ldi	r24, 0xC0	; 192
    4ad0:	08 95       	ret

00004ad2 <__fp_pscA>:
    4ad2:	00 24       	eor	r0, r0
    4ad4:	0a 94       	dec	r0
    4ad6:	16 16       	cp	r1, r22
    4ad8:	17 06       	cpc	r1, r23
    4ada:	18 06       	cpc	r1, r24
    4adc:	09 06       	cpc	r0, r25
    4ade:	08 95       	ret

00004ae0 <__fp_pscB>:
    4ae0:	00 24       	eor	r0, r0
    4ae2:	0a 94       	dec	r0
    4ae4:	12 16       	cp	r1, r18
    4ae6:	13 06       	cpc	r1, r19
    4ae8:	14 06       	cpc	r1, r20
    4aea:	05 06       	cpc	r0, r21
    4aec:	08 95       	ret

00004aee <__fp_round>:
    4aee:	09 2e       	mov	r0, r25
    4af0:	03 94       	inc	r0
    4af2:	00 0c       	add	r0, r0
    4af4:	11 f4       	brne	.+4      	; 0x4afa <__fp_round+0xc>
    4af6:	88 23       	and	r24, r24
    4af8:	52 f0       	brmi	.+20     	; 0x4b0e <__fp_round+0x20>
    4afa:	bb 0f       	add	r27, r27
    4afc:	40 f4       	brcc	.+16     	; 0x4b0e <__fp_round+0x20>
    4afe:	bf 2b       	or	r27, r31
    4b00:	11 f4       	brne	.+4      	; 0x4b06 <__fp_round+0x18>
    4b02:	60 ff       	sbrs	r22, 0
    4b04:	04 c0       	rjmp	.+8      	; 0x4b0e <__fp_round+0x20>
    4b06:	6f 5f       	subi	r22, 0xFF	; 255
    4b08:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0e:	08 95       	ret

00004b10 <__fp_split3>:
    4b10:	57 fd       	sbrc	r21, 7
    4b12:	90 58       	subi	r25, 0x80	; 128
    4b14:	44 0f       	add	r20, r20
    4b16:	55 1f       	adc	r21, r21
    4b18:	59 f0       	breq	.+22     	; 0x4b30 <__fp_splitA+0x10>
    4b1a:	5f 3f       	cpi	r21, 0xFF	; 255
    4b1c:	71 f0       	breq	.+28     	; 0x4b3a <__fp_splitA+0x1a>
    4b1e:	47 95       	ror	r20

00004b20 <__fp_splitA>:
    4b20:	88 0f       	add	r24, r24
    4b22:	97 fb       	bst	r25, 7
    4b24:	99 1f       	adc	r25, r25
    4b26:	61 f0       	breq	.+24     	; 0x4b40 <__fp_splitA+0x20>
    4b28:	9f 3f       	cpi	r25, 0xFF	; 255
    4b2a:	79 f0       	breq	.+30     	; 0x4b4a <__fp_splitA+0x2a>
    4b2c:	87 95       	ror	r24
    4b2e:	08 95       	ret
    4b30:	12 16       	cp	r1, r18
    4b32:	13 06       	cpc	r1, r19
    4b34:	14 06       	cpc	r1, r20
    4b36:	55 1f       	adc	r21, r21
    4b38:	f2 cf       	rjmp	.-28     	; 0x4b1e <__fp_split3+0xe>
    4b3a:	46 95       	lsr	r20
    4b3c:	f1 df       	rcall	.-30     	; 0x4b20 <__fp_splitA>
    4b3e:	08 c0       	rjmp	.+16     	; 0x4b50 <__fp_splitA+0x30>
    4b40:	16 16       	cp	r1, r22
    4b42:	17 06       	cpc	r1, r23
    4b44:	18 06       	cpc	r1, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	f1 cf       	rjmp	.-30     	; 0x4b2c <__fp_splitA+0xc>
    4b4a:	86 95       	lsr	r24
    4b4c:	71 05       	cpc	r23, r1
    4b4e:	61 05       	cpc	r22, r1
    4b50:	08 94       	sec
    4b52:	08 95       	ret

00004b54 <__fp_zero>:
    4b54:	e8 94       	clt

00004b56 <__fp_szero>:
    4b56:	bb 27       	eor	r27, r27
    4b58:	66 27       	eor	r22, r22
    4b5a:	77 27       	eor	r23, r23
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	97 f9       	bld	r25, 7
    4b60:	08 95       	ret

00004b62 <__gesf2>:
    4b62:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__fp_cmp>
    4b66:	08 f4       	brcc	.+2      	; 0x4b6a <__gesf2+0x8>
    4b68:	8f ef       	ldi	r24, 0xFF	; 255
    4b6a:	08 95       	ret

00004b6c <__mulsf3>:
    4b6c:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__mulsf3x>
    4b70:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__fp_round>
    4b74:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__fp_pscA>
    4b78:	38 f0       	brcs	.+14     	; 0x4b88 <__mulsf3+0x1c>
    4b7a:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <__fp_pscB>
    4b7e:	20 f0       	brcs	.+8      	; 0x4b88 <__mulsf3+0x1c>
    4b80:	95 23       	and	r25, r21
    4b82:	11 f0       	breq	.+4      	; 0x4b88 <__mulsf3+0x1c>
    4b84:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__fp_inf>
    4b88:	0c 94 66 25 	jmp	0x4acc	; 0x4acc <__fp_nan>
    4b8c:	11 24       	eor	r1, r1
    4b8e:	0c 94 ab 25 	jmp	0x4b56	; 0x4b56 <__fp_szero>

00004b92 <__mulsf3x>:
    4b92:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__fp_split3>
    4b96:	70 f3       	brcs	.-36     	; 0x4b74 <__mulsf3+0x8>

00004b98 <__mulsf3_pse>:
    4b98:	95 9f       	mul	r25, r21
    4b9a:	c1 f3       	breq	.-16     	; 0x4b8c <__mulsf3+0x20>
    4b9c:	95 0f       	add	r25, r21
    4b9e:	50 e0       	ldi	r21, 0x00	; 0
    4ba0:	55 1f       	adc	r21, r21
    4ba2:	62 9f       	mul	r22, r18
    4ba4:	f0 01       	movw	r30, r0
    4ba6:	72 9f       	mul	r23, r18
    4ba8:	bb 27       	eor	r27, r27
    4baa:	f0 0d       	add	r31, r0
    4bac:	b1 1d       	adc	r27, r1
    4bae:	63 9f       	mul	r22, r19
    4bb0:	aa 27       	eor	r26, r26
    4bb2:	f0 0d       	add	r31, r0
    4bb4:	b1 1d       	adc	r27, r1
    4bb6:	aa 1f       	adc	r26, r26
    4bb8:	64 9f       	mul	r22, r20
    4bba:	66 27       	eor	r22, r22
    4bbc:	b0 0d       	add	r27, r0
    4bbe:	a1 1d       	adc	r26, r1
    4bc0:	66 1f       	adc	r22, r22
    4bc2:	82 9f       	mul	r24, r18
    4bc4:	22 27       	eor	r18, r18
    4bc6:	b0 0d       	add	r27, r0
    4bc8:	a1 1d       	adc	r26, r1
    4bca:	62 1f       	adc	r22, r18
    4bcc:	73 9f       	mul	r23, r19
    4bce:	b0 0d       	add	r27, r0
    4bd0:	a1 1d       	adc	r26, r1
    4bd2:	62 1f       	adc	r22, r18
    4bd4:	83 9f       	mul	r24, r19
    4bd6:	a0 0d       	add	r26, r0
    4bd8:	61 1d       	adc	r22, r1
    4bda:	22 1f       	adc	r18, r18
    4bdc:	74 9f       	mul	r23, r20
    4bde:	33 27       	eor	r19, r19
    4be0:	a0 0d       	add	r26, r0
    4be2:	61 1d       	adc	r22, r1
    4be4:	23 1f       	adc	r18, r19
    4be6:	84 9f       	mul	r24, r20
    4be8:	60 0d       	add	r22, r0
    4bea:	21 1d       	adc	r18, r1
    4bec:	82 2f       	mov	r24, r18
    4bee:	76 2f       	mov	r23, r22
    4bf0:	6a 2f       	mov	r22, r26
    4bf2:	11 24       	eor	r1, r1
    4bf4:	9f 57       	subi	r25, 0x7F	; 127
    4bf6:	50 40       	sbci	r21, 0x00	; 0
    4bf8:	9a f0       	brmi	.+38     	; 0x4c20 <__mulsf3_pse+0x88>
    4bfa:	f1 f0       	breq	.+60     	; 0x4c38 <__mulsf3_pse+0xa0>
    4bfc:	88 23       	and	r24, r24
    4bfe:	4a f0       	brmi	.+18     	; 0x4c12 <__mulsf3_pse+0x7a>
    4c00:	ee 0f       	add	r30, r30
    4c02:	ff 1f       	adc	r31, r31
    4c04:	bb 1f       	adc	r27, r27
    4c06:	66 1f       	adc	r22, r22
    4c08:	77 1f       	adc	r23, r23
    4c0a:	88 1f       	adc	r24, r24
    4c0c:	91 50       	subi	r25, 0x01	; 1
    4c0e:	50 40       	sbci	r21, 0x00	; 0
    4c10:	a9 f7       	brne	.-22     	; 0x4bfc <__mulsf3_pse+0x64>
    4c12:	9e 3f       	cpi	r25, 0xFE	; 254
    4c14:	51 05       	cpc	r21, r1
    4c16:	80 f0       	brcs	.+32     	; 0x4c38 <__mulsf3_pse+0xa0>
    4c18:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__fp_inf>
    4c1c:	0c 94 ab 25 	jmp	0x4b56	; 0x4b56 <__fp_szero>
    4c20:	5f 3f       	cpi	r21, 0xFF	; 255
    4c22:	e4 f3       	brlt	.-8      	; 0x4c1c <__mulsf3_pse+0x84>
    4c24:	98 3e       	cpi	r25, 0xE8	; 232
    4c26:	d4 f3       	brlt	.-12     	; 0x4c1c <__mulsf3_pse+0x84>
    4c28:	86 95       	lsr	r24
    4c2a:	77 95       	ror	r23
    4c2c:	67 95       	ror	r22
    4c2e:	b7 95       	ror	r27
    4c30:	f7 95       	ror	r31
    4c32:	e7 95       	ror	r30
    4c34:	9f 5f       	subi	r25, 0xFF	; 255
    4c36:	c1 f7       	brne	.-16     	; 0x4c28 <__mulsf3_pse+0x90>
    4c38:	fe 2b       	or	r31, r30
    4c3a:	88 0f       	add	r24, r24
    4c3c:	91 1d       	adc	r25, r1
    4c3e:	96 95       	lsr	r25
    4c40:	87 95       	ror	r24
    4c42:	97 f9       	bld	r25, 7
    4c44:	08 95       	ret

00004c46 <__ashrdi3>:
    4c46:	97 fb       	bst	r25, 7
    4c48:	10 f8       	bld	r1, 0

00004c4a <__lshrdi3>:
    4c4a:	16 94       	lsr	r1
    4c4c:	00 08       	sbc	r0, r0
    4c4e:	0f 93       	push	r16
    4c50:	08 30       	cpi	r16, 0x08	; 8
    4c52:	98 f0       	brcs	.+38     	; 0x4c7a <__lshrdi3+0x30>
    4c54:	08 50       	subi	r16, 0x08	; 8
    4c56:	23 2f       	mov	r18, r19
    4c58:	34 2f       	mov	r19, r20
    4c5a:	45 2f       	mov	r20, r21
    4c5c:	56 2f       	mov	r21, r22
    4c5e:	67 2f       	mov	r22, r23
    4c60:	78 2f       	mov	r23, r24
    4c62:	89 2f       	mov	r24, r25
    4c64:	90 2d       	mov	r25, r0
    4c66:	f4 cf       	rjmp	.-24     	; 0x4c50 <__lshrdi3+0x6>
    4c68:	05 94       	asr	r0
    4c6a:	97 95       	ror	r25
    4c6c:	87 95       	ror	r24
    4c6e:	77 95       	ror	r23
    4c70:	67 95       	ror	r22
    4c72:	57 95       	ror	r21
    4c74:	47 95       	ror	r20
    4c76:	37 95       	ror	r19
    4c78:	27 95       	ror	r18
    4c7a:	0a 95       	dec	r16
    4c7c:	aa f7       	brpl	.-22     	; 0x4c68 <__lshrdi3+0x1e>
    4c7e:	0f 91       	pop	r16
    4c80:	08 95       	ret

00004c82 <__cmpdi2_s8>:
    4c82:	00 24       	eor	r0, r0
    4c84:	a7 fd       	sbrc	r26, 7
    4c86:	00 94       	com	r0
    4c88:	2a 17       	cp	r18, r26
    4c8a:	30 05       	cpc	r19, r0
    4c8c:	40 05       	cpc	r20, r0
    4c8e:	50 05       	cpc	r21, r0
    4c90:	60 05       	cpc	r22, r0
    4c92:	70 05       	cpc	r23, r0
    4c94:	80 05       	cpc	r24, r0
    4c96:	90 05       	cpc	r25, r0
    4c98:	08 95       	ret

00004c9a <_exit>:
    4c9a:	f8 94       	cli

00004c9c <__stop_program>:
    4c9c:	ff cf       	rjmp	.-2      	; 0x4c9c <__stop_program>
